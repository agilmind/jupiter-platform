# apps/hostinger/docker-compose.vps.yml
# Define los servicios para la configuración hostinger
# Incluye stack de monitoreo opcional si monitoringEnabled=true
# Gestionado por el generador @mi-org/vps

# Definir configuración de logging reutilizable
x-logging-options: &logging-options
  driver: 'json-file'
  options:
    max-size: '10m' # Tamaño máximo por archivo
    max-file: '3' # Número de archivos a retener

services:
  nginx:
    image: nginx:stable-alpine
    container_name: hostinger-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/includes:/etc/nginx/includes:ro
      - ./html:/usr/share/nginx/html:ro
      - /var/www/letsencrypt/challenges:/var/www/letsencrypt/challenges-in-container:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - webproxy # Conectar a la red compartida
    logging: *logging-options # Aplicar rotación de logs
    depends_on:
      - grafana # Solo si monitoringEnabled es true

  # --- Stack de Monitoreo (Opcional) ---

  node-exporter:
    image: prom/node-exporter:latest
    container_name: hostinger-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    # No necesita exponer puertos al host, Prometheus lo scrapea por la red interna
    # ports:
    #  - "9100:9100" # Solo si quieres acceder directamente desde el host
    pid: host # Necesario para que lea métricas del host correctamente
    networks:
      - webproxy
    logging: *logging-options

  prometheus:
    image: prom/prometheus:latest
    container_name: hostinger-prometheus
    restart: unless-stopped
    volumes:
      # Montar config (sin cambios)
      - ./monitoring-conf/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command: # (sin cambios)
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=15d'
    networks:
      - webproxy
    logging: *logging-options

  loki:
    image: grafana/loki:latest
    container_name: hostinger-loki
    restart: unless-stopped
    volumes:
      # Montar config (sin cambios)
      - ./monitoring-conf/loki-config.yml:/etc/loki/config.yml
      - loki-data:/loki
    command: -config.file=/etc/loki/config.yml
    networks:
      - webproxy
    logging: *logging-options

  promtail:
    image: grafana/promtail:latest
    container_name: hostinger-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring-conf/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - promtail-positions:/etc/promtail/positions
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    networks:
      - webproxy
    logging: *logging-options
    depends_on:
      - loki

  grafana:
    image: grafana/grafana-oss:latest
    container_name: hostinger-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
    networks:
      - webproxy
    logging: *logging-options
    depends_on:
      - prometheus
      - loki

# --- Redes ---
networks:
  webproxy:
    driver: bridge
    name: webproxy

volumes:
  prometheus-data: {}
  loki-data: {}
  grafana-data: {}
  promtail-positions: {}

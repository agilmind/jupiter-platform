services:
  app-server:
    build:
      context: ./app-server
      dockerfile: Dockerfile.dev
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/miproyecto
    volumes:
      - ./app-server:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - postgres
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=miproyecto
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5433:5432' # Usar 5433 externos para evitar conflictos
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  pgbouncer:
    image: edoburu/pgbouncer:1.18.0
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_NAME=miproyecto
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=100
      - DEFAULT_POOL_SIZE=20
      - ADMIN_USERS=postgres
    ports:
      - '6432:6432'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        ['CMD', 'bash', '-c', "printf \"SHOW LISTS\\n\" | nc localhost 6432"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  web-app:
    build:
      context: ./web-app
      dockerfile: Dockerfile
    ports:
      - '8080:80'
    volumes:
      - ./web-app/src:/usr/share/nginx/html
      - ./web-app/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app-server
    networks:
      - app-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - '5672:5672' # AMQP port
      - '15672:15672' # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', '-q', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  scraper-worker:
      build:
        context: ./scraper-worker
        dockerfile: Dockerfile
      environment:
        - NODE_ENV=development
        - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
        - SCRAPER_QUEUE=scraper_tasks
        - SCRAPER_RETRY_QUEUE=scraper_retry
        - SCRAPER_DLQ=scraper_dlq
        - RESULT_QUEUE=result_queue
        - PREFETCH=1
        - MAX_RETRIES=3
        - BACKOFF_MULTIPLIER=2000
        - GRAPHQL_URL=http://app-server:3000/graphql
        - DEBUG=true
      volumes:
        - ./scraper-worker/src:/app/src
        - ./scraper-worker/tsconfig.json:/app/tsconfig.json
      networks:
        - app-network
      depends_on:
        - rabbitmq
      logging:
        driver: 'json-file'
        options:
          max-size: '10m'
          max-file: '3'
      restart: unless-stopped

networks:
  app-network:
    name: miproyecto-network

volumes:
  postgres_data:
  rabbitmq_data:

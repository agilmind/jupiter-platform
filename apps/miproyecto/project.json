{
  "name": "miproyecto-stack",
  "projectType": "application",
  "root": "apps/miproyecto",
  "targets": {
    "serve": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up"
      }
    },
    "serve-api-only": {
      "executor": "nx:run-commands",
      "options": {
        "command": "LOCAL_DEV=true DATABASE_URL=postgresql://postgres:postgres@localhost:5433/miproyecto npx tsx --watch apps/miproyecto/app-server/src/main.ts"
      }
    },
    "serve-db-only": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up postgres"
      }
    },
    "db-setup": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto/app-server && npx prisma migrate dev --name init"
      }
    },
    "serve-ui-only": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up web-app"
      }
    },
    "serve-scraper-only": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up scraper-worker"
      }
    },
    "debug-full-stack": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": true,
        "commands": [
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up postgres rabbitmq web-app scraper-worker",
          "sleep 15 && LOCAL_DEV=true DATABASE_URL=postgresql://postgres:postgres@localhost:5433/miproyecto npx tsx --watch apps/miproyecto/app-server/src/main.ts"
        ]
      }
    },
    "prepare-scraper": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "cd apps/miproyecto/scraper-worker && npm install",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build scraper-worker"
        ],
        "parallel": false
      }
    },
    "debug-scraper": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml stop scraper-worker || true",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml rm -f scraper-worker || true",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build scraper-worker",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up scraper-worker"
        ],
        "parallel": false
      }
    },
    "build-scraper": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "cd apps/miproyecto/scraper-worker && tsc --project tsconfig.json || echo \"Compilaci√≥n fallida pero continuando\"",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build scraper-worker"
        ],
        "parallel": false
      }
    },
    "build-scraper-only": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build --no-cache scraper-worker",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up -d --force-recreate scraper-worker"
        ],
        "parallel": false
      }
    },
    "debug-logs": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml logs -f --tail=100 scraper-worker"
        ],
        "parallel": false
      }
    },
    "scraper-logs": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto && docker compose -f docker-compose.dev.yml logs -f scraper-worker"
      }
    },
    "prebuild-images": {
      "executor": "nx:run-commands",
      "options": {
        "command": "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build"
      }
    },
    "workflow": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "echo \"Paso 1: Construyendo im√°genes Docker...\"",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build --quiet",
          "echo \"Paso 2: Iniciando servicios de infraestructura...\"",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up -d postgres rabbitmq",
          "echo \"Esperando 10 segundos para que los servicios est√©n disponibles...\"",
          "sleep 10",
          "echo \"Paso 3: Configurando base de datos...\"",
          "cd apps/miproyecto/app-server && npx prisma migrate dev --name init --skip-generate || npx prisma db push || echo \"Configuraci√≥n de base de datos fall√≥ - continuando\"",
          "echo \"Paso 4: Iniciando servicios de aplicaci√≥n...\"",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up -d web-app scraper-worker",
          "echo \"Esperando 5 segundos para que los servicios est√©n disponibles...\"",
          "sleep 5",
          "echo \"Paso 5: Iniciando servidor en modo depuraci√≥n...\"",
          "LOCAL_DEV=true DATABASE_URL=postgresql://postgres:postgres@localhost:5433/miproyecto npx tsx --watch apps/miproyecto/app-server/src/main.ts"
        ],
        "parallel": false
      }
    },
    "reset-all": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml down -v",
          "echo \"Eliminando vol√∫menes y containers...\"",
          "docker volume prune -f",
          "echo \"Reconstruyendo im√°genes...\"",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build --no-cache"
        ],
        "parallel": false
      }
    },
    "test-network": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "echo 'üîç Diagn√≥stico de red entre contenedores'",
          "echo '-------------------------------------'",
          "echo '‚úÖ Verificando que app-server est√© activo...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml ps app-server",

          "echo '‚úÖ Verificando logs de app-server...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml logs app-server | tail -n 20",

          "echo '‚úÖ Verificando estado de escucha en app-server...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml exec app-server sh -c 'netstat -tlpn | grep 3000 || echo \"No hay proceso escuchando en puerto 3000\"'",

          "echo '‚úÖ Verificando disponibilidad de la API en app-server...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml exec app-server sh -c 'wget -O- http://localhost:3000/api/hello || curl -s http://localhost:3000/api/hello || echo \"No se pudo conectar a la API local\"'",

          "echo '‚úÖ Verificando resoluci√≥n DNS entre contenedores...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml exec web-app sh -c 'nslookup app-server || ping -c 2 app-server || echo \"No se pudo resolver app-server\"'",

          "echo '‚úÖ Verificando conectividad desde web-app a app-server...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml exec web-app sh -c 'wget -O- http://app-server:3000/api/hello || curl -s http://app-server:3000/api/hello || echo \"No se pudo conectar a app-server:3000/api/hello\"'",

          "echo '‚úÖ Verificando configuraci√≥n de nginx en web-app...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml exec web-app sh -c 'cat /etc/nginx/conf.d/default.conf | grep -A 10 \"location /api/\"'",

          "echo '‚úÖ Verificando que nginx est√© ejecut√°ndose correctamente...'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml exec web-app sh -c 'nginx -t && ps aux | grep nginx'",

          "echo '-------------------------------------'",
          "echo '‚úÖ Prueba directa desde el host a app-server:'",
          "curl -v http://localhost:3000/api/hello || echo 'No se pudo conectar a app-server desde el host'",

          "echo '‚úÖ Prueba directa desde el host a web-app:'",
          "curl -v http://localhost:8080/api/hello || echo 'No se pudo conectar a web-app desde el host'",

          "echo '-------------------------------------'",
          "echo 'üîß Si persisten los problemas, prueba reiniciar los servicios:'",
          "echo 'cd apps/miproyecto && docker compose -f docker-compose.dev.yml restart app-server web-app'"
        ],
        "parallel": false
      }
    },
    "test-minimal": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "# Ejecutar diagn√≥stico avanzado",
          "chmod +x check-server.sh && ./check-server.sh > diagnostico.log",
          "echo 'üìã Diagn√≥stico completo guardado en diagnostico.log'",

          "# Crear directorio para prueba m√≠nima",
          "mkdir -p apps/miproyecto/test-minimal",

          "# Crear package.json simple",
          "cat > apps/miproyecto/test-minimal/package.json << 'EOL'\n{\n  \"name\": \"express-test\",\n  \"version\": \"1.0.0\",\n  \"main\": \"server.js\",\n  \"dependencies\": {\n    \"express\": \"^4.17.1\",\n    \"cors\": \"^2.8.5\"\n  }\n}\nEOL",

          "# Crear server.js simple",
          "cat > apps/miproyecto/test-minimal/server.js << 'EOL'\n// Script simple de Express para probar conectividad\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\n// Habilitar CORS para todas las peticiones\napp.use(cors());\n\n// Escuchar en todas las interfaces\nconst HOST = '0.0.0.0';\nconst PORT = 3000;\n\n// Endpoint simple para probar\napp.get('/api/hello', (req, res) => {\n  console.log('Petici√≥n recibida en /api/hello');\n  res.json({ message: 'Hola desde el servidor Express independiente' });\n});\n\n// Endpoint de health check\napp.get('/health', (req, res) => {\n  res.status(200).send('OK');\n});\n\n// Iniciar el servidor\napp.listen(PORT, HOST, () => {\n  console.log(`Servidor Express ejecut√°ndose en http://${HOST}:${PORT}`);\n  console.log('Endpoints disponibles:');\n  console.log('  - GET /api/hello');\n  console.log('  - GET /health');\n});\nEOL",

          "# Crear nginx.conf simple",
          "cat > apps/miproyecto/test-minimal/nginx.conf << 'EOL'\nserver {\n    listen 80;\n    server_name localhost;\n\n    location / {\n        return 200 \"Nginx funcionando correctamente\";\n    }\n\n    location /api {\n        proxy_pass http://express-test:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\nEOL",

          "# Crear docker-compose.minimal.yml",
          "cat > apps/miproyecto/test-minimal/docker-compose.minimal.yml << 'EOL'\nversion: \"3.8\"\n\nservices:\n  express-test:\n    image: node:22-alpine\n    working_dir: /app\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./server.js:/app/server.js\n      - ./package.json:/app/package.json\n    command: >\n      sh -c \"npm install express cors &&\n             node server.js\"\n    networks:\n      - test-network\n\n  nginx-test:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/conf.d/default.conf\n    depends_on:\n      - express-test\n    networks:\n      - test-network\n\nnetworks:\n  test-network:\n    driver: bridge\nEOL",

          "# Ejecutar la prueba m√≠nima",
          "cd apps/miproyecto/test-minimal && docker compose -f docker-compose.minimal.yml down",
          "cd apps/miproyecto/test-minimal && docker compose -f docker-compose.minimal.yml up -d",
          "sleep 5",

          "echo 'üîç Verificando prueba m√≠nima:'",
          "echo 'Logs de express-test:'",
          "cd apps/miproyecto/test-minimal && docker compose -f docker-compose.minimal.yml logs express-test",

          "echo 'Verificando acceso directo a la API m√≠nima:'",
          "curl -s http://localhost:3000/api/hello || echo 'No se pudo conectar directamente a la API m√≠nima'",

          "echo 'Verificando acceso a trav√©s de nginx m√≠nimo:'",
          "curl -s http://localhost:8080/api/hello || echo 'No se pudo conectar a trav√©s de nginx m√≠nimo'"
        ],
        "parallel": false
      }
    },
    "debug": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "# Asegurarse de que node_modules est√° actualizado",
          "npm install",

          "# Liberar el puerto 3000 si est√° en uso",
          "echo 'üîç Verificando si el puerto 3000 est√° en uso...'",
          "lsof -ti:3000 | xargs kill -9 || echo 'Puerto 3000 est√° libre'",

          "# Crear directorios necesarios",
          "mkdir -p apps/miproyecto/app-server",
          "mkdir -p apps/miproyecto/scraper-worker",

          "# Crear Dockerfile para app-server con comando NX modificado para escuchar en todas las interfaces",
          "cat > apps/miproyecto/app-server/Dockerfile.dev << 'EOL'\nFROM node:22-alpine\n\nWORKDIR /app\n\n# Instalar git y herramientas b√°sicas\nRUN apk add --no-cache git curl\n\n# Configurar para escuchar en todas las interfaces\nENV HOST=0.0.0.0\nENV PORT=3000\n\n# La clave est√° en pasar correctamente --host al comando nx serve\nCMD [\"sh\", \"-c\", \"echo 'Iniciando app-server en '$HOST':'$PORT' con interfaces p√∫blicas' && npx nx serve miproyecto-app-server --host=0.0.0.0 --port=3000\"]\nEOL",

          "# Crear Dockerfile simple para scraper-worker",
          "cat > apps/miproyecto/scraper-worker/Dockerfile.dev << 'EOL'\nFROM node:22-alpine\n\nWORKDIR /app\n\n# Instalar git para compatibilidad\nRUN apk add --no-cache git\n\n# Comando simple para iniciar\nCMD [\"npx\", \"nx\", \"serve\", \"miproyecto-scraper-worker\"]\nEOL",

          "# Crear la configuraci√≥n de nginx que funcionaba antes",
          "mkdir -p apps/miproyecto/web-app",
          "cat > apps/miproyecto/web-app/nginx.conf << 'EOL'\nserver {\n    listen 80;\n    server_name localhost;\n\n    location / {\n        root /usr/share/nginx/html;\n        index index.html;\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Redirigir /dashboard a la ra√≠z (para corregir el problema)\n    location /dashboard {\n        return 301 /;\n    }\n\n    # Para solicitudes API, proxy al backend\n    location /api {\n        proxy_pass http://app-server:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n\n    # Health check\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n    }\n}\nEOL",

          "# Detener todos los contenedores del proyecto",
          "docker ps -a | grep miproyecto | awk '{print $1}' | xargs docker stop || true",
          "docker ps -a | grep miproyecto | awk '{print $1}' | xargs docker rm || true",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml down --remove-orphans",

          "# Asegurarse de eliminar la red si existe para recrearla limpia",
          "docker network rm miproyecto-network || true",

          "# Construir y arrancar servicios",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml build",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up -d postgres rabbitmq",
          "sleep 10",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up -d app-server",
          "sleep 15",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml up -d scraper-worker web-app",
          "sleep 5",
          "echo 'üöÄ Servicios iniciados'",
          "echo 'Verificando logs de app-server:'",
          "cd apps/miproyecto && docker compose -f docker-compose.dev.yml logs app-server | tail -n 20",
          "echo 'Verificando acceso directo a API:'",
          "curl -s http://localhost:3000/api/hello || echo 'No se pudo conectar directamente a la API'",
          "echo 'Verificando acceso a trav√©s de web-app:'",
          "curl -s http://localhost:8080/api/hello || echo 'No se pudo conectar a trav√©s de web-app'"
        ],
        "parallel": false
      }
    }
  }
}

# tools/project/src/blueprints/infrastructure/vps-infrastructure/hybrid/nginx-conf/webapp.conf.template
# Archivo de configuración de Nginx para webapp.jupiter.ar (HTTP Inicial)
# Se genera en -> apps/jupiter/vps-infrastructure/hybrid/nginx-conf/webapp.conf

server {
    # Escuchar en puerto 80 para IPv4 y IPv6
    listen 80;
    listen [::]:80;

    # Dominio para el que aplica esta configuración
    # ¡Asegúrate que la variable 'projectName' se sustituya correctamente!
    server_name webapp.jupiter.ar;
    # Si siempre será 'jupiter.ar', puedes ponerlo directamente:
    # server_name webapp.jupiter.ar;

    # Ubicación para los logs de este sitio
    access_log /var/log/nginx/webapp.access.log;
    error_log /var/log/nginx/webapp.error.log warn; # Loguear errores y advertencias

    # ----- Proxy Reverso para la API Backend -----
    location /api/ {
        # Reescribir la URL quitando /api/ antes de pasarla al backend
        # Ejemplo: webapp.jupiter.ar/api/users -> http://backend/users
        rewrite ^/api/(.*)$ /$1 break;

        # Pasar la solicitud al contenedor app-server en su puerto interno (4000)
        # ¡Asegúrate que las variables 'projectName' y 'appServerName' sean correctas!
        # El nombre aquí debe ser el NOMBRE DEL SERVICIO en docker-compose.prod.yml
        proxy_pass http://jupiter-app-server:4000;

        # Cabeceras importantes para pasar al backend
        proxy_set_header Host $host; # Pasar el host original solicitado por el cliente
        proxy_set_header X-Real-IP $remote_addr; # Pasar la IP real del cliente
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Lista de IPs (si hay proxies intermedios)
        proxy_set_header X-Forwarded-Proto $scheme; # Pasar el protocolo original (http o https)

        # Configuraciones para WebSockets (si tu API los usa)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_read_timeout 600s; # Timeout extendido para requests largos
        proxy_redirect off; # No dejar que el backend redirija cambiando el host
    }

    # ----- Proxy Reverso para el Frontend (React App) -----
    location / {
        # Pasar la solicitud al contenedor web-app
        # ¡Asegúrate que las variables 'projectName' y 'webAppName' sean correctas!
        # El nombre aquí debe ser el NOMBRE DEL SERVICIO en docker-compose.prod.yml
        # Asumimos que el contenedor web-app sirve en el puerto 80 (nginx interno)
        proxy_pass http://jupiter-web-app;

        # Cabeceras importantes para pasar al backend (frontend en este caso)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

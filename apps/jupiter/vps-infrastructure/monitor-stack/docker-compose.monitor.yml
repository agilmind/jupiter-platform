# tools/project/src/blueprints/infrastructure/monitor-stack/docker-compose.monitor.yml.template
version: '3.8'

volumes:
  prometheus_data: {}
  grafana_data: {}

networks:
  monitor-network:
    driver: bridge
    name: jupiter_monitor_network
  # Necesitamos acceso a la red donde corre Nginx para que exponga Grafana
  # Asumimos que se llama así basado en el template anterior
  vps-network:
    name: jupiter_vps_network
    external: true # Usar la red ya creada por docker-compose.vps.yml

services:
  prometheus:
    image: prom/prometheus:v2.45.0 # Usar una versión específica es buena práctica
    container_name: jupiter-prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus:ro # Directorio con prometheus.yml
      - prometheus_data:/prometheus # Volumen para datos de métricas
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle' # Permite recarga de config vía API
    expose:
      - 9090 # Puerto interno para Prometheus
    networks:
      - monitor-network
    labels: # Labels opcionales para auto-descubrimiento si se usa más adelante
      org.label-schema.group: 'monitoring'

  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: jupiter-node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    expose:
      - 9100 # Puerto interno
    networks:
      - monitor-network
    pid: host # Necesario para acceder a métricas del host correctamente
    labels:
      org.label-schema.group: 'monitoring'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: jupiter-cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw # Necesita acceso al socket docker
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      # Necesario en algunas configuraciones:
      # - /dev/disk/:/dev/disk:ro
    expose:
      - 8080 # Puerto interno
    networks:
      - monitor-network
    privileged: true # Necesario para acceder a métricas detalladas del host/docker
    devices: # Necesario en algunas configuraciones
      - /dev/kmsg:/dev/kmsg
    labels:
      org.label-schema.group: 'monitoring'

  grafana:
    image: grafana/grafana-oss:9.5.3 # Usar versión específica
    container_name: jupiter-grafana
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      # - ./grafana/provisioning:/etc/grafana/provisioning # Opcional para provisioning
    environment:
      # Cambiar usuario/password por defecto si se desea (o usar variables de entorno)
      # GF_SECURITY_ADMIN_USER: admin
      # GF_SECURITY_ADMIN_PASSWORD: password_seguro # ¡Usar secrets si se cambia!
      GF_USERS_ALLOW_SIGN_UP: 'false' # Deshabilitar registro de usuarios
      # GF_SERVER_ROOT_URL: https://grafana.jupiter.ar # Configurar cuando se exponga vía Nginx
    expose:
      - 3000 # Puerto interno de Grafana
    networks:
      - monitor-network # Para que Prometheus pueda descubrirlo (si se configura)
      - vps-network # Para que Nginx (en vps-network) pueda hacer proxy_pass
    labels:
      org.label-schema.group: 'monitoring'

# Stack de Infraestructura Base para hostinger con Traefik y Monitoreo Opcional

# Definir configuración de logging reutilizable
x-logging-options: &logging-options
  driver: 'json-file'
  options:
    max-size: '10m'
    max-file: '3'

services:
  # --- Proxy Inverso Traefik ---
  traefik:
    image: traefik:latest
    container_name: hostinger-traefik
    restart: unless-stopped
    security_opt: [no-new-privileges:true]
    networks: [webproxy]
    ports: ['80:80', '443:443']
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/etc/traefik/acme
      # --- AÑADIR MONTAJE HTPSASSWD ---
      - ./traefik-auth/.htpasswd:/etc/traefik/auth/.htpasswd:ro
    environment: # Solo para DNS challenge (ejemplo)
      - CF_DNS_API_TOKEN=${CF_DNS_API_TOKEN:-}
    labels:
      - 'traefik.enable=true'
      # Router HTTP (SIN redirect middleware aquí, ACME lo necesita)
      - 'traefik.http.routers.traefik-dashboard-http.rule=Host(`traefik.jupiter.ar`)'
      - 'traefik.http.routers.traefik-dashboard-http.entrypoints=web'
      # Router HTTPS (Seguro)
      - 'traefik.http.routers.traefik-dashboard-secure.rule=Host(`traefik.jupiter.ar`)'
      - 'traefik.http.routers.traefik-dashboard-secure.entrypoints=websecure'
      - 'traefik.http.routers.traefik-dashboard-secure.tls=true'
      - 'traefik.http.routers.traefik-dashboard-secure.tls.certresolver=myresolver'
      - 'traefik.http.routers.traefik-dashboard-secure.service=api@internal'
      # MIDDLEWARE AUTH
      - 'traefik.http.middlewares.dashboard-auth.basicauth.usersfile=/home/deploy/infra/traefik-auth/.htpasswd'
      - 'traefik.http.routers.traefik-dashboard-secure.middlewares=dashboard-auth@docker'

  # --- Stack de Monitoreo ---

  node-exporter:
    image: prom/node-exporter:latest
    container_name: hostinger-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      [
        '--path.procfs=/host/proc',
        '--path.sysfs=/host/sys',
        '--path.rootfs=/rootfs',
        '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker|rootfs/run/docker/netns)($$|/)',
        '--collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$$',
      ]
    pid: host
    networks: [webproxy]
    logging: *logging-options

  prometheus:
    image: prom/prometheus:latest
    container_name: hostinger-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      [
        '--config.file=/etc/prometheus/prometheus.yml',
        '--storage.tsdb.retention.time=15d',
        '--web.enable-lifecycle',
      ]
    networks: [webproxy]
    logging: *logging-options

  loki:
    image: grafana/loki:latest
    container_name: hostinger-loki
    restart: unless-stopped
    volumes:
      - ./loki-config.yml:/etc/loki/config.yml
      - loki-data:/loki
    command: -config.file=/etc/loki/config.yml
    networks: [webproxy]
    logging: *logging-options

  promtail:
    image: grafana/promtail:latest
    container_name: hostinger-promtail
    restart: unless-stopped
    volumes:
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Usar volumen nombrado para positions (ruta debe coincidir con promtail-config.yml)
      - promtail-positions:/etc/promtail/positions
    command: -config.file=/etc/promtail/config.yml
    networks: [webproxy]
    logging: *logging-options
    depends_on: [loki]

  grafana:
    image: grafana/grafana-oss:latest
    container_name: hostinger-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD:-changeme}
      - GF_SERVER_ROOT_URL=https://grafana.jupiter.ar
      # - GF_AUTH_ANONYMOUS_ENABLED=false # Ya es false por defecto
    labels:
      - 'traefik.enable=true'
      # Router HTTP (SIN redirect middleware aquí para ACME)
      - 'traefik.http.routers.grafana-http.rule=Host(`grafana.jupiter.ar`)'
      - 'traefik.http.routers.grafana-http.entrypoints=web'
      # - "traefik.http.routers.grafana-http.middlewares=https-redirect" # <-- ELIMINAR
      # Router HTTPS
      - 'traefik.http.routers.grafana-secure.rule=Host(`grafana.jupiter.ar`)'
      - 'traefik.http.routers.grafana-secure.entrypoints=websecure'
      - 'traefik.http.routers.grafana-secure.tls=true'
      - 'traefik.http.routers.grafana-secure.tls.certresolver=myresolver'
      # Servicio Backend
      - 'traefik.http.services.grafana-service.loadbalancer.server.port=3000'
      - 'traefik.http.routers.grafana-secure.service=grafana-service'
    networks: [webproxy]
    logging: *logging-options
    depends_on: [prometheus, loki]

# --- Redes ---
networks:
  webproxy:
    name: webproxy
    driver: bridge

# --- Volúmenes Nombrados ---
volumes:
  traefik-acme: {}
  # Volúmenes solo necesarios si monitoreo está activado
  prometheus-data: {}
  loki-data: {}
  grafana-data: {}
  promtail-positions: {}

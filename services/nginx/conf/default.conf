# Configuración HTTP para redirección
server {
    listen 80;
    server_name jupiter.ar www.jupiter.ar webapp.jupiter.ar grafana.jupiter.ar;

    # Para validación Let's Encrypt
    location ~ /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }

    # Redirección a HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# Configuración HTTPS para el sitio principal (WordPress)
server {
    listen 443 ssl;
    server_name jupiter.ar www.jupiter.ar;

    ssl_certificate /etc/letsencrypt/live/jupiter.ar/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jupiter.ar/privkey.pem;

    # Configuración SSL básica
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # WordPress
    location / {
        proxy_pass http://wordpress;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Configuración para la aplicación web principal
server {
    listen 443 ssl http2;  # Habilitamos HTTP/2
    listen [::]:443 ssl http2;
    server_name webapp.jupiter.ar;

    ssl_certificate /etc/letsencrypt/live/jupiter.ar/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jupiter.ar/privkey.pem;

    # Configuración SSL optimizada
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # Headers de seguridad (son transparentes para aplicaciones bien configuradas)
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    # Compresión Brotli (más eficiente que gzip)
    brotli on;
    brotli_comp_level 6;
    brotli_static on;
    brotli_types
        application/javascript
        application/json
        application/xml
        application/xml+rss
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Compresión gzip (respaldo para navegadores sin soporte Brotli)
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        application/javascript
        application/json
        application/x-javascript
        application/xml
        application/xml+rss
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Frontend React (archivos estáticos)
    location / {
        root /var/www/frontend;
        try_files $uri $uri/ /index.html;

        # Configuración de caché para recursos estáticos
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 30d;
            add_header Cache-Control "public, max-age=2592000";
            access_log off;
        }

        # No cachear HTML para asegurar que siempre se sirva la versión más reciente
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
        }
    }

    # API GraphQL - proxy al servicio API
    location /graphql {
        proxy_pass http://api:4000/graphql;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Otras rutas API (si las necesitas)
    location /api/ {
        proxy_pass http://api:4000/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Archivos subidos/descargados
    location /uploads {
        alias /var/www/uploads;
        expires max;
        try_files $uri =404;
    }
}

# Redirigir HTTP a HTTPS
server {
    listen 80;
    server_name grafana.jupiter.ar;

    # Redirigir todas las solicitudes HTTP a HTTPS
    return 301 https://$host$request_uri;
}


# Configuración HTTPS para Grafana
server {
    listen 443 ssl;
    server_name grafana.jupiter.ar;

    ssl_certificate /etc/letsencrypt/live/jupiter.ar/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jupiter.ar/privkey.pem;

    # Configuración SSL básica
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Resolver DNS dinámico usando el DNS interno de Docker
    resolver 127.0.0.11 valid=10s ipv6=off;
    set $grafana_upstream http://grafana:3000;

    # Grafana - Configuración mejorada
    location / {
        proxy_pass $grafana_upstream;

        # Configuración crucial de encabezados
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Configuración correcta para WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Tiempos de espera ampliados
        proxy_connect_timeout 10s; # Reducido para fallar rápido si Grafana no está
        proxy_send_timeout 90;
        proxy_read_timeout 90;

        # Manejo de errores
        proxy_intercept_errors on;  # Intercepta errores del upstream
        error_page 502 503 504 =503 @grafana_unavailable;
    }

    # Respuesta personalizada cuando Grafana no está disponible
    location @grafana_unavailable {
        return 503 "Grafana is currently unavailable. Please try again later.";
    }
}

# Añadir dentro del bloque server para HTTP o en un bloque server adicional
server {
    listen 80;
    server_name localhost;

    # Exponer métricas de Nginx para Prometheus
    location /stub_status {
        stub_status on;
        allow 127.0.0.1;
        allow 172.16.0.0/12;  # Red Docker típica
        allow 192.168.0.0/16; # Otra red privada común
        deny all;
    }
}
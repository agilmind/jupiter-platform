import amqp from 'amqplib';

async function startWorker() {
  try {
    console.log('Iniciando worker...');

    // Conectar a RabbitMQ
    const connection = await amqp.connect(process.env.RABBITMQ_URL || 'amqp://guest:guest@localhost:5672');
    const channel = await connection.createChannel();

    // Definir colas
    const incomingQueue = 'worker-queue';
    const responseQueue = 'server-queue';

    await channel.assertQueue(incomingQueue, { durable: true });
    await channel.assertQueue(responseQueue, { durable: true });

    console.log(`[*] Esperando mensajes en ${incomingQueue}`);

    // Procesar mensajes
    channel.consume(incomingQueue, async (msg) => {
      if (msg) {
        // Procesar el mensaje
        const content = JSON.parse(msg.content.toString());
        console.log(`[x] Recibido ${content.id}`);

        // Simular procesamiento (aquí podrías realizar cualquier tarea)
        await new Promise(resolve => setTimeout(resolve, 1000));

        // Invertir el string como ejemplo de procesamiento
        const result = content.content.split('').reverse().join('');

        // Enviar respuesta
        channel.sendToQueue(responseQueue, Buffer.from(JSON.stringify({
          id: content.id,
          result
        })));

        console.log(`[x] Procesado y devuelto ${content.id}`);

        // Confirmar procesamiento
        channel.ack(msg);
      }
    });

    // Gestión de cierre
    process.on('SIGINT', async () => {
      await channel.close();
      await connection.close();
      process.exit(0);
    });
  } catch (error) {
    console.error('Error en el worker:', error);
  }
}

// Iniciar el worker
startWorker().catch(err => {
  console.error('Error al iniciar el worker:', err);
});

# Dockerfile para worker en desarrollo
# Usa la imagen base para node en desarrollo

FROM node-base:dev

WORKDIR /app

# Identificar el servicio
ENV SERVICE_TYPE="worker"
ENV SERVICE_NAME="<%=workerName%>"
ENV NODE_ENV="development"

# Preparar directorios para los package.json
RUN mkdir -p ./apps/<%=projectName%>/<%=workerName%> \
    ./libs/<%=projectName%>/shared \
    ./libs/<%=projectName%>/api-interfaces

# Copiar package.json de la aplicación y el proyecto
COPY package.json package-lock.json ./
COPY apps/<%=projectName%>/<%=workerName%>/package.json ./apps/<%=projectName%>/<%=workerName%>/

# Copiar package.json de las libs usando file-utils
RUN /usr/local/bin/file-utils.sh copy-if-exists libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/file-utils.sh copy-if-exists libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Eliminar dependencias problemáticas
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar dependencias (con caché de Docker)
RUN npm install
RUN npm install --save-dev @types/amqplib

# Copiar archivos de configuración
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/

# Configurar prisma si es necesario
RUN cd ./apps/<%=projectName%>/<%=workerName%> && \
    if [ -f "./prisma/schema.prisma" ]; then \
      npx prisma generate; \
    fi

# Configurar Debug
ENV HOST="0.0.0.0"
ENV DEBUG_PORT="9230"
EXPOSE ${DEBUG_PORT}

# Usar el script de inicio unificado
WORKDIR /app/apps/<%=projectName%>/<%=workerName%>
CMD ["/usr/local/bin/start-service.sh"]

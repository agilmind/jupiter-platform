# Base stage - build environment
FROM node:22-alpine AS builder

WORKDIR /app

# Instalar dependencias del sistema
RUN apk add --no-cache git openssh curl

# Copiar scripts helper al contenedor
COPY apps/<%=projectName%>/copy_if_exists.sh apps/<%=projectName%>/copy-files.sh apps/<%=projectName%>/handle-prisma.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/copy_if_exists.sh /usr/local/bin/copy-files.sh /usr/local/bin/handle-prisma.sh

# Establecer variables para handle-prisma.sh
ENV PROJECT_NAME=<%=projectName%> APP_NAME=<%=workerName%>

# Copiar package.json y package-lock.json para la caché de Docker
COPY package.json package-lock.json ./

# Preparar directorios para los package.json de apps y libs
RUN mkdir -p ./apps/<%=projectName%>/<%=workerName%> \
    ./libs/<%=projectName%>/shared \
    ./libs/<%=projectName%>/api-interfaces

# Copiar package.json de la aplicación y las libs
COPY apps/<%=projectName%>/<%=workerName%>/package.json ./apps/<%=projectName%>/<%=workerName%>/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Eliminar haiku-generator de las dependencias
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar dependencias de producción y @types/amqplib para compilación
RUN npm install --only=production && npm install --no-save @types/amqplib

# Copiar archivos de configuración y código fuente
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=workerName%> ./apps/<%=projectName%>/<%=workerName%>/

# Copiar libs compartidas usando copy-files para evitar problemas de recursión
RUN /usr/local/bin/copy-files.sh "libs/<%=projectName%>/shared/*" "./libs/<%=projectName%>/shared/"
RUN /usr/local/bin/copy-files.sh "libs/<%=projectName%>/api-interfaces/*" "./libs/<%=projectName%>/api-interfaces/"

# Configurar y generar Prisma
RUN cd ./apps/<%=projectName%>/<%=workerName%> && \
    if [ -f "./prisma/schema.prisma" ]; then \
      npx prisma generate; \
    fi

# Detectar y guardar la ubicación de Prisma
RUN /usr/local/bin/handle-prisma.sh detect

# Construir la aplicación
WORKDIR /app/apps/<%=projectName%>/<%=workerName%>
RUN mkdir -p /app/dist
RUN echo '{"extends": "./tsconfig.app.json", "compilerOptions": {"noImplicitAny": false, "skipLibCheck": true}}' > tsconfig.docker.json
RUN npx tsc -p tsconfig.docker.json --outDir /app/dist/apps/<%=projectName%>/<%=workerName%>

# Producción - imagen mínima
FROM node:22-alpine AS production

WORKDIR /app

# Instalar herramientas básicas
RUN apk add --no-cache curl

# Copiar scripts
COPY apps/<%=projectName%>/handle-prisma.sh /usr/local/bin/
COPY apps/<%=projectName%>/wait-for-services.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/handle-prisma.sh /usr/local/bin/wait-for-services.sh

# Copiar el código compilado y dependencias de producción
COPY --from=builder /app/dist/apps/<%=projectName%>/<%=workerName%> ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/prisma_path.txt /tmp/prisma_path.txt

# Copiar Prisma utilizando el script helper
RUN /usr/local/bin/handle-prisma.sh copy

# Configurar variables de entorno
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
ENV APP_SERVER_PORT=4000
ENV RABBITMQ_HOST=<%=projectName%>-rabbitmq

# Iniciar el worker con espera para servicios
ENTRYPOINT ["/usr/local/bin/wait-for-services.sh"]
CMD ["node", "main.js"]

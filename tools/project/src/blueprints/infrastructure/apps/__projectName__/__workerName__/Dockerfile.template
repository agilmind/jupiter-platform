# Base stage - build environment
FROM node:22-alpine AS builder

WORKDIR /app

# Instalar dependencias del sistema
RUN apk add --no-cache git openssh curl

# Copiar package.json y package-lock.json para la caché de Docker
COPY package.json package-lock.json ./

# Preparar directorios para los package.json de apps y libs
RUN mkdir -p ./apps/<%=projectName%>/<%=workerName%> \
    ./libs/<%=projectName%>/shared \
    ./libs/<%=projectName%>/api-interfaces

# Copiar solo los package.json para instalar dependencias
COPY apps/<%=projectName%>/<%=workerName%>/package.json ./apps/<%=projectName%>/<%=workerName%>/
COPY libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/ 2>/dev/null || :
COPY libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/ 2>/dev/null || :

# Eliminar haiku-generator de las dependencias
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar dependencias de producción y @types/amqplib para compilación
RUN npm install --only=production && npm install --no-save @types/amqplib

# Copiar archivos de configuración y código fuente
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=workerName%> ./apps/<%=projectName%>/<%=workerName%>/

# Copiar solo los archivos necesarios de las bibliotecas compartidas
COPY libs/<%=projectName%>/shared ./libs/<%=projectName%>/shared/ 2>/dev/null || :
COPY libs/<%=projectName%>/api-interfaces ./libs/<%=projectName%>/api-interfaces/ 2>/dev/null || :

# Configurar y generar Prisma
RUN cd ./apps/<%=projectName%>/<%=workerName%> && \
    if [ -f "./prisma/schema.prisma" ]; then \
      npx prisma generate; \
    fi

# Construir la aplicación
WORKDIR /app/apps/<%=projectName%>/<%=workerName%>
RUN mkdir -p /app/dist
RUN echo '{"extends": "./tsconfig.app.json", "compilerOptions": {"noImplicitAny": false, "skipLibCheck": true}}' > tsconfig.docker.json
RUN npx tsc -p tsconfig.docker.json --outDir /app/dist/apps/<%=projectName%>/<%=workerName%>

# Producción - imagen mínima
FROM node:22-alpine AS production

WORKDIR /app

# Copiar solo el código compilado y dependencias de producción
COPY --from=builder /app/dist/apps/<%=projectName%>/<%=workerName%> ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/apps/<%=projectName%>/<%=workerName%>/node_modules/.prisma ./node_modules/.prisma 2>/dev/null || :

# Configurar variables de entorno
ENV NODE_ENV=production

# Iniciar el worker
CMD ["node", "main.js"]

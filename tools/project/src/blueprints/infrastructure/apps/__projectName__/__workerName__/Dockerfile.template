# apps/<%= projectName %>/<%= workerName %>/Dockerfile (Generated from template)

#---------------------------------------------
# Stage 1: Builder
#---------------------------------------------
# Use the Node.js version relevant for your project build tools
# Consider using a template variable like <%= nodeVersion || '20' %>
FROM node:<%= nodeVersion || '22' %> AS builder

WORKDIR /app

RUN npm install -g npm@latest

COPY package.json package-lock.json .npmrc nx.json tsconfig.base.json ./
COPY eslint.config.mjs ./

RUN npm ci

COPY apps ./apps
COPY libs ./libs

# Build the specific worker application using NX
RUN npx nx build <%= projectName %>-<%= workerName %>

# Remove development dependencies after build is complete
RUN npm prune --omit=dev


#---------------------------------------------
# Stage 2: Production (Node Alpine)
#---------------------------------------------
# Use a lightweight Node.js Alpine image for the final stage
# Consider using a template variable like <%= nodeVersion || '20' %>
FROM node:20-alpine AS production

WORKDIR /app

# Create a non-root user and group for security
RUN addgroup -S nodejs && adduser -S nodejs -G nodejs

# Copy necessary artifacts from the builder stage
# Copy package.json first (potentially package-lock too if needed by runtime deps)
COPY --from=builder /app/package.json ./
# Copy pruned node_modules
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
# Copy the built application code
COPY --from=builder --chown=nodejs:nodejs /app/dist/apps/<%= projectName %>/<%= workerName %> ./dist/apps/<%= projectName %>/<%= workerName %>

# Switch to the non-root user
USER nodejs

# Expose the port the worker listens on (if any)
# Consider using a template variable like <%= workerPort || 3001 %>
# EXPOSE 3001

# Define the command to run the worker application
# Adjust the path to main.js if necessary based on your build output
CMD [ "node", "dist/apps/<%= projectName %>/<%= workerName %>/main.js" ]

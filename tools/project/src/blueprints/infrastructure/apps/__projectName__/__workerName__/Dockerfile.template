# Base stage
FROM node:22-alpine AS base
WORKDIR /app
ENV NODE_ENV=production

# Copia el script helper al contenedor
COPY apps/mi-proyecto/copy_if_exists.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/copy_if_exists.sh

# Builder stage
FROM base AS builder
# Copy only the package files needed for this worker
COPY package.json package-lock.json ./
COPY apps/<%=projectName%>/<%=workerName%>/package.json ./apps/<%=projectName%>/<%=workerName%>/
# If there are shared libs, copy their package.json files too
RUN mkdir -p ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN mkdir -p ./libs/<%=projectName%>/api-interfaces/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Install dependencies - skip dev dependencies
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
RUN npm install --omit=dev && npm install --save-dev @types/amqplib

# Copy source files needed for this worker
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=workerName%> ./apps/<%=projectName%>/<%=workerName%>/
RUN mkdir -p ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/* ./libs/<%=projectName%>/shared/
RUN mkdir -p ./libs/<%=projectName%>/api-interfaces/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/* ./libs/<%=projectName%>/api-interfaces/

# Build the worker with TypeScript directly
WORKDIR /app/apps/<%=projectName%>/<%=workerName%>
RUN echo '{"extends": "./tsconfig.app.json", "compilerOptions": {"noImplicitAny": false, "skipLibCheck": true}}' > tsconfig.docker.json
RUN npx tsc -p tsconfig.docker.json --outDir /app/dist

# Runtime stage
FROM base AS runtime
WORKDIR /app

# Copy built worker and dependencies
COPY --from=builder /app/dist ./
COPY --from=builder /app/node_modules ./node_modules

# Start the worker
CMD ["node", "main.js"]

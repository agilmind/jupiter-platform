services:
  # Database
  postgres:
    image: postgres:14-alpine
    container_name: <%=projectName%>-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-<%=projectName%>}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: always
    networks:
      - app-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: <%=projectName%>-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - app-network
    ports:
      - "15672:15672"  # Management UI (opcional)
      - "5672:5672"    # AMQP port

  # App Server (usando ts-node)
  <%=appServerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=appServerName%>/Dockerfile
    container_name: <%=projectName%>-<%=appServerName%>
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@<%=projectName%>-postgres:5432/${POSTGRES_DB:-<%=projectName%>}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@<%=projectName%>-rabbitmq:5672
      - RABBITMQ_HOST=<%=projectName%>-rabbitmq
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - app-network

  # Web App
  <%=webAppName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=webAppName%>/Dockerfile
    container_name: <%=projectName%>-<%=webAppName%>
    environment:
      - SERVER_PORT=4000
      - APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
      - APP_SERVER_PORT=4000
    ports:
      - "80:80"
    depends_on:
      <%=appServerName%>:
        condition: service_started
    restart: always
    networks:
      - app-network

  # Worker Service - Con retraso en el inicio
  <%=workerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=workerName%>/Dockerfile
    container_name: <%=projectName%>-<%=workerName%>
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@<%=projectName%>-rabbitmq:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@<%=projectName%>-postgres:5432/${POSTGRES_DB:-<%=projectName%>}
      - RABBITMQ_HOST=<%=projectName%>-rabbitmq
      - APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
      - APP_SERVER_PORT=4000
      - STARTUP_DELAY=15  # Retraso en segundos para dar tiempo a otros servicios
    # Usar un comando que espere antes de iniciar el servicio
    command: >
      sh -c "echo 'Esperando ${STARTUP_DELAY:-15} segundos antes de iniciar...' &&
             sleep ${STARTUP_DELAY:-15} &&
             ts-node --transpile-only /app/apps/<%=projectName%>/<%=workerName%>/src/main.ts"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      <%=appServerName%>:
        condition: service_started
    restart: always
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

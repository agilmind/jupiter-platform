version: '3.8'

services:
  __appServerName__:
    build:
      context: ../../
      dockerfile: apps/__projectName__/__appServerName__/Dockerfile
      args:
        NODE_ENV: production
    environment:
      - NODE_ENV=production
      - PORT=${SERVER_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M

  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  rabbitmq_data:

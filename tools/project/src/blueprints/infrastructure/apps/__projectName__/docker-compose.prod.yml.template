services:
  # Database
  postgres:
    image: postgres:14-alpine
    container_name: <%=projectName%>-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-<%=projectName%>}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-20s}
    restart: always
    networks:
      - app-network
    user: postgres
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: <%=projectName%>-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
    env_file:
      - .env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      # Eliminar o comentar la línea que monta la configuración
      # - ./rabbitmq-config:/etc/rabbitmq/conf.d
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-30s}
    restart: always
    networks:
      - app-network
    ports:
      - "15672:15672"  # Management UI (opcional)
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # App Server
  <%=appServerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=appServerName%>/Dockerfile
    container_name: <%=projectName%>-<%=appServerName%>
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HOST=0.0.0.0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@<%=projectName%>-postgres:5432/${POSTGRES_DB:-<%=projectName%>}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@<%=projectName%>-rabbitmq:5672
      - RABBITMQ_HOST=<%=projectName%>-rabbitmq
      - SERVER_JS_PATH=/app/server/apps/<%=projectName%>/<%=appServerName%>/src/main.js
      - SERVICE_TYPE=app-server
      - SERVICE_NAME=<%=appServerName%>
    env_file:
      - .env
    ports:
      - "4000:4000"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: always
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Web App
  <%=webAppName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=webAppName%>/Dockerfile
    container_name: <%=projectName%>-<%=webAppName%>
    environment:
      - SERVER_PORT=4000
      - APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
      - APP_SERVER_PORT=4000
      - SERVICE_TYPE=web-app
      - SERVICE_NAME=<%=webAppName%>
    env_file:
      - .env
    ports:
      - "80:80"
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'
        reservations:
          memory: 200M
          cpus: '0.2'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-20s}
    depends_on:
      <%=appServerName%>:
        condition: service_healthy
    restart: always
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Worker Service
  <%=workerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=workerName%>/Dockerfile
    container_name: <%=projectName%>-<%=workerName%>
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@<%=projectName%>-rabbitmq:5672
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@<%=projectName%>-postgres:5432/${POSTGRES_DB:-<%=projectName%>}
      - RABBITMQ_HOST=<%=projectName%>-rabbitmq
      - APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
      - APP_SERVER_PORT=4000
      - WORKER_JS_PATH=/app/worker/apps/<%=projectName%>/<%=workerName%>/src/main.js
      - SERVICE_TYPE=worker
      - SERVICE_NAME=<%=workerName%>
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 120s
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      <%=appServerName%>:
        condition: service_healthy
    restart: always
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

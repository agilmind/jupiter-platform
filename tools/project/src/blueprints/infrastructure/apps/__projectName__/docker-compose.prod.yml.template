services:
  # App Server
  <%=appServerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=appServerName%>/Dockerfile
      args:
        NODE_ENV: production
    container_name: <%=projectName%>-<%=appServerName%>
    environment:
      - NODE_ENV=production
      - PORT=4000
      - HOST=0.0.0.0
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@<%=projectName%>-rabbitmq:5672
    ports:
      - "4000:4000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - app-network

  # Web App
  <%=webAppName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=webAppName%>/Dockerfile
      args:
        NODE_ENV: production
    container_name: <%=projectName%>-<%=webAppName%>
    environment:
      - SERVER_PORT=4000
    ports:
      - "80:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      <%=appServerName%>:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
    networks:
      - app-network

  # Worker Service
  <%=workerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=workerName%>/Dockerfile
      args:
        NODE_ENV: production
    container_name: <%=projectName%>-<%=workerName%>
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@<%=projectName%>-rabbitmq:5672
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      rabbitmq:
        condition: service_healthy
      <%=appServerName%>:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
      replicas: 2  # Escalabilidad horizontal para procesamiento de tareas
    networks:
      - app-network

  # Database
  postgres:
    image: postgres:14-alpine
    container_name: <%=projectName%>-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: <%=projectName%>-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

services:
  # App Server
  <%=appServerName%>:
    image: <%=projectName%>/<%=appServerName%>:dev  # Usar imagen pre-construida
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=appServerName%>/Dockerfile.dev
      args:
        NODE_ENV: development
    container_name: <%=projectName%>-<%=appServerName%>
    environment:
      - NODE_ENV=development
      - PORT=4000
      - HOST=0.0.0.0
      - DATABASE_URL=${DATABASE_URL}
      - RABBITMQ_URL=amqp://guest:guest@<%=projectName%>-rabbitmq:5672
      - SERVICE_TYPE=app-server
      - SERVICE_NAME=<%=appServerName%>
    env_file:
      - .env
    ports:
      - "4000:4000"
      - "9229:9229"  # Puerto para debugging
    volumes:
      - ../../apps/<%=projectName%>/<%=appServerName%>:/app/apps/<%=projectName%>/<%=appServerName%>
      - ../../libs:/app/libs
      - ../../node_modules:/app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Web App
  <%=webAppName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=webAppName%>/Dockerfile.dev
    container_name: <%=projectName%>-<%=webAppName%>
    environment:
      - SERVER_PORT=4000
      - APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
      - APP_SERVER_PORT=4000
      - SERVICE_TYPE=web-app
      - SERVICE_NAME=<%=webAppName%>
    env_file:
      - .env
    ports:
      - "3000:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-20s}
    depends_on:
      <%=appServerName%>:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Worker Service
  <%=workerName%>:
    build:
      context: ../../
      dockerfile: apps/<%=projectName%>/<%=workerName%>/Dockerfile.dev
      args:
        NODE_ENV: development
    container_name: <%=projectName%>-<%=workerName%>
    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - RABBITMQ_URL=amqp://guest:guest@<%=projectName%>-rabbitmq:5672
      - DATABASE_URL=${DATABASE_URL}
      - SERVICE_TYPE=worker
      - SERVICE_NAME=<%=workerName%>
    env_file:
      - .env
    ports:
      - "9230:9230"  # Puerto para debugging del worker
    volumes:
      - ../../apps/<%=projectName%>/<%=workerName%>:/app/apps/<%=projectName%>/<%=workerName%>
      - ../../libs:/app/libs
      - ../../node_modules:/app/node_modules
    depends_on:
      rabbitmq:
        condition: service_healthy
      <%=appServerName%>:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network

  # Database
  postgres:
    image: postgres:14-alpine
    container_name: <%=projectName%>-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-<%=projectName%>}
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 200M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-20s}
    restart: unless-stopped
    networks:
      - app-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: <%=projectName%>-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          memory: 500M
        reservations:
          memory: 200M
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-30s}
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

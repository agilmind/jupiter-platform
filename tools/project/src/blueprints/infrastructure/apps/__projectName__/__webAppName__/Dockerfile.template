# Base stage - build environment
FROM node:22-alpine AS builder

WORKDIR /app

# Instalar dependencias del sistema
RUN apk add --no-cache git openssh

# Copiar scripts helper al contenedor
COPY apps/<%=projectName%>/copy_if_exists.sh apps/<%=projectName%>/copy-files.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/copy_if_exists.sh /usr/local/bin/copy-files.sh

# Copiar package.json y package-lock.json para la caché de Docker
COPY package.json package-lock.json ./

# Preparar directorios para los package.json de apps y libs
RUN mkdir -p ./apps/<%=projectName%>/<%=webAppName%> \
    ./libs/<%=projectName%>/shared \
    ./libs/<%=projectName%>/api-interfaces

# Copiar package.json de la aplicación y las libs
COPY apps/<%=projectName%>/<%=webAppName%>/package.json ./apps/<%=projectName%>/<%=webAppName%>/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Eliminar haiku-generator de las dependencias
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar todas las dependencias para poder construir
RUN npm install

# Copiar archivos de configuración y código fuente
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=webAppName%> ./apps/<%=projectName%>/<%=webAppName%>/

# Copiar libs compartidas usando copy-files para evitar problemas de recursión
RUN /usr/local/bin/copy-files.sh "libs/<%=projectName%>/shared/*" "./libs/<%=projectName%>/shared/"
RUN /usr/local/bin/copy-files.sh "libs/<%=projectName%>/api-interfaces/*" "./libs/<%=projectName%>/api-interfaces/"

# Construir la aplicación con Vite
WORKDIR /app/apps/<%=projectName%>/<%=webAppName%>
RUN npx vite build --outDir /app/dist

# Producción - imagen mínima con Nginx
FROM nginx:alpine AS production

# Instalar dependencias mínimas
RUN apk add --no-cache gettext curl

# Copiar los archivos estáticos construidos
COPY --from=builder /app/dist /usr/share/nginx/html

# Copiar configuración de Nginx
COPY apps/<%=projectName%>/<%=webAppName%>/nginx.conf /etc/nginx/conf.d/default.conf.template

# Copiar script de espera
COPY apps/<%=projectName%>/wait-for-app-server.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/wait-for-app-server.sh

# Configurar variables de entorno
ENV APP_SERVER_HOST=<%=projectName%>-<%=appServerName%>
ENV APP_SERVER_PORT=4000
ENV SERVER_PORT=4000

# Configurar healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# Exponer puerto
EXPOSE 80

# Iniciar Nginx con espera para app-server
ENTRYPOINT ["/usr/local/bin/wait-for-app-server.sh"]
CMD ["nginx", "-g", "daemon off;"]

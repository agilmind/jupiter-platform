# Base stage for development dependencies
FROM node:22-alpine AS base
WORKDIR /app

# Copia el script helper al contenedor
COPY apps/mi-proyecto/copy_if_exists.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/copy_if_exists.sh

# Stage for installing dependencies and building
FROM base AS builder
# Copy package files
COPY package.json package-lock.json ./
COPY apps/<%=projectName%>/<%=webAppName%>/package.json ./apps/<%=projectName%>/<%=webAppName%>/
# Copy shared libs package files if needed
RUN mkdir -p ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN mkdir -p ./libs/<%=projectName%>/api-interfaces/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Install ALL dependencies (including dev dependencies needed for building)
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
RUN npm install


# Copy source files needed for build
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=webAppName%> ./apps/<%=projectName%>/<%=webAppName%>/
RUN mkdir -p ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/* ./libs/<%=projectName%>/shared/
RUN mkdir -p ./libs/<%=projectName%>/api-interfaces/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/* ./libs/<%=projectName%>/api-interfaces/


# Build the app using Vite directly
WORKDIR /app/apps/<%=projectName%>/<%=webAppName%>
RUN npx vite build --outDir /app/dist

# Production image using nginx
FROM nginx:alpine AS production
WORKDIR /usr/share/nginx/html

# Copy the built app
COPY --from=builder /app/dist .
# Copy nginx config
COPY apps/<%=projectName%>/<%=webAppName%>/nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]

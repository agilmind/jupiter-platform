FROM node:22-alpine

WORKDIR /app

# Instalar dependencias del sistema y herramientas de desarrollo
RUN apk add --no-cache git openssh curl gettext bash

# Instalar dependencias globales de desarrollo
RUN npm install -g ts-node-dev

# Copiar script de utilidades de archivos
COPY apps/<%=projectName%>/bin/file-utils.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/file-utils.sh

# AÑADIR variables para identificar el tipo de servicio
ENV SERVICE_TYPE="app-server"
ENV SERVICE_NAME="<%=appServerName%>"

# AÑADIR los scripts unificados
COPY apps/<%=projectName%>/bin/service-base.sh /usr/local/bin/
COPY apps/<%=projectName%>/bin/start-service.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/service-base.sh /usr/local/bin/start-service.sh

# Copiar package.json y package-lock.json primero para aprovechar la caché de Docker
COPY package.json package-lock.json ./

# Preparar directorios para los package.json de apps y libs
RUN mkdir -p ./apps/<%=projectName%>/<%=appServerName%> \
    ./libs/<%=projectName%>/shared \
    ./libs/<%=projectName%>/api-interfaces

# Copiar package.json de la aplicación - este archivo debe existir
COPY apps/<%=projectName%>/<%=appServerName%>/package.json ./apps/<%=projectName%>/<%=appServerName%>/

# Copiar package.json de las libs usando file-utils
RUN /usr/local/bin/file-utils.sh copy-if-exists libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/file-utils.sh copy-if-exists libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Eliminar haiku-generator de las dependencias antes de instalar
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar dependencias - incluye las de desarrollo para debugging
RUN npm install

# Copiar archivos de configuración TypeScript - estos archivos deben existir
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/

# Copiar el código fuente de la aplicación - debe existir
COPY apps/<%=projectName%>/<%=appServerName%> ./apps/<%=projectName%>/<%=appServerName%>/

# Copiar libs compartidas usando file-utils para evitar problemas de recursión
RUN /usr/local/bin/file-utils.sh copy-files "libs/<%=projectName%>/shared/*" "./libs/<%=projectName%>/shared/"
RUN /usr/local/bin/file-utils.sh copy-files "libs/<%=projectName%>/api-interfaces/*" "./libs/<%=projectName%>/api-interfaces/"

# Configurar prisma
RUN cd ./apps/<%=projectName%>/<%=appServerName%> && \
    if [ -f "./prisma/schema.prisma" ]; then \
      npx prisma generate; \
    fi

# Preparar script de diagnóstico - crear directamente
RUN mkdir -p /app/scripts
RUN echo "#!/bin/sh\n\
echo '=== Iniciando diagnóstico de red ==='\n\
echo 'Hostname: '\$(hostname)\n\
echo 'Dirección IP: '\$(hostname -i)\n\
echo 'Variables de entorno:'\n\
echo 'HOST='\$HOST\n\
echo 'PORT='\$PORT\n\
echo 'NODE_ENV='\$NODE_ENV\n\
\n\
echo '=== Verificando escucha de puertos ==='\n\
apk add --no-cache curl netcat-openbsd iputils\n\
\n\
echo 'Puertos en escucha:'\n\
netstat -tulpn | grep LISTEN\n\
\n\
echo '=== Verificando conectividad entre contenedores ==='\n\
ping -c 3 <%=projectName%>-<%=webAppName%> || echo 'No se pudo hacer ping'\n\
\n\
echo '=== Comprobando procesos en ejecución ==='\n\
ps aux\n\
" > /app/debug-network.sh && chmod +x /app/debug-network.sh

# Configurar variables de entorno
ENV HOST="0.0.0.0"
ENV PORT="4000"
ENV NODE_ENV="development"

# Exponer puertos para la app y debugging
EXPOSE ${PORT}
EXPOSE 9229

# Comando para iniciar la aplicación con soporte de debugging
WORKDIR /app/apps/<%=projectName%>/<%=appServerName%>
CMD ["/usr/local/bin/start-service.sh"]

# Etapa 1: Construcción
FROM node:<%= nodeVersion || '18' %> AS builder
WORKDIR /app

RUN npm install -g npm@latest

# Copiar archivos de definición de paquetes y bloqueo PRIMERO desde la RAÍZ
COPY package.json package-lock.json ./
COPY .npmrc ./

# Instalar TODAS las dependencias (incluyendo dev) necesarias para el build
RUN npm ci

# Copiar código fuente de la aplicación específica y archivos de config necesarios para build
COPY <%= appSourcePath %>/src ./src
COPY <%= appSourcePath %>/prisma ./prisma
COPY <%= appSourcePath %>/tsconfig.app.json ./tsconfig.app.json
COPY <%= appSourcePath %>/tsconfig.json ./tsconfig.json
COPY tsconfig.base.json ./

# Ejecutar el build
#RUN npm run build
RUN npm run build || (cat npm-debug.log* && exit 1)

# Podar devDependencies (esto eliminará haiku-generator)
# RUN npm prune --omit=dev

# Etapa 2: Producción
FROM node:<%= nodeVersion || '18' %>-alpine AS production
WORKDIR /app

# --- Actualizar NPM dentro del contenedor ---
RUN npm install -g npm@latest # O la versión específica >=11.2.0

# Crear usuario y grupo no root
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

COPY --from=builder --chown=appuser:appgroup /app/node_modules ./node_modules # CUIDADO: Incluirá devDeps si comentaste npm prune
COPY --from=builder --chown=appuser:appgroup /app/dist ./dist
COPY --chown=appuser:appgroup package.json .
COPY --from=builder --chown=appuser:appgroup /app/prisma ./prisma
USER appuser
EXPOSE <%= appServerPort || 3000 %>
CMD ["node", "dist/main.js"]

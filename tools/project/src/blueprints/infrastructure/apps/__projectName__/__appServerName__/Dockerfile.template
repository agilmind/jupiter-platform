# Etapa 1: Construcción (usando una imagen Node completa para herramientas)
FROM node:18 AS builder
# O node:20, la versión que uses

WORKDIR /app

# Copiar archivos de definición de paquetes y bloqueo PRIMERO
# Aprovecha el cacheo de Docker si estos no cambian
COPY package.json yarn.lock ./
# O copy package.json package-lock.json ./

# Instalar dependencias (incluyendo devDependencies necesarias para build)
RUN yarn install --frozen-lockfile
# O npm ci

# Copiar el resto del código fuente de la aplicación específica
# ¡IMPORTANTE! Asegúrate de que estas rutas son correctas desde el CONTEXTO RAÍZ
COPY apps/<%=projectName%>/<%=appServerName%>/src ./src
COPY apps/<%=projectName%>/<%=appServerName%>/prisma ./prisma
COPY apps/<%=projectName%>/<%=appServerName%>/tsconfig.app.json ./tsconfig.app.json
COPY apps/<%=projectName%>/<%=appServerName%>/tsconfig.json ./tsconfig.json
# Añade cualquier otro archivo necesario para el build, ej: tsconfig.base.json si existe en la raíz

# Ejecutar el build (compilación TypeScript, generación Prisma, etc.)
# Asume que tienes un script 'build' en tu package.json
RUN yarn build
# O npm run build

# (Opcional) Podar dependencias de desarrollo si es posible ANTES de la etapa final
# RUN npm prune --production

# Etapa 2: Producción (usando una imagen Node ligera y limpia)
FROM node:18-alpine AS production
# O node:20-alpine

WORKDIR /app

# Copiar dependencias de producción desde la etapa 'builder'
# Esto es más eficiente si pudiste hacer 'npm prune --production' arriba
# COPY --from=builder /app/node_modules ./node_modules
# Si no, copia todo node_modules y asegúrate que el build no necesite devDeps en runtime
COPY --from=builder /app/node_modules ./node_modules

# Copiar artefactos construidos (ej. directorio 'dist') desde la etapa 'builder'
COPY --from=builder /app/dist ./dist

# Copiar package.json (necesario para que 'npm start' funcione)
COPY package.json .

# Copiar otros assets necesarios en producción (ej. schema de prisma si se usa en runtime)
COPY --from=builder /app/prisma ./prisma

# Exponer el puerto que usa la aplicación
EXPOSE 3000 # O el puerto correcto

# Usuario no root (¡Buena práctica!)
# RUN addgroup -S appgroup && adduser -S appuser -G appgroup
# USER appuser

# Comando para iniciar la aplicación (usando el JS compilado en 'dist')
CMD ["node", "dist/main.js"]
# O CMD ["npm", "run", "start:prod"] si tienes un script definido

# Base stage - build environment
FROM node:22-alpine AS builder

WORKDIR /app

# Instalar dependencias del sistema
RUN apk add --no-cache git openssh curl

# Copiar script helper al contenedor
COPY apps/<%=projectName%>/copy_if_exists.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/copy_if_exists.sh

# Copiar package.json y package-lock.json para la caché de Docker
COPY package.json package-lock.json ./

# Preparar directorios para los package.json de apps y libs
RUN mkdir -p ./apps/<%=projectName%>/<%=appServerName%> \
    ./libs/<%=projectName%>/shared \
    ./libs/<%=projectName%>/api-interfaces

# Copiar solo los package.json para instalar dependencias
COPY apps/<%=projectName%>/<%=appServerName%>/package.json ./apps/<%=projectName%>/<%=appServerName%>/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared/package.json ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces/package.json ./libs/<%=projectName%>/api-interfaces/

# Eliminar haiku-generator de las dependencias
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar solo las dependencias de producción
RUN npm install --only=production

# Copiar archivos de configuración y código fuente
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=appServerName%> ./apps/<%=projectName%>/<%=appServerName%>/

# Copiar solo los archivos necesarios de las bibliotecas compartidas
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/shared ./libs/<%=projectName%>/shared/
RUN /usr/local/bin/copy_if_exists.sh libs/<%=projectName%>/api-interfaces ./libs/<%=projectName%>/api-interfaces/

# Configurar y generar Prisma
RUN cd ./apps/<%=projectName%>/<%=appServerName%> && \
    if [ -f "./prisma/schema.prisma" ]; then \
      npx prisma generate; \
    fi

# Construir la aplicación
WORKDIR /app/apps/<%=projectName%>/<%=appServerName%>
RUN mkdir -p /app/dist
RUN npx tsc -p tsconfig.app.json --outDir /app/dist/apps/<%=projectName%>/<%=appServerName%>

# Producción - imagen mínima
FROM node:22-alpine AS production

WORKDIR /app

# Instalar dependencias mínimas necesarias
RUN apk add --no-cache curl

# Copiar solo el código compilado y dependencias de producción
COPY --from=builder /app/dist/apps/<%=projectName%>/<%=appServerName%> ./
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/apps/<%=projectName%>/<%=appServerName%>/node_modules/.prisma ./node_modules/.prisma || true

# Configurar variables de entorno
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=4000

# Exponer puerto
EXPOSE ${PORT}

# Crear healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:${PORT}/health || exit 1

# Iniciar la aplicación
CMD ["node", "main.js"]

# Dockerfile que usa ts-node para ejecutar TypeScript directamente
FROM node:22-alpine

WORKDIR /app

# Instalar dependencias necesarias
RUN apk add --no-cache git openssh curl findutils

# Crear archivo .npmrc para resolver problemas con haiku-generator
RUN echo "registry=https://registry.npmjs.org/" > .npmrc

# Copiar solo package.json primero para modificarlo
COPY package.json ./

# Eliminar haiku-generator de manera m√°s agresiva
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies) { delete pkg.dependencies['haiku-generator']; } \
    if(pkg.devDependencies) { delete pkg.devDependencies['haiku-generator']; } \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Copiar el resto de los archivos del proyecto
COPY package-lock.json ./
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=appServerName%>/ ./apps/<%=projectName%>/<%=appServerName%>/

# Instalar ts-node y TypeScript globalmente
RUN npm install -g ts-node typescript

# Instalar dependencias del proyecto
RUN npm install --no-package-lock --omit=optional --ignore-scripts

# Verificar que main.ts existe
RUN find /app -name "*.ts" | sort

# Configurar variables de entorno
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=4000
ENV RABBITMQ_HOST=<%=projectName%>-rabbitmq
ENV TS_NODE_TRANSPILE_ONLY=true

# Exponer puerto
EXPOSE ${PORT}

# Ejecutar directamente el archivo TypeScript con ts-node
CMD ["ts-node", "--transpile-only", "/app/apps/<%=projectName%>/<%=appServerName%>/src/main.ts"]

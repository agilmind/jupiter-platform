# Dockerfile.template (Rutas de producción corregidas)

# Etapa 1: Construcción
FROM node:<%= nodeVersion || '18' %> AS builder
WORKDIR /app

# Instalar tree para depuración (Podrías quitarlo ahora si quieres)
# RUN apt-get update && apt-get install -y tree && rm -rf /var/lib/apt/lists/*

RUN npm install -g npm@latest

COPY package.json package-lock.json .npmrc nx.json tsconfig.base.json ./
COPY eslint.config.mjs ./

RUN npm ci

COPY apps ./apps
COPY libs ./libs

# Copiar prisma inicial
COPY <%= appSourcePath %>/prisma ./prisma

# Ejecutar el build específico
RUN npx nx build <%= appServerProjectName || 'jupiter-app-server' %>

# --- PASOS DE DEPURACIÓN (Puedes quitarlos si confías) ---
# RUN echo ">>> Listing /app contents after build:" && ls -la /app
# RUN echo ">>> Tree view of /app/dist:" && tree /app/dist || echo "/app/dist not found or tree command failed"
# RUN echo ">>> Listing /app/prisma contents after build:" && ls -la /app/prisma || echo "/app/prisma not found (after build)"
# --- FIN PASOS DE DEPURACIÓN ---

# RUN npm prune --omit=dev

# Etapa 2: Producción
FROM node:<%= nodeVersion || '18' %>-alpine AS production
WORKDIR /app
RUN addgroup -S appgroup && adduser -S appuser -G appgroup

COPY --from=builder --chown=appuser:appgroup /app/node_modules ./node_modules

# --- Corregir Ruta de Salida (basado en el TREE) ---
COPY --from=builder --chown=appuser:appgroup /app/dist/apps/jupiter/app-server/ ./dist/

COPY --chown=appuser:appgroup package.json .
COPY --from=builder --chown=appuser:appgroup /app/prisma ./prisma

USER appuser
EXPOSE <%= appServerPort || 3000 %>
# El CMD sigue apuntando a dist/src/main.js porque copiamos el contenido
# de /app/dist/apps/jupiter/app-server/ a /app/dist/
CMD ["node", "dist/src/main.js"]

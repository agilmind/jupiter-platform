# Base stage - build environment
FROM node:22-alpine AS builder

WORKDIR /app

# Instalar dependencias del sistema
RUN apk add --no-cache git openssh curl

# Copiar package.json y package-lock.json para la caché de Docker
COPY package.json package-lock.json ./

# Copiar tsconfig y código fuente necesario para construir
COPY tsconfig.base.json ./
COPY apps/<%=projectName%>/tsconfig.json ./apps/<%=projectName%>/
COPY apps/<%=projectName%>/<%=appServerName%>/ ./apps/<%=projectName%>/<%=appServerName%>/

# Eliminar haiku-generator de las dependencias
RUN node -e "const fs=require('fs'); \
    const pkg=JSON.parse(fs.readFileSync('./package.json')); \
    if(pkg.dependencies && pkg.dependencies['haiku-generator']) delete pkg.dependencies['haiku-generator']; \
    if(pkg.devDependencies && pkg.devDependencies['haiku-generator']) delete pkg.devDependencies['haiku-generator']; \
    fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

# Instalar todas las dependencias
RUN npm install

# Compilar la aplicación
WORKDIR /app/apps/<%=projectName%>/<%=appServerName%>
RUN npx tsc

# Producción - imagen mínima
FROM node:22-alpine AS production

WORKDIR /app

# Instalar curl para healthchecks
RUN apk add --no-cache curl wget

# Copiar dependencias de producción
COPY --from=builder /app/node_modules ./node_modules

# Copiar script de espera para RabbitMQ
COPY apps/<%=projectName%>/wait-for-rabbitmq.sh /app/
RUN chmod +x /app/wait-for-rabbitmq.sh

# Copiar toda la estructura de la aplicación para mantener las rutas correctas
COPY --from=builder /app/apps /app/apps

# Configurar variables de entorno
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=4000
ENV RABBITMQ_HOST=<%=projectName%>-rabbitmq

# Exponer puerto
EXPOSE ${PORT}

# Iniciar la aplicación con la ruta correcta al archivo main.js
ENTRYPOINT ["/app/wait-for-rabbitmq.sh"]
CMD ["node", "/app/apps/<%=projectName%>/<%=appServerName%>/src/main.js"]

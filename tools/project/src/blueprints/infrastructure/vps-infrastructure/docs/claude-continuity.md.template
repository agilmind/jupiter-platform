# Guía de continuidad para Claude - Infraestructura VPS

## Contexto del proyecto

Estamos desarrollando una infraestructura de VPS para proyectos generados con un generador basado en NX. Toda la implementación debe ser genérica utilizando variables de template como `<%=projectName%>` que se reemplazan durante la generación.

## Estado actual del desarrollo

Hemos implementado una infraestructura funcional para desplegar proyectos en VPS con:
- Configuración Docker Compose para entornos de desarrollo y producción
- Scripts de despliegue y configuración automatizados
- Configuración de Nginx para enrutamiento y SSL
- Seguridad básica con aislamiento de servicios internos
- Acceso a API a través de URL amigables (ej: project.ar/api) en lugar de puertos

## Principios del desarrollo

1. **Todo debe ser un archivo .template**:
   - Todos los archivos (scripts, configuraciones, etc.) deben ser archivos .template
   - Cada archivo debe estar ubicado en su directorio correspondiente dentro de la estructura
   - No se debe generar contenido dinámicamente con `cat >` dentro de scripts

2. **Estructura clara de directorios**:
   - Los scripts van en `vps-infrastructure/scripts/`
   - Los archivos de configuración van en sus respectivos directorios (nginx/conf.d/, etc.)
   - Los documentos van en `vps-infrastructure/docs/`

3. **Generalización completa**:
   - Todas las referencias específicas deben usar variables como `<%=projectName%>`
   - Todas las URLs deben usar variables o variables de entorno
   - Se debe usar envsubst para sustituir variables en archivos de configuración

4. **Separación de responsabilidades**:
   - Los scripts de despliegue solo transfieren archivos, no los generan
   - Cada archivo de configuración tiene su propio .template

## Estructura actual de directorios

```
vps-infrastructure/
├── complete/         # Todo en un solo VPS
│   ├── docker-compose.multi.yml.template
│   ├── docker-compose.yml.template
│   ├── monitoring/
│   ├── nginx/
│   │   ├── conf.d/
│   │   │   ├── default.conf.template
│   │   │   └── multi-env.conf.template
│   │   └── ssl/
│   ├── postgres/
│   └── rabbitmq/
├── hybrid/           # Algunos servicios en cloud
│   ├── docker-compose.yml.template
│   ├── monitoring/
│   ├── nginx/
│   └── pgbouncer/
├── minimal/          # Infraestructura mínima (principalmente Nginx)
│   ├── docker-compose.yml.template
│   └── nginx/
│       ├── conf.d/
│       │   ├── project.conf.template   # Configuración con soporte para /api
│       │   └── webapp.conf.template
│       └── ssl/
├── deployment/
│   ├── environments/ # Variables por entorno
│   └── scripts/      # Scripts de despliegue
│       ├── deploy-vps.sh.template      # Script mejorado para despliegue en VPS
│       └── setup-ssl.sh.template
├── docs/            # Documentación
│   ├── claude-continuity.md.template
│   ├── vps-deployment-guide.md.template
│   └── project-plan.md.template
└── scripts/         # Scripts utilitarios
    ├── snapshot-environment.sh.template
    ├── setup-nginx.sh.template
    └── fix-docker-network.sh.template  # Script para resolver problemas de red Docker
```

## Flujo de trabajo para VPS

1. **Generación del proyecto**:
   ```bash
   nx g project:create projectName
   ```

2. **Despliegue en VPS** (usuario deploy con permisos sudo):
   ```bash
   bash ./apps/projectName/vps-infrastructure/deployment/scripts/deploy-vps.sh
   ```

3. **Configuración de SSL** (después del despliegue):
   ```bash
   ssh deploy@projectName.ar "cd /opt/projectName && ./setup-ssl.sh"
   ```

4. **Resolución de problemas** (si es necesario):
   ```bash
   ssh deploy@projectName.ar "cd /opt/projectName && sudo ./fix-docker-network.sh"
   ```

## Componentes implementados

1. **Configuración minimal para VPS**:
   - Nginx como punto de entrada: redirige a /api y sirve la web-app
   - Sin exposición de puertos innecesarios (solo 80/443 para web y 15673 para admin RabbitMQ)
   - Seguridad básica con aislamiento de servicios

2. **Docker Compose adaptado**:
   - Redes simplificadas para evitar problemas
   - Volúmenes para persistencia
   - Configuración específica para producción

3. **SSL/HTTPS**:
   - Certificados Let's Encrypt
   - Renovación automática
   - Redirección HTTPS

4. **Scripts de administración**:
   - Solución para problemas de red Docker
   - Despliegue con imágenes precompiladas

## Próximos pasos

1. **Mejorar monitoreo**:
   - Implementar Prometheus/Grafana para monitoreo
   - Configurar alertas para servicios críticos

2. **Implementar CI/CD**:
   - Pipeline GitHub Actions
   - Despliegue automatizado

3. **Optimización de rendimiento**:
   - Configuración de caché para Nginx
   - Ajustes de rendimiento para PostgreSQL y pgBouncer

4. **Backups automatizados**:
   - Scripts de backup programados
   - Estrategia de recuperación

## Consideraciones técnicas para Claude

1. Todos los archivos deben terminar con `.template`
2. Usar las variables `<%=projectName%>`, `<%=appServerName%>`, etc. para personalización
3. Al hacer cambios, siempre considerar su incorporación al generador
4. Los scripts deben ser compatibles con Alpine Linux (ash) por compatibilidad con contenedores
5. Nunca usar nombres de proyectos específicos como "jupiter" en los templates
6. Aclarar siempre en qué carpeta debe ir un archivo nuevo

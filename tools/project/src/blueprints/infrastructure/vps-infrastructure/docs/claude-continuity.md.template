# Guía de continuidad para Claude - Infraestructura VPS

## Contexto del proyecto

Estamos desarrollando una infraestructura de VPS para proyectos generados con un generador basado en NX. Toda la implementación debe ser genérica utilizando variables de template como `<%=projectName%>` que se reemplazan durante la generación.

## Estado actual del desarrollo

Hemos implementado una infraestructura funcional "Minimal" para desplegar proyectos en VPS con:
- Configuración Docker Compose para entornos de desarrollo y producción
- Scripts de despliegue y configuración automatizados
- Configuración de Nginx para enrutamiento y SSL
- Seguridad básica con aislamiento de servicios internos
- Acceso a API a través de URL amigables (ej: project.ar/api) en lugar de puertos

## Plan de desarrollo actual

Estamos avanzando hacia una solución más robusta basada en el plan del documento project-plan.md. La prioridad actual es:

1. **Implementar sistema de monitoreo completo con:**
   - Prometheus para recolección de métricas
   - Grafana para visualización
   - AlertManager para gestión de alertas
   - Node Exporter, PostgreSQL Exporter y RabbitMQ Exporter para métricas de servicios
   - Acceso a través de subdominios específicos (grafana.vps.jupiter.ar, prometheus.vps.jupiter.ar)
   - Autenticación y seguridad para herramientas expuestas

2. **Implementar sistema de logging centralizado:**
   - Loki para recolección y almacenamiento de logs
   - Integración con Grafana para visualización
   - Tracing distribuido con Jaeger/OpenTelemetry
   - Mecanismo de correlation IDs para seguimiento entre servicios

3. **Capacidad de operación multimodal:**
   - Modos de funcionamiento: apagado/ligero/completo
   - Scripts para cambiar entre modos
   - Configuración de retención de datos según el modo

## Principios del desarrollo

1. **Todo debe ser un archivo .template**:
   - Todos los archivos (scripts, configuraciones, etc.) deben ser archivos .template
   - Cada archivo debe estar ubicado en su directorio correspondiente dentro de la estructura
   - No se debe generar contenido dinámicamente con `cat >` dentro de scripts

2. **Estructura clara de directorios**:
   - Los scripts van en `vps-infrastructure/scripts/`
   - Los archivos de configuración van en sus respectivos directorios (nginx/conf.d/, etc.)
   - Los documentos van en `vps-infrastructure/docs/`
   - El monitoreo va en `vps-infrastructure/complete/monitoring/`

3. **Generalización completa**:
   - Todas las referencias específicas deben usar variables como `<%=projectName%>`
   - Todas las URLs deben usar variables o variables de entorno
   - Se debe usar envsubst para sustituir variables en archivos de configuración

4. **Separación de responsabilidades**:
   - Los scripts de despliegue solo transfieren archivos, no los generan
   - Cada archivo de configuración tiene su propio .template

## Estructura actual de directorios

```
vps-infrastructure/
├── complete/         # Todo en un solo VPS
│   ├── docker-compose.multi.yml.template
│   ├── docker-compose.yml.template
│   ├── monitoring/
│   │   ├── alertmanager
│   │   ├── grafana
│   │   │   ├── dashboards
│   │   │   └── provisioning
│   │   └── prometheus
│   │       └── prometheus.yml.template
│   ├── nginx/
│   │   ├── conf.d/
│   │   │   ├── default.conf.template
│   │   │   └── multi-env.conf.template
│   │   └── ssl/
│   ├── postgres/
│   └── rabbitmq/
├── hybrid/           # Algunos servicios en cloud
│   ├── docker-compose.yml.template
│   ├── monitoring/
│   ├── nginx/
│   └── pgbouncer/
├── minimal/          # Infraestructura mínima (principalmente Nginx)
│   ├── docker-compose.yml.template
│   └── nginx/
│       ├── conf.d/
│       │   ├── project.conf.template   # Configuración con soporte para /api
│       │   └── webapp.conf.template
│       └── ssl/
├── deployment/
│   ├── environments/ # Variables por entorno
│   └── scripts/      # Scripts de despliegue
│       ├── deploy-vps.sh.template      # Script mejorado para despliegue en VPS
│       └── setup-ssl.sh.template
├── docs/            # Documentación
│   ├── claude-continuity.md.template
│   ├── vps-deployment-guide.md.template
│   └── project-plan.md.template
└── scripts/         # Scripts utilitarios
    ├── snapshot-environment.sh.template
    ├── setup-nginx.sh.template
    └── fix-docker-network.sh.template  # Script para resolver problemas de red Docker
```

## Componentes en desarrollo

Estamos ampliando la estructura para incluir:

```
vps-infrastructure/
├── complete/
│   ├── monitoring/
│   │   ├── alertmanager/
│   │   │   └── alertmanager.yml.template
│   │   ├── grafana/
│   │   │   ├── dashboards/
│   │   │   │   ├── node-exporter.json.template
│   │   │   │   ├── postgres.json.template
│   │   │   │   └── rabbitmq.json.template
│   │   │   └── provisioning/
│   │   │       ├── dashboards/
│   │   │       └── datasources/
│   │   ├── exporters/
│   │   │   ├── node-exporter/
│   │   │   ├── postgres-exporter/
│   │   │   └── rabbitmq-exporter/
│   │   ├── loki/
│   │   │   └── loki-config.yml.template
│   │   ├── jaeger/
│   │   │   └── jaeger.yml.template
│   │   └── prometheus/
│   │       ├── prometheus.yml.template
│   │       └── rules/
│   │           ├── alerting-rules.yml.template
│   │           └── recording-rules.yml.template
│   └── nginx/
│       ├── conf.d/
│       │   ├── grafana.conf.template
│       │   ├── prometheus.conf.template
│       │   └── monitoring.conf.template
```

## Flujo de trabajo para continuación

Si necesitas retomar esta conversación con Claude:
1. Comparte este documento
2. Explica que estás continuando el desarrollo de la infraestructura VPS
3. Menciona que estamos implementando el sistema de monitoreo y logging
4. Especifica en qué componente específico quedamos trabajando
5. Comparte también cualquier archivo nuevo que hayamos creado

## Notas adicionales

- Estamos trabajando con un VPS de Hostinger (KVM 4: 200GB disco, 16GB RAM, 4 núcleos)
- Postfix está configurado para enviar alertas por email
- Las herramientas de monitoreo deben estar accesibles a través de subdominios específicos
- Se requiere autenticación para proteger las herramientas de monitoreo
- El sistema debe poder funcionar en tres modos: apagado, ligero y completo

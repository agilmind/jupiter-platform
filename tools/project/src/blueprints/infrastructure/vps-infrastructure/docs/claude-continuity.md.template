# Guía de continuidad para Claude - Infraestructura VPS

## Contexto del proyecto

Estamos desarrollando una infraestructura de VPS para proyectos generados con un generador basado en NX. Toda la implementación debe ser genérica utilizando variables de template como `<%=projectName%>` que se reemplazan durante la generación.

## Principios del desarrollo

1. **Todo debe ser un archivo .template**:
   - Todos los archivos (scripts, configuraciones, etc.) deben ser archivos .template
   - Cada archivo debe estar ubicado en su directorio correspondiente dentro de la estructura
   - No se debe generar contenido dinámicamente con `cat >` dentro de scripts

2. **Estructura clara de directorios**:
   - Los scripts van en `vps-infrastructure/scripts/`
   - Los archivos de configuración van en sus respectivos directorios (nginx/conf.d/, etc.)
   - Los documentos van en `vps-infrastructure/docs/`

3. **Generalización completa**:
   - Todas las referencias específicas deben usar variables como `<%=projectName%>`
   - Todas las URLs deben usar variables o variables de entorno
   - Se debe usar envsubst para sustituir variables en archivos de configuración

4. **Separación de responsabilidades**:
   - Los scripts de despliegue solo transfieren archivos, no los generan
   - Cada archivo de configuración tiene su propio .template

## Estado actual del desarrollo

Hemos creado la estructura base de `vps-infrastructure` con templates para:
- Configuración "minimal" para VPS (enfocada en Nginx como punto de entrada)
- Configuración de docker-compose para despliegue
- Scripts de despliegue y captura de snapshots

## Estructura actual de directorios

```
vps-infrastructure/
├── complete/         # Todo en un solo VPS
│   ├── docker-compose.multi.yml.template
│   ├── docker-compose.yml.template
│   ├── monitoring/
│   ├── nginx/
│   │   ├── conf.d/
│   │   │   ├── default.conf.template
│   │   │   └── multi-env.conf.template
│   │   └── ssl/
│   ├── postgres/
│   └── rabbitmq/
├── hybrid/           # Algunos servicios en cloud
│   ├── docker-compose.yml.template
│   ├── monitoring/
│   ├── nginx/
│   └── pgbouncer/
├── minimal/          # Infraestructura mínima (principalmente Nginx)
│   ├── docker-compose.yml.template
│   └── nginx/
│       ├── conf.d/
│       │   ├── project.conf.template
│       │   └── webapp.conf.template
│       └── ssl/
├── deployment/
│   ├── environments/ # Variables por entorno
│   └── scripts/      # Scripts de despliegue
│       ├── deploy-vps.sh.template
│       └── setup-ssl.sh.template
├── docs/            # Documentación
│   ├── claude-continuity.md.template
│   ├── vps-deployment-guide.md.template
│   └── project-plan.md.template
└── scripts/         # Scripts utilitarios
    ├── snapshot-environment.sh.template
    └── setup-nginx.sh.template
```

## Flujo de trabajo para VPS

1. **Generación del proyecto**:
   - Ejecutar `nx g project:create projectName` para generar el proyecto
   - Esto crea todos los archivos necesarios usando los templates

2. **Despliegue en VPS**:
   - Usar el script `deploy-vps.sh` generado en `apps/projectName/scripts/`
   - Este script transfiere los archivos y ejecuta comandos remotos para instalar dependencias

3. **Configuración post-despliegue**:
   - Configurar HTTPS con `setup-ssl.sh`
   - Configurar monitoreo si es necesario

## Próximos pasos

1. **Separar correctamente los archivos**:
   - Mover archivos .template a sus ubicaciones correctas
   - Eliminar generación dinámica de archivos en scripts

2. **Implementar HTTPS apropiadamente**:
   - Agregar soporte para certificados SSL
   - Configurar redirección automática

3. **Implementar monitoreo básico**:
   - Agregar health checks para todos los servicios
   - Configurar logs centralizados

## Consideraciones técnicas para Claude

1. Todos los archivos deben terminar con `.template`
2. Usar las variables `<%=projectName%>`, `<%=appServerName%>`, etc. para personalización
3. Evitar crear archivos dinámicamente con `cat >` dentro de scripts
4. Los scripts deben ser compatibles con Alpine Linux (ash) por compatibilidad con contenedores
5. Nunca usar nombres de proyectos específicos como "jupiter" en los templates
6. Aclarar siempre en qué carpeta debe ir un archivo nuevo

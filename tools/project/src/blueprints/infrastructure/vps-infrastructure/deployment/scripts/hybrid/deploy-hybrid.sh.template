#!/bin/bash

set -e # Salir si algún comando falla

# --- Variables (Obtenidas de las opciones del generador) ---
PROJECT_NAME="<%= projectName %>"
DOMAIN_NAME="<%= domainName %>"
SSL_OPTION="<%= sslOption %>"
APP_SERVER_NAME="<%= appServerName %>"
# WEB_APP_NAMES y WORKER_NAMES ya deberían estar disponibles como arrays bash o necesitar procesarse
# Ejemplo: WEB_APP_NAMES=(<%= webAppNames.map(name => `"${name}"`).join(' ') %>)

# --- Rutas ---
# Asume que este script se ejecuta desde apps/PROJECT_NAME/vps-infrastructure/deployment/scripts/hybrid/
BASE_DIR=$(pwd)/../../.. # Raíz del proyecto generado (ej. apps/jupiter)
DEPLOY_PACKAGE_DIR="$BASE_DIR/vps-infrastructure/deployment/package"
DEPLOY_PACKAGE="$DEPLOY_PACKAGE_DIR/deploy.tar.gz" # Paquete con imágenes y compose

# Rutas en el VPS Host
HOST_NGINX_SITES_AVAILABLE="/etc/nginx/sites-available"
HOST_NGINX_SITES_ENABLED="/etc/nginx/sites-enabled"
HOST_NGINX_CONFIG_FILE="$HOST_NGINX_SITES_AVAILABLE/${PROJECT_NAME}.conf"
HOST_DEPLOY_BASE_DIR="/opt/${PROJECT_NAME}" # Directorio base para los archivos de compose en el host
HOST_COMPOSE_FILE="$HOST_DEPLOY_BASE_DIR/docker-compose.yml"
HOST_IMAGES_DIR="$HOST_DEPLOY_BASE_DIR/images" # Donde podrías extraer los .tar si los separas

# --- Funciones Auxiliares ---
ensure_dir() {
  if [ ! -d "$1" ]; then
    echo "Creando directorio: $1"
    mkdir -p "$1"
  fi
}

check_command() {
  if ! command -v $1 &> /dev/null; then
    echo "Error: Comando '$1' no encontrado. Por favor, instálalo."
    exit 1
  fi
}

# --- Verificaciones Previas (en el host) ---
echo "Verificando herramientas necesarias en el host..."
check_command docker
check_command docker compose
check_command nginx
check_command perl # Si todavía usas perl para algo, aunque deberías evitarlo
# check_command certbot # Si usas Let's Encrypt

echo "Verificando permisos (se necesitará sudo para Nginx, Docker, etc.)..."
if [ "$EUID" -ne 0 ]; then
  echo "Este script necesita interactuar con Nginx y Docker. Ejecútalo con sudo o asegúrate de que tu usuario pertenezca al grupo 'docker'."
  # Considera usar sudo solo para los comandos que lo requieran
fi

# --- Preparación ---
echo "Preparando directorios de despliegue en el host..."
ensure_dir "$HOST_DEPLOY_BASE_DIR"
# ensure_dir "$HOST_IMAGES_DIR" # Si extraes imágenes individualmente

echo "Extrayendo paquete de despliegue..."
# Asumimos que el deploy.tar.gz contiene docker-compose.yml y las imágenes .tar
# Ajusta esto según cómo empaquetes
tar -xzf "$DEPLOY_PACKAGE" -C "$HOST_DEPLOY_BASE_DIR" --strip-components=1 # Ajusta strip-components si es necesario
# Ahora deberías tener $HOST_COMPOSE_FILE y los .tar en $HOST_DEPLOY_BASE_DIR/images/ (o donde sea)

# --- Paso 1: Cargar Imágenes Docker ---
echo "Paso 1: Cargando imágenes Docker..."
# Asumiendo que los .tar están en $HOST_DEPLOY_BASE_DIR/images/
# Necesitas saber los nombres de los archivos .tar
# Este es un ejemplo, AJUSTA según tu estructura de empaquetado
find "$HOST_DEPLOY_BASE_DIR/images" -name '*.tar' -exec docker load -i {} \;
# Verificar que las imágenes se cargaron (opcional pero recomendado)
echo "Imágenes cargadas:"
docker images | grep "${PROJECT_NAME}-"
echo "✅ Imágenes cargadas."

# --- Paso 2: Detener Servicios Antiguos ---
echo "Paso 2: Deteniendo servicios Docker existentes si los hay..."
if [ -f "$HOST_COMPOSE_FILE" ]; then
  docker compose -f "$HOST_COMPOSE_FILE" -p "$PROJECT_NAME" down --remove-orphans || echo "No se pudieron detener los servicios (puede que no existieran)."
else
  echo "Archivo compose no encontrado en $HOST_COMPOSE_FILE, omitiendo detención."
fi
echo "✅ Servicios Docker detenidos o no existían."

# --- Paso 3: Iniciar Servicios Docker ---
echo "Paso 3: Iniciando servicios principales con Docker Compose..."
if [ ! -f "$HOST_COMPOSE_FILE" ]; then
  echo "❌ Error: Archivo docker-compose.yml no encontrado en $HOST_COMPOSE_FILE"
  exit 1
fi
echo "Validando configuración de Docker Compose..."
docker compose -f "$HOST_COMPOSE_FILE" -p "$PROJECT_NAME" config
echo "Iniciando contenedores..."
docker compose -f "$HOST_COMPOSE_FILE" -p "$PROJECT_NAME" up -d --remove-orphans --force-recreate
echo "✅ Servicios Docker iniciados."
docker ps | grep "$PROJECT_NAME" # Muestra los contenedores corriendo

# --- Paso 4: Configurar Nginx en el Host ---
echo "Paso 4: Configurando Nginx en el Host..."

# Generar la config de Nginx desde la plantilla (asume que la plantilla está disponible)
# Necesitas copiar la plantilla al VPS o incluirla en el .tar.gz
NGINX_TEMPLATE_PATH="$BASE_DIR/vps-infrastructure/host-config/nginx.conf.template" # Ruta a la plantilla
GENERATED_NGINX_CONFIG_PATH="/tmp/${PROJECT_NAME}_nginx.conf"

# Verificar que la plantilla existe
if [ ! -f "$NGINX_TEMPLATE_PATH" ]; then
    echo "❌ Error: Plantilla Nginx no encontrada en $NGINX_TEMPLATE_PATH"
    # Alternativa: Si incluiste la plantilla procesada en el tar.gz, cópiala directamente
    # cp "$HOST_DEPLOY_BASE_DIR/nginx.conf" "$HOST_NGINX_CONFIG_FILE"
    exit 1
fi

# Reemplazar variables en la plantilla (usando perl o envsubst si es más simple)
# Ejemplo con envsubst (requiere exportar las variables de bash)
# export PROJECT_NAME APP_SERVER_NAME DOMAIN_NAME ...
# envsubst < "$NGINX_TEMPLATE_PATH" > "$GENERATED_NGINX_CONFIG_PATH"
# Ejemplo básico con sed (más propenso a errores con caracteres especiales)
cp "$NGINX_TEMPLATE_PATH" "$GENERATED_NGINX_CONFIG_PATH"
# ¡Esta parte es delicada! Necesitas reemplazar TODAS las variables <%= %>
# Es MEJOR si el generador NX crea este archivo directamente y lo incluyes en el tar.gz
# Si lo haces así, el paso sería:
# cp "$HOST_DEPLOY_BASE_DIR/nginx.conf" "$HOST_NGINX_CONFIG_FILE"
echo "Copiando configuración de Nginx generada..."
# Necesitarás sudo aquí
sudo cp "$HOST_DEPLOY_BASE_DIR/nginx.conf" "$HOST_NGINX_CONFIG_FILE" # Asume que incluiste el .conf procesado en el tar

# Habilitar el sitio creando el enlace simbólico
echo "Habilitando sitio Nginx..."
if [ -L "${HOST_NGINX_SITES_ENABLED}/${PROJECT_NAME}.conf" ]; then
  sudo rm "${HOST_NGINX_SITES_ENABLED}/${PROJECT_NAME}.conf"
fi
# Necesitarás sudo aquí
sudo ln -s "$HOST_NGINX_CONFIG_FILE" "${HOST_NGINX_SITES_ENABLED}/${PROJECT_NAME}.conf"

# (Opcional) Configurar SSL con Let's Encrypt
if [ "$SSL_OPTION" = "letsencrypt" ]; then
  echo "Configurando SSL con Let's Encrypt..."
  # Necesitarás sudo aquí
  # Asegúrate de que el puerto 80 esté abierto y Nginx corriendo para el challenge
  # Podrías necesitar reiniciar nginx ANTES de certbot
  sudo nginx -t && sudo systemctl reload nginx
  # Ejecutar certbot
  sudo certbot --nginx -d "$DOMAIN_NAME" --non-interactive --agree-tos --email your-email@example.com # Necesitas un email
  echo "✅ Certificado SSL obtenido/renovado."
fi

# Probar la configuración de Nginx
echo "Probando configuración de Nginx..."
# Necesitarás sudo aquí
sudo nginx -t
if [ $? -ne 0 ]; then
  echo "❌ Error en la configuración de Nginx. Revisa $HOST_NGINX_CONFIG_FILE y los logs de Nginx."
  exit 1
fi

# Recargar Nginx para aplicar los cambios
echo "Recargando Nginx..."
# Necesitarás sudo aquí
sudo systemctl reload nginx
echo "✅ Nginx configurado y recargado."

# --- Paso 5: Configurar Firewall (Ejemplo con UFW) ---
echo "Paso 5: (Opcional) Configurando Firewall (UFW)..."
if command -v ufw &> /dev/null; then
  sudo ufw allow OpenSSH
  sudo ufw allow 'Nginx Full' # Permite HTTP (80) y HTTPS (443)
  # sudo ufw allow 80/tcp # Si solo usas HTTP
  # sudo ufw allow 443/tcp # Si solo usas HTTPS
  # ¡NO abras los puertos de la base de datos o RabbitMQ directamente a menos que sea estrictamente necesario!
  sudo ufw enable # Asegúrate de que esté activo (¡CUIDADO si te conectas por SSH!)
  sudo ufw status
else
  echo "UFW no encontrado, omitiendo configuración de firewall."
fi

# --- Limpieza (Opcional) ---
# echo "Limpiando archivos temporales..."
# rm -rf /tmp/${PROJECT_NAME}_*

echo "==========================================================="
echo "✅ Despliegue Hybrid de ${PROJECT_NAME} completado."
echo "Accede a tu aplicación en: http(s)://${DOMAIN_NAME}"
echo "==========================================================="

exit 0

# tools/project/src/blueprints/infrastructure/vps-infrastructure/hybrid/nginx-conf/webapp.conf.template
# Archivo de configuraciÃ³n de Nginx para webapp.jupiter.ar (HTTP Inicial)
# Se genera en -> apps/jupiter/vps-infrastructure/hybrid/nginx-conf/webapp.conf

server {
    # Escuchar en puerto 80 para IPv4 y IPv6
    listen 80;
    listen [::]:80;
    server_name webapp.<%= projectName %>.ar;

    resolver 127.0.0.11 valid=5s; # Usa el DNS interno de Docker, re-chequea cada 5s

    access_log /var/log/nginx/webapp.access.log;
    error_log /var/log/nginx/webapp.error.log warn;

    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://<%= projectName %>-<%= appServerName %>:4000;

        # Cabeceras importantes para pasar al backend
        proxy_set_header Host $host; # Pasar el host original solicitado por el cliente
        proxy_set_header X-Real-IP $remote_addr; # Pasar la IP real del cliente
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Lista de IPs (si hay proxies intermedios)
        proxy_set_header X-Forwarded-Proto $scheme; # Pasar el protocolo original (http o https)

        # Configuraciones para WebSockets (si tu API los usa)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_read_timeout 600s; # Timeout extendido para requests largos
        proxy_redirect off; # No dejar que el backend redirija cambiando el host
    }

    # ----- Proxy Reverso para el Frontend (React App) -----
    location / {
        proxy_pass http://<%= projectName %>-<%= webAppName %>;

        # Cabeceras importantes para pasar al backend (frontend en este caso)
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

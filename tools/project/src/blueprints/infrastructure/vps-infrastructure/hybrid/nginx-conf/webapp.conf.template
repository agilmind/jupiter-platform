# ==============================================================================
# *** VERSIÓN TEMPORAL - SOLO HTTP ***
# Propósito: Permitir que Nginx arranque y sirva los desafíos ACME de Let's Encrypt
#            para poder obtener el certificado SSL inicial.
#
# Una vez obtenido el certificado, esta plantilla deberá ser reemplazada
# por la versión final que incluye la configuración HTTPS completa.
# ==============================================================================

server {
    # Escuchar solo en puerto 80 (HTTP) por ahora
    listen 80;
    listen [::]:80;

    # Dominio(s) para los que aplica esta configuración
    # Asegúrate que la variable <%= projectName %> se sustituya correctamente (ej. 'jupiter')
    server_name webapp.<%= projectName %>.ar;
    # Si es fijo, puedes poner: server_name webapp.jupiter.ar;

    # --- Ruta para Validación de Let's Encrypt (ACME Challenge) ---
    # Certbot (usando --webroot) necesita que esta ruta sea servible por HTTP.
    location /.well-known/acme-challenge/ {
        # Servir archivos directamente desde el volumen compartido con Certbot.
        # Esta ruta es DENTRO del contenedor Nginx.
        root /var/www/certbot;
    }

    # --- Redirección a HTTPS (DESCOMENTADA YA) ---
    # No redirigir mientras obtenemos el certificado por HTTP.
    location / {
        return 301 https://$host$request_uri;
    }

    # --- Proxy Reverso para la API Backend (por HTTP) ---
    location /api/ {
        # Reescribir URL (quitar /api/)
        rewrite ^/api/(.*)$ /$1 break;

        # Pasar al PUERTO 4000 del HOST donde está mapeado app-server,
        # usando la IP del gateway de Docker (interfaz docker0 del host).
        # !!! IMPORTANTE: Reemplaza '172.17.0.1' con la IP real de tu 'docker0' !!!
        proxy_pass http://172.17.0.1:4000;

        # Cabeceras estándar de proxy reverso
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # $scheme será 'http' aquí
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 600s;
        proxy_redirect off;
    }

    # --- Proxy Reverso para el Frontend (React App) (por HTTP) ---
    location / {
        # Pasar al PUERTO 3000 del HOST donde está mapeado web-app,
        # usando la IP del gateway de Docker.
        # !!! IMPORTANTE: Reemplaza '172.17.0.1' con la IP real de tu 'docker0' !!!
        proxy_pass http://172.17.0.1:3000;

        # Cabeceras estándar
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme; # $scheme será 'http'
    }

    # --- Logs ---
    access_log /var/log/nginx/webapp.access.log;
    error_log /var/log/nginx/webapp.error.log warn; # Loguear errores y advertencias
}

# --- Bloque HTTPS Completo (DESCOMENTADO YA) ---
# comentar para obtener los certificados por Certbot.
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name webapp.<%= projectName %>.ar; # O webapp.jupiter.ar

    ssl_certificate /etc/letsencrypt/archive/webapp.<%= projectName %>.ar/fullchain1.pem;
    ssl_certificate_key /etc/letsencrypt/archive/webapp.<%= projectName %>.ar/privkey1.pem;

    include /etc/nginx/conf.d/options-ssl-nginx.conf; # Archivo con opciones SSL seguras
    # ssl_dhparam /etc/nginx/ssl/dhparam.pem; # Parámetros DH (opcional pero recomendado)

    access_log /var/log/nginx/webapp.ssl.access.log;
    error_log /var/log/nginx/webapp.ssl.error.log warn;

    location /api/ {
        rewrite ^/api/(.*)$ /$1 break;
        proxy_pass http://172.17.0.1:4000; # IP Gateway
        # ... proxy_set_header ... (igual que bloque HTTP, pero X-Forwarded-Proto será https)
        proxy_set_header X-Forwarded-Proto https;
    }

    location / {
        proxy_pass http://172.17.0.1:3000; # IP Gateway
        # ... proxy_set_header ... (igual que bloque HTTP, pero X-Forwarded-Proto será https)
        proxy_set_header X-Forwarded-Proto https;
    }
}


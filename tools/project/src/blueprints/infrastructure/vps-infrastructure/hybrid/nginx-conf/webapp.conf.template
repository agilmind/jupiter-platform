# ==============================================================================
# tools/project/src/blueprints/infrastructure/vps-infrastructure/hybrid/nginx-conf/webapp.conf.template
#
# *** VERSIÓN FINAL - HTTP y HTTPS ***
# Configuración para Nginx como Reverse Proxy con SSL/TLS de Let's Encrypt
# ==============================================================================

# ---- Bloque HTTP (Puerto 80) ----
# Propósito: Servir desafío ACME y redirigir TODO lo demás a HTTPS
server {
    listen 80;
    listen [::]:80;

    # Dominio(s)
    # Reemplaza <%= projectName %> o usa nombre fijo: webapp.jupiter.ar
    server_name webapp.<%= domainName %>;

    # 1. Servir Desafío ACME
    # Esencial para que Certbot (--webroot) pueda validar/renovar
    location /.well-known/acme-challenge/ {
        # Servir desde el volumen compartido con Certbot
        root /var/www/certbot;
    }

    # 2. Redirigir todo el resto del tráfico HTTP a HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# ---- Bloque HTTPS (Puerto 443) ----
# Maneja el tráfico seguro
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    # Dominio(s)
    # Reemplaza <%= projectName %> o usa nombre fijo: webapp.jupiter.ar
    server_name webapp.<%= domainName %>;

    # --- Certificados SSL ---
    # Usar rutas absolutas a 'archive' que ya verificamos.
    # Asegúrate que <%= projectName %> se resuelve a 'jupiter'.
    ssl_certificate /etc/letsencrypt/live/webapp.<%= domainName %>/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/webapp.<%= domainName %>/privkey.pem;

    # --- Opciones SSL Seguras ---
    # Incluir archivo con configuraciones recomendadas
    # Asegúrate que este archivo existe en ./nginx-conf y se monta en docker-compose.vps.yml
    include /etc/nginx/conf.d/options-ssl-nginx.conf;

    # --- Logs específicos para HTTPS ---
    access_log /var/log/nginx/webapp.ssl.access.log;
    error_log /var/log/nginx/webapp.ssl.error.log warn;

    # --- Proxy Reverso para la API Backend ---
    location /api/ {
        # Reescribir URL (quitar /api/)
        rewrite ^/api/(.*)$ /$1 break;

        # !!! IMPORTANTE: Reemplaza '172.17.0.1' con la IP real de tu interfaz docker0 !!!
        proxy_pass http://172.17.0.1:4000;

        # Cabeceras estándar + X-Forwarded-Proto https
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https; # <-- Indicar HTTPS al backend
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 600s;
        proxy_redirect off;
    }

    # --- Proxy Reverso para el Frontend (React App) ---
    location / {
        # !!! IMPORTANTE: Reemplaza '172.17.0.1' con la IP real de tu interfaz docker0 !!!
        proxy_pass http://172.17.0.1:3000;

        # Cabeceras estándar + X-Forwarded-Proto https
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https; # <-- Indicar HTTPS al backend
    }
}

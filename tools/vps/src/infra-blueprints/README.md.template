# Infraestructura VPS: <%= infraName %>

Este directorio contiene los archivos de configuración generados para el stack de infraestructura base (Proxy Inverso Traefik<% if (monitoringEnabled) { %> + Stack de Monitoreo<% } %>) para la instancia llamada **`<%= infraName %>`**.

Estos archivos fueron generados por el generador `@mi-org/vps:create` (ajusta scope según tu config Nx).

## Archivos de Configuración Clave

* `docker-compose-infra.yml`: Define los servicios Docker (Traefik<% if (monitoringEnabled) { %>, Grafana, Prometheus, Loki, Promtail, Node Exporter<% } %>).
* `traefik.yml`: Configuración estática de Traefik (entrypoints con redirección HTTPS, provider Docker, resolvedor ACME Let's Encrypt por defecto).
* `.env.template`: Plantilla para variables de entorno. **Debes crear `.env` en el servidor.**
<% if (monitoringEnabled) { %>* `prometheus.yml`: Configuración de scrapeo para Prometheus.
* `loki-config.yml`: Configuración de Loki.
* `promtail-config.yml`: Configuración de Promtail.<% } %>
* `.gitignore`: Ignora el archivo `.env`.
* `README.md`: Este mismo archivo.
* `project.json`: Configuración para Nx.

**Archivos Requeridos Manualmente en el Servidor (NO en Git):**

* `/home/deploy/infra/.env`: Creado a partir de `.env.template`. Contiene secretos como la contraseña de Grafana y, opcionalmente, tokens de API para el desafío ACME DNS-01.
* `/home/deploy/infra/traefik-auth/.htpasswd`: Contiene el usuario y contraseña (hasheada) para acceder al Dashboard de Traefik.

## Prerrequisitos Indispensables

Antes de intentar desplegar esta configuración:

1.  **Servidor VPS Preparado:** El servidor VPS de destino **debe** haber sido inicializado usando los scripts del repositorio:
    * `tools/vps/scripts/debian-harden.sh` (ejecutado como `root`)
    * `tools/vps/scripts/vps-initial-setup.sh` (ejecutado con `sudo`)
    (Consulta `tools/vps/README.md` para más detalles).
2.  **Acceso SSH como `deploy`:** Debes poder conectarte al VPS mediante SSH como usuario `deploy` usando autenticación por clave (sin contraseña).
3.  **Repositorio Git Actualizado:** Todos los archivos generados dentro de este directorio (`<%= infraConfigRoot %>/`) **deben** estar comiteados y pusheados a la rama principal de tu repositorio Git.
4.  **Registros DNS Creados:** Los registros DNS para los subdominios de infraestructura deben existir y apuntar a la IP pública del VPS **antes** de intentar el despliegue.
    * `<%= traefikSubdomain %>.<%= baseDomain %>` -> `IP_DEL_VPS`
    <% if (monitoringEnabled) { %>* `<%= grafanaSubdomain %>.<%= baseDomain %>` -> `IP_DEL_VPS`<% } %>
5.  **Secretos de GitHub Actions:** Asegúrate de que los secretos necesarios para el workflow `cd-infra.yml` existan en la configuración de tu repositorio GitHub ([Settings] > [Secrets and variables] > [Actions]). Basado en el `infraName` **`<%= infraName %>`**, el workflow esperará secretos con nombres que siguen este patrón:
    * `VPS_<%= infraName.toUpperCase() %>_HOST`: IP pública o Hostname del VPS.
    * `VPS_<%= infraName.toUpperCase() %>_USER`: Usuario SSH configurado en el VPS para despliegues (debería ser `deploy`).
    * `VPS_<%= infraName.toUpperCase() %>_KEY`: **El contenido completo de la clave privada SSH** que permite la conexión como usuario `deploy`.
        * **Origen de la Clave:** Esta clave privada **NO se encuentra en el servidor VPS**. Pertenece a un par de claves SSH (pública/privada) que generalmente se genera en **tu máquina de desarrollo local** o en un lugar seguro destinado a gestionar credenciales de despliegue.
        * **Correspondencia:** La **clave pública** correspondiente a esta clave privada debe estar añadida al archivo `/home/deploy/.ssh/authorized_keys` en el servidor VPS. El script `vps-initial-setup.sh` usualmente ayuda a configurar esto, pidiendo la clave pública durante su ejecución o usando una preconfigurada.
        * **Cómo Obtener el Valor para el Secreto:**
            1.  Localiza el archivo de la **clave privada** en tu máquina (ej. `~/.ssh/id_rsa_deploy_infra`, `~/.ssh/id_ed25519`, o la que hayas generado para este propósito).
            2.  Visualiza su contenido completo. Por ejemplo, usando `cat`:
                ```bash
                cat ~/.ssh/id_tu_clave_privada_deploy
                ```
            3.  Copia **todo el bloque de texto**, incluyendo las líneas `-----BEGIN OPENSSH PRIVATE KEY-----` (o similar) y `-----END OPENSSH PRIVATE KEY-----`, así como todos los saltos de línea intermedios.
            4.  Ve a la configuración de secretos de GitHub Actions de tu repositorio y crea o actualiza el secreto `VPS_<%= infraName.toUpperCase() %>_KEY`, pegando el contenido completo que copiaste como su valor.

## Pasos para el Primer Despliegue (y Únicos Pasos Manuales Necesarios)

El despliegue se realiza mediante el workflow de GitHub Actions `Deploy VPS Infrastructure Stack (Manual)`, pero requiere que los archivos `.env` y `.htpasswd` existan previamente en el servidor.

1.  **Preparar Archivos de Secretos en el Servidor:**
    * Conéctate al VPS como usuario `deploy`: `ssh deploy@<IP_o_HOSTNAME_VPS>`
    * Navega al directorio de infraestructura: `cd /home/deploy/infra/`
    * **Copiar `.env.template` (si no existe):** Si es la primera vez y el directorio está vacío, copia el template desde tu máquina local o desde el repo Git (ej. usando `scp` o `wget` si el repo es público/accesible). `scp ruta/local/a/infra/<%= infraName %>/.env.template deploy@<IP_o_HOSTNAME_VPS>:/home/deploy/infra/`
    * **Crear y Editar `.env`:**
        * `cp .env.template .env`
        * `nano .env`
        * Rellena los valores:
            <% if (monitoringEnabled) { %>* `GF_ADMIN_PASSWORD`: **Obligatorio.** Cambia `changeme` por una contraseña segura para Grafana.<% } %>
            * `CF_DNS_API_TOKEN`, `DO_AUTH_TOKEN`, etc.: **Opcional.** Solo si usas el desafío DNS-01 para Let's Encrypt en `traefik.yml`. Descomenta y añade tus credenciales.
        * Guarda y cierra (`Ctrl+O`, `Enter`, `Ctrl+X`).
    * **Crear Directorio y Archivo `.htpasswd`:**
        * `mkdir -p traefik-auth`
        * Instala `htpasswd` si no existe: `sudo apt update && sudo apt install -y apache2-utils`
        * Genera la contraseña para el usuario `admin` (o el que prefieras) y guárdala:
            ```bash
            # Reemplaza 'tu-password-segura-aqui' con tu contraseña real
            htpasswd -cb traefik-auth/.htpasswd admin 'tu-password-segura-aqui'
            ```
            * (`-c` crea el archivo, úsalo solo la primera vez. Para añadir/modificar usuarios después, omite `-c`).
        * Ajusta permisos (recomendado): `chmod 600 traefik-auth/.htpasswd`

2.  **Ejecutar el Workflow de Despliegue:**
    * Ve a la sección **Actions** de tu repositorio en GitHub.
    * Selecciona el workflow `Deploy VPS Infrastructure Stack (Manual)` en el panel izquierdo.
    * Haz clic en el botón **"Run workflow"**.
    * En el desplegable **"Select the Infrastructure project name"**, elige **`<%= infraName %>`**.
    * Haz clic en el botón verde **"Run workflow"**.
    * El workflow se ejecutará: sincronizará los archivos de configuración desde Git (excluyendo `.env` y `.htpasswd`), y luego ejecutará `docker compose up -d` en el servidor.

3.  **Verificación:**
    * Espera unos minutos. Puedes seguir los logs en el servidor con: `ssh deploy@<IP_o_HOSTNAME_VPS> "cd /home/deploy/infra && docker compose logs -f traefik"`
    * Una vez que Traefik haya obtenido los certificados, prueba a acceder en tu navegador:
        * `https://<%= traefikDomain %>` (Debería pedir autenticación Basic Auth: `admin` / `tu-password-segura-aqui`).
        <% if (monitoringEnabled) { %>* `https://<%= grafanaDomain %>` (Login: `admin` / la contraseña que pusiste en `.env`).<% } %>
    * Si todo funciona, ¡la infraestructura base está lista! Las actualizaciones futuras se hacen simplemente volviendo a ejecutar el workflow (Paso 2).

## Próximos Pasos

* Desplegar aplicaciones usando tu generador `project:create` (o similar) y el workflow `cd-deploy.yml`.
* Asegúrate de que las aplicaciones desplegadas usen la red `webproxy` y definan las `labels` correctas de Traefik para su exposición.
* Si habilitaste el monitoreo, configura Prometheus/Loki/Promtail para recoger métricas/logs de tus aplicaciones y crea dashboards en Grafana.

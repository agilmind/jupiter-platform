##############
# contracts.hk
##############

ContractContact: entity
  .labels("Contacto de contrato", "Contactos de contrato")
  .displayId(name, "' '", surname)
{
  name: string
    .labels("Nombre")

  surname: string
    .labels("Apellido")

  isActive: boolean
    .labels("Activo")

  phones: maybe(set(ContractContactPhone))
    .labels("Teléfonos", help="Teléfonos de contacto")

  emails: maybe(set(string))
    .labels("Email", help="Dirección de correo electrónico")
    .validations("__EMAIL__")

  comments: maybe(string)
    .labels("Comentarios")
}

ContractRevision: entity
  .labels("Revisión de contrato", "Revisiones de contrato")
  .displayId("preparedBy.displayId:Employee", "'/'", "reviewedBy.displayId:Employee", "'/'", "approvedBy.displayId:Employee")
{
  revisionDateTime: dateTime
    .labels("Fecha", help="Fecha de revisión")

  preparedBy: ref(Employee)
    .labels("Preparó", help="Persona que preparó la revisión de contrato")

  reviewedBy: ref(Employee)
    .labels("Revisó", help="Persona que revisó el contrato")

  approvedBy: ref(Employee)
    .labels("Aprobó", help="Persona que aprobó la revisión de contrato")
}

ContractSamplingItem: entity
  .labels("Muestreo", "Muestreos")
  # @unique(super location estimatedDate)
  .displayId("unit.displayId:QuantitativeUnit")
{
  estimatedDate: date
    .labels("Fecha estimada")

  measure: integer # decimal(40, 10)
    .labels("Medida de Volumen/Masa")

  unit: ref(QuantitativeUnit)
    .labels("Unidad")

  samplers: integer
    .labels("Muestradores")

  totalTime: integer
    .labels("Tiempo total (Horas)")

  consumables: string
    .labels("Consumibles")

  times: integer
    .labels("Cantidad de veces", "Cantidad de veces que se muestrea")

  numberOfBodies: integer
    .labels("Cantidad de cuerpos", "Cantidad de lugares de muestreo")

  travel: ref(ContractTravelItem)
    .labels("Viaje")
}

ContractTravelItem: entity
  .labels("Viaje para muestreo", "Viajes para muestreo")
  # @unique(super location estimatedDate)
  .displayId(location)
{
    location: string
      .labels("Ubicación")

    transfer: integer
      .labels("Traslado (Km)")

    accommodation: integer
      .labels("Alojamiento (días)")

    expensesUnits: integer
      .labels("Viáticos (unidades)")
}

Sample: entity
  .labels("Muestra", "Muestras")
  #  @unique(super matrix)
  .displayId("matrix.displayId:Matrix")
{
    matrix: ref(Matrix)
      .labels("Matriz")

    quantity: integer
      .labels("Cantidad de cuerpos")
}

DeterminationRequest: entity
  .labels("Requerimiento", "Requerimientos")
  .displayId("determination.displayId:Determination")
{
  determination: ref(Determination)
    .labels("Determinación")

  quantityDiscount: integer # decimal(10, 4)
    .labels("Descuento por cantidad")

  packageDiscount: integer # decimal(10, 4)
    .labels("Descuento por paquete")

  specification: ref(Specification)
    .labels("Especificación")

  report: boolean
    .labels("¿Se informa?")

  oosResearchRequired: boolean
    .labels("¿Se investiga OOS?")

  oosRepeatRequired: boolean
    .labels("¿Se repite OOS?")

  isGLP: boolean
    .labels("¿Es BPL?")

  providesPrecedingData: boolean
    .labels("Datos precedentes", "¿Provee datos de determinaciones precedentes?")

  finalPrice: integer # decimal(18, 2)
    .labels("Precio final")

  comments: maybe(string)
    .labels("Comentarios")
}

ItemPeriodicityUnit: entity
  .labels("Unidad de periodicidad", "Unidades de periodicidad")
{
    name: string
      .unique
      .labels("Nombre")

    days: integer
      .labels("Días en el período")

    description: maybe(string)
      .labels("Descripción")
}

SampleFromContractSamplingItem: entity
  .labels("Muestra por muestreo", "Muestras por muestreos")
  #@unique(super sampling)
  .displayId(id)
{
    sampling: ref(ContractSamplingItem)
      .labels("Muestreo")

    costPercentage: integer # decimal(10, 4)
      .labels("% costo muestreo")
}

SampleReception: entity
  .labels("Recepción de muestra", "Recepciones de muestras")
  #  @unique(super estimatedDate)
  .displayId(id)
{
    estimatedDate: date
      .labels("Fecha estimada")

    fromContractSamplingItem: maybe(SampleFromContractSamplingItem)
      .labels("Desde muestreo")
}

ContractDeterminationItem: entity
  .labels("Ítem de contrato", "Ítems de contrato")
  .displayId(title)
{
  title: string
    .labels("Título", "Título del ítem de contrato")

  sample: ref(Sample)
    .labels("Muestra")

  determinations: maybe(set(DeterminationRequest))
    .labels("Determinaciones")

  times: integer
    .labels("Cantidad de veces", "Repetición periódica del contenido del item en el tiempo")

  periodicityUnit: ref(ItemPeriodicityUnit)
    .labels("Unidad de periodicidad", "Unidad del intervalo de tiempo entre repeticiones del ítem")

  periodicity: integer
    .labels("Periodicidad", "Cantidad, según la unidad de periodicidad")

  numberOfSamples: integer
    .labels("Cantidad de muestras", "A cuántas muestras se aplica cada vez")

  samplesReception: maybe(set(SampleReception))
    .labels("Recepción de muestras")

  comments: maybe(string)
    .labels("Comentarios")
}

Contract: entity
  .labels("Contrato", "Contratos")
  .history
  .displayId("customer.displayId:Customer", title)
{
  customer: group.labels("Cliente") {
    title: string
      .labels("Título", "Título del contrato")

    revisions: maybe(set(ContractRevision))
      .labels("Revisiones")

    customer: ref(Customer)
      .labels("Cliente")

    contacts: maybe(set(ContractContact))
      .labels("Contactos")
  }

  conditions: group.labels("Condiciones contractuales") {
    quoteDate: date
      .labels("Fecha de presupuesto")

    validity: integer
      .labels("Validez del presupuesto (días)")

    acceptanceDate: maybe(date)
      .labels("Fecha de aceptación")

    initDate: maybe(date)
      .labels("Fecha de inicio")

    contractPeriod: integer
      .labels("Duración del contrato (días)")

    discount: integer # decimal(10, 4)
      .labels("Descuento")

    purchaseOrder: string
      .labels("OC")

    comments: maybe(string)
      .labels("Comentarios")
  }

  essays: group.labels("Ensayos y muestreos") {
    determinationItems: maybe(set(ContractDeterminationItem))
      .labels("Determinaciones")

    samplings: maybe(set(ContractSamplingItem))
      .labels("Muestreos")
  }

  transfers: group.labels("Viajes") {
    transfers: maybe(set(ContractTravelItem))
      .labels("Viajes")
  }
}

##############
# customers.hk
##############

PhoneType: entity
  .labels("Tipo de teléfono", "Tipos de teléfono")
{
    name: string
      .unique
      .labels("Nombre")

    description: maybe(string)
      .labels("Descripción")
}

CustomerProspectPhone: entity
  .labels("Teléfono de prospecto", "Teléfonos de prospecto")
  .displayId(phone)
{
  phone: string
    .labels("Teléfono")

  type: maybe(ref(PhoneType))
    .labels("Tipo de teléfono")

  comments: maybe(string)
    .labels("Comentarios")
}

ContractContactPhone: entity
  .labels("Teléfono de contacto de contrato", "Teléfonos de de contacto de contrato")
  .displayId(phone)
{
  phone: string
    .labels("Teléfono")

  type: maybe(ref(PhoneType))
    .labels("Tipo de teléfono")

  comments: maybe(string)
    .labels("Comentarios")
}

CustomerContactPhone: entity
  .labels("Teléfono de contacto de contrato", "Teléfonos de contacto de contrato")
  .displayId(phone)
{
  phone: string
    .labels("Teléfono")

  type: maybe(ref(PhoneType))
    .labels("Tipo de teléfono")

  comments: maybe(string)
    .labels("Comentarios")
}

CustomerProspect: entity
  .labels("Prospecto de cliente", "Prospectos de cliente")
  .displayId(contact)
{
  contact: string
    .labels("Contacto", help="Nombre del contacto")

  phones: maybe(set(CustomerProspectPhone))
    .labels("Teléfonos", help="Teléfonos de contacto")

  emails: set(string)
    .labels("Email", help="Dirección de correo electrónico")
    .validations("__EMAIL__")

  isResident: boolean
    .labels("¿Es residente?", help="Indica si es residente en el país para definir moneda de facturación")

  comments: maybe(string)
    .labels("Comentarios")
}

CustomerGroup: entity
  .labels("Grupo empresarial", "Grupos empresariales")
{
    name: string
      .unique
      .labels("Nombre")

    description: maybe(string)
      .labels("Descripción")
}

CustomerDiscount: entity
  .labels("Descuento", "Descuentos")
  #.history
  .displayId(id)
{
#    customer: ref(Customer)
#      .unique
#      .labels("Cliente")

    startDate: dateTime
      .labels("Fecha de inicio")

    discount: integer # decimal(10, 4)
      .labels("Descuento")

    description: maybe(string)
      .labels("Descripción")
}

CustomerContact: entity
  .labels("Contacto de cliente", "Contactos de clientes")
{
  name: string
    .labels("Nombre")

  surname: string
    .labels("Apellido")

  isActive: boolean
    .labels("Activo")

  phones: maybe(set(CustomerContactPhone))
    .labels("Teléfonos", help="Teléfonos de contacto")

  emails: set(string)
    .labels("Email", help="Dirección de correo electrónico")
    .validations("__EMAIL__")

  comments: maybe(string)
    .labels("Comentarios")
}

Customer: entity
  .labels("Cliente", "Clientes")
{
  name: string
    .unique
    .labels("Razón social")

  businessId: string
    .unique
    .labels("CUIT")

  isResident: boolean
    .labels("¿Es residente?", help="Indica si es residente en el país para definir moneda de facturación")

  isUltimateCustomer: boolean
    .labels("¿Es cliente definitivo?", "Si no es un cliente definitivo solo se le pueden emitir informes")

  comments: maybe(string)
    .labels("Comentarios")

  customerGroup: maybe(ref(CustomerGroup))
    .labels("Grupo", "El grupo de empresas al que pertenece el cliente")

  purchaseOrder: boolean
    .labels("Requiere Orden de Compra")

  address: string
    .labels("Dirección de la planta")

  contacts: maybe(set(CustomerContact))
    .labels("Contactos")
}

###################
# determinations.hk
###################

AggregationState: entity
  .labels("Estado de agregación",  "Estados de agregación")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

MatrixSubCategory: entity
  .labels("Subcategoría de matriz", "Subcategorías de matriz")
#  .displayId("parent.name", " -> ", name))
  .displayId(name)
  .listDisplay("name")
  .unique(__parent, name)
  .listTextSearch(name, description)
{
  name: string
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

MatrixCategory: entity
  .labels("Categoría de matriz",  "Categorías de matriz")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")

  subCategories: maybe(set(MatrixSubCategory))
    .labels("Subcategorías")
}

FormulationType: entity
  .labels("Tipo de formulación", "Tipos de formulación")
  .unique(code, denomination)
  .displayId(code, denomination)
  .listTextSearch(code, denomination, description)
{
  code: string
    .labels("Código")

  denomination: string
    .labels("Denominación")

  description: maybe(string)
    .labels("Descripción")
}

Matrix: entity
  .labels("Matriz",  "Matrices")
  #.unique(businessUnit, aggregationState, matrixSubCategory)
  .displayId(
    "businessUnit.displayId:BusinessUnit", "' / '",
    "aggregationState.displayId:AggregationState", "' / '",
    "matrixSubCategory.displayId:MatrixSubCategory"
  )
{
  businessUnit: ref(BusinessUnit)
    .labels("Unidad de negocio")

  aggregationState: ref(AggregationState)
    .labels("Estado de agregación")

  matrixSubCategory: ref(MatrixSubCategory)
    .filterByMasterEntity
    .labels("Subcategoría")

  discard: boolean
    .labels("Ley 24.051 (descarte)")

  formulationTypes: maybe(set(FormulationType))
    #.unique(part)
    .labels("Tipos de formulación")
}

DeterminationName: entity
  .labels("Nombre de determinación", "Nombres de determinaciones")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

Accreditation: entity
  .labels("Acreditación / Habilitación",  "Acreditaciones / Habilitaciones")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

DeterminationPrice: entity
  .labels("Precio de determinación", "Precio de determinaciones")
  .displayId(localPrice)
{
  localPrice: integer #money
    .labels("Precio local")

  price: group
    .labels("Precio exterior")
  {
    foreignPrice: integer #money
      .labels("Valor")

    foreignCurrency: ref(Currency)
      .labels("Moneda")
  }
}

NonAdditiveSampleGroup: entity
  .labels("Grupo no aditivo", "Grupos no aditivo")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  maxQuantity: integer
    .labels("Cantidad máxima")

  description: maybe(string)
    .labels("Descripción")
}

PrecedingDetermination: entity
  .labels("Determinación precedente", "Determinaciones precedentes")
  .displayId(id)
{
    #determination: ref(Determination)
#      .labels("Determinación")

    required: boolean
      .labels("¿Es requerido?")

    isPrevious: boolean
      .labels("¿Es previo al inicio del análisis?")

    canCustomerInform: boolean
      .labels("¿Puede informarlo el cliente?")
}

AnalyticalMethod: entity
  .labels("Método analítico", "Métodos analíticos")
  .unique(specIssuer, code, revision, title)
  .displayId("specIssuer.name", code, revision, title)
  .listTextSearch(code, revision, title)
{
  specIssuer: ref(SpecIssuer)
    .labels("Emisor")

  code: string
    .labels("Código")

  revision: string
    .labels("Revisión")

  title: string
    .labels("Título")
}

EquipmentType: entity
  .labels("Tipo de equipo", "Tipos de equipo")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

SampleMethod: entity
  .labels("Método de muestreo", "Métodos de muestreo")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

ContainerType: entity
  .labels("Tipo de envase", "Tipos de envase")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

ContainerColor: entity
  .labels("Color del envase", "Colores del envase")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

ContainerMaterial: entity
  .labels("Material del envase", "Materiales del envase")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

UnitType: entity
  .labels("Tipo de unidad", "Tipos de unidad")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

QuantitativeUnit: entity
  .labels("Unidad cuantitativa", "Unidades cuantitativas")
  .displayId(code)
  .listTextSearch(code)
{
  code: string
    .unique
    .labels("Símbolo")

  unitType: ref(UnitType)
    .labels("Tipo de unidad")
}

SamplePh: entity
  .labels("pH de muestra", "pHs de muestra")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

SamplePreservative: entity
  .labels("Preservante de muestra", "Preservantes de muestra")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

SampleTemperature: entity
  .labels("Temperatura de muestra", "Temperaturas de muestra")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

HoldingTimeUnit: entity
  .labels("Unidad de tiempo", "Unidad de tiempo")
  .displayId(unitTime)
  .listTextSearch(unitTime)
{
  unitTime: string
    .unique
    .labels("Unidad de tiempo")
}

HoldingTime: entity
  .labels("Holding time", "Holding times")
  .displayId(
    quantity,
    "quantityUnit.displayId:HoldingTimeUnit"
    )
  .listTextSearch(observations)
{
  quantity: integer
    .labels("Cantidad")

  quantityUnit: ref(HoldingTimeUnit)
    .labels("Unidad")

  observations: maybe(string)
    .labels("Observaciones")
}

AirChamber: entity
  .labels("Cámara de aire", "Cámaras de aire")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

SamplePreservation: entity
  .labels("Preservación de la muestra", "Preservación de muestras")
  .unique(containerType, containerColor, containerMaterial, pH, preservative, temperature, holdingTime, airChamber)
  .listDisplay(containerType, containerColor, containerMaterial, pH, preservative, temperature, holdingTime, airChamber)
  .displayId(
        "containerType.displayId:ContainerType", "' '",
        "containerColor.displayId:ContainerColor", "' '",
        "containerMaterial.displayId:ContainerMaterial", "' '",
        "pH.displayId:SamplePh", "'/'",
        "preservative.displayId:SamplePreservative", "'/'",
        "temperature.displayId:SampleTemperature", "'/'",
        "holdingTime.displayId:HoldingTime", "'/'",
        "airChamber.displayId:AirChamber", "'/'")
  .listTextSearch(comments)
{
    containerType: ref(ContainerType)
      .labels("Tipo")

    containerColor: ref(ContainerColor)
      .labels("Color")

    containerMaterial: ref(ContainerMaterial)
      .labels("Material")

    pH: ref(SamplePh)
      .labels("pH")

    preservative: ref(SamplePreservative)
      .labels("Preservante")

    temperature: ref(SampleTemperature)
      .labels("Temperatura")

    holdingTime: ref(HoldingTime)
      .labels("Holding time")

    airChamber: ref(AirChamber)
      .labels("Cámara de aire")

    comments: string
      .labels("Comentarios")
}

SamplePreparationMethod: entity
  .labels("Método de preparación de muestra", "Métodos de preparación de muestra")
  .displayId(name)
  .listTextSearch(name, obtainedSample, description)
{
    name: string
      .unique
      .labels("Nombre")

    obtainedSample: string
      .labels("Muestra obtenida")

    resultingMatrix: ref(Matrix)
      .labels("Matriz resultante")

    label: boolean
      .labels("Etiqueta")

    description: maybe(string)
      .labels("Descripción")
}

SpecIssuer: entity
  .labels("Emisor", "Emisores")
  .displayId(name)
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

Specification: entity
  .labels("Especificación", "Especificaciones")
  .displayId("specIssuer.name", minimumValue, maximumValue, quantitativeUnit, qualitativeUnit)
  .unique(specIssuer, minimumValue, maximumValue, quantitativeUnit, qualitativeUnit)
  .listTextSearch(description)
{
    specIssuer: ref(SpecIssuer)
      .labels("Emisor")

    determinations: set(ref(Determination))
      .labels("Determinaciones a las que aplica")

    description: maybe(string)
      .labels("Descripción")

    minimumValue: maybe(integer) #Decimal(40 10)
      .labels("Valor mínimo")

    maximumValue: maybe(integer) #Decimal(40 10)
      .labels("Valor máximo")

    quantitativeUnit: maybe(ref(QuantitativeUnit))
      .labels("Unidad")

    qualitativeUnit: maybe(string)
      .labels("Valor cualitativo")
}

Determination: entity
  .labels("Determinación", "Determinaciones")
  #.unique(name, matrix, analyticalMethod, inSitu)
  #.displayId($joinStr(name  $ifElse(inSitu " in situ" "") " (" matrix " / " analyticalMethod ")" ))
  .displayId("name.name", "matrix.displayId:Matrix")
{
  #
  # Determination
  #
  determination: group
    .labels("Determinación")
  {
    name: ref(DeterminationName)
      .labels("Nombre")

    matrix: ref(Matrix)
      .labels("Matriz")

    analyticalMethod: ref(AnalyticalMethod)
      .labels("Método analítico")

    samplePreparationMethods: maybe(set(ref(SamplePreparationMethod)))
      .labels("Métodos de preparación")

    inSitu: boolean
      .labels("In situ")

    ossPlausible: boolean
      .labels("Plausible de OOS")
  }

  #
  # Accreditations
  #
  accreditations: group
    .labels("Acreditaciones")
  {
    accreditations: maybe(set(ref(Accreditation)))
      .labels("Acreditaciones")
  }

  #
  # Instruments
  #
  instruments: group
    .labels("Sector")
  {
    sector: ref(Sector)
      .labels("Sector")

    equipmentTypes: maybe(set(ref(EquipmentType)))
      .labels("Tipos de equipo")
  }

  #
  # Sample
  #
  sample: group
    .labels("Muestra")
  {
    sampleMethod: ref(SampleMethod)
      .labels("Método de muestreo")

    samplePreservation: ref(SamplePreservation)
      .labels("Conservación de la muestra")

    nonAdditiveSampleGroup: ref(NonAdditiveSampleGroup)
      .labels("Grupo de muestras no aditivas")

    minimumQuantity: integer #Decimal(40 20)!
      .labels("Cantidad mínima")

    unit: ref(QuantitativeUnit)
      .labels("Unidad")
  }

  #
  # Preceding
  #
  preceding: group
    .labels("Determinaciones precedentes")
  {
    precedingDeterminations: maybe(set(PrecedingDetermination))
      #.unique(determination)
      .labels("Determinaciones precedentes")
  }

  #
  # Limits
  #
  limits: group
    .labels("Tipo de resultado")
  {
    resultValueIsQualitative: boolean
      .labels("Resultado cualitativo")

    defaultUnit : maybe(ref(QuantitativeUnit))
      .labels("Unidad por defecto")

    quantificationLimit: maybe(integer) # decimal(10, 4)
      .labels("Límite de cuantificación")

    detectionLimit: maybe(integer) # decimal(10, 4)
      .labels("Límite de detección")

    uncertainty: maybe(integer) # decimal(10, 4)
      .labels("Incertidumbre")
  }

  #
  # Price
  #
  price: group
    .labels("Precio")
  {
    price: maybe(DeterminationPrice)
      .labels("Precio")
  }
}

#################
# instruments.hk
#################

ExternalPerson: entity
  .labels("Persona externa", "Personas externas")
  .displayId(lastName, "', '", firstName)
  .listTextSearch(idNumber, firstName, lastName)
{
    idNumber: string
      .unique
      .labels("ID de persona", help="Identificador único de persona (DNI, Pasaporte, ...)")

    firstName: string
      .labels("Nombres", help="Nombres de la persona")

    lastName: string
      .labels("Apellidos", help="Apellidos de la persona")

    photo: maybe(file)
      #.unique(name)
      .labels("Foto", help="Foto de la persona")

    phones: string
      .labels("Teléfonos", help="Teléfonos")

    emails: set(string)
      .labels("Correo electrónico", help="Direcciones de correo electrónico de contacto")
      .validations("__EMAIL__")


    user: maybe(ref(User))
      .labels("Usuario frente al sistema", help="Usuario frente al sistema externo")
}

InstrumentType: entity
  .labels("Tipo de equipo/instrumento", "Tipos de equipo/instrumento")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre del tipo de equipo")

  description: maybe(string)
    .labels("Descripción", help="Descripción del tipo de equipo")
}

InstrumentBrand: entity
  .labels("Fabricante de equipos", "Fabricantes de equipos")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre del fabricante de equipos")

  description: maybe(string)
    .labels("Descripción", help="Descripción del fabricante de equipos")
}

InstrumentRevision: entity
  .labels("Revisión de equipo", "Revisiones de equipo")
  .displayId("preparedBy.displayId:Employee", "'/'", "reviewedBy.displayId:Employee", "'/'", "approvedBy.displayId:Employee")
{
  dateTime: dateTime
    .labels("Fecha", help="Tipo de intervención que aplica sobre el equipo")

  preparedBy: ref(Employee)
    .labels("Preparó", help="Persona que preparó la revisión del equipo")

  reviewedBy: ref(Employee)
    .labels("Revisó", help="Persona que revisó el equipo")

  approvedBy: ref(Employee)
    .labels("Aprobó", help="Persona que aprobó la revisión del equipo")
}

InstrumentInterventionType: entity
  .labels("Tipo de intervención", "Tipos de intervención")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre del tipo de intervención que se aplica a un equipo")

  description: maybe(string)
    .labels("Descripción", help="Descripción del tipo de intervención que se aplica a un equipo")
}

InterventionDocument: entity
  .labels("Documento de intervención", "Documentos de intervenciones")
  .displayId("document")
  .listTextSearch(description)
{
  document: file
    .labels("Documento", help="Documento de intervención")

  description: maybe(string)
    .labels("Descripción", help="Descripción del documento de intervención")
}

InstrumentIntervention: entity
  .labels("Intervención", "Intervenciones")
  .displayId("doneByEmployee.displayId:Employee")
  .listTextSearch(observations)
{
  dateTime: dateTime
    .labels("Fecha", help="Tipo de intervención que aplica sobre el equipo")

  doneByEmployee: ref(Employee)
    .labels("Realizó (usuario)", help="Usuario de sistema")

  doneByExternal: ref(ExternalPerson)
    .labels("Realizó (externo)", help="Personal externo")

  observations: string
    .labels("Observaciones", help="Observaciones pertinentes")

  meetsAcceptanceRequirements: boolean
    .labels("¿Cumple criterio de aceptación?", help="En caso de que aplique, indicar si la intervención cumple con los criterios de aceptación establecidos")

  documents: maybe(set(InterventionDocument))
    #.unique(name)
    .labels("Documentos", help="Adjunte aquí los registros de la intervención realizada en caso que aplique")
}

InstrumentInterventionModel: entity
  #.workflow(InstrumentInterventions)
  .labels("Modelo de intervenciones", "Modelos de intervenciones")
  .displayId("type.displayId:InstrumentInterventionType")
  .listDisplay(type, nextIntervention)
  .listTextSearch(description, procedure, responsiblePerson, acceptanceRequirements)
{
  type: ref(InstrumentInterventionType)
    .labels("Tipo de intervención", help="Tipo de intervención que aplica sobre el equipo")

  description: maybe(string)
    .labels("Descripción", help="Descripción del tipo de intervención que se aplica a un equipo")

  procedure: string
    .labels("Procedimiento que aplica", help="Procedimiento que dirige la intervención")

  responsiblePerson: string
    .labels("Responsable", help="Responsable de la intervención")

  acceptanceRequirements: string
    .labels("Criterio de aceptación", help="Descripción del criterio de aceptación que se aplica sobre la intervención")

  frequencyDays: integer
    .labels("Frecuencia de la intervención (días)", help="Indicar si la intervención en cuestión requiere control sobre su ejecución y periodo de validez")

  reportRequired: boolean
    .labels("¿Requiere reporte?", help="Frecuencia establecida para la intervención")

  interventions: maybe(set(InstrumentIntervention))
    .labels("Intervenciones", help="Intervenciones realizadas")

  nextIntervention: date # calc(sum('lastIntervention + 'interventionFrequency))
    .labels("Próxima intervención", help="Próxima intervención a realizar")
}

InstrumentEventType: entity
  .labels("Tipo de evento", "Tipos de evento")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre del tipo de evento que se aplica a un equipo")

  description: maybe(string)
    .labels("Descripción", help="Descripción del tipo de evento que se aplica a un equipo")
}

Currency: entity
  .labels("Moneda", "Monedas")
  .listTextSearch(name, code, description)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre de la moneda")

  code: string
    .unique
    .labels("Código", help="Código de la moneda")

  description: maybe(string)
    .labels("Descripción", help="Descripción del tipo de evento que se aplica a un equipo")
}


EventDocument: entity
  .labels("Documento de evento", "Documentos de eventos")
  .displayId("document")
  .listTextSearch(description)
{
  document: file
    .labels("Documento", help="Documento de evento")

  description: maybe(string)
    .labels("Descripción", help="Descripción del documento de intervención")
}


InstrumentEvent: entity
  .labels("Evento", "Eventos")
  .unique(__parent, type, dateTime)
  .displayId("type.displayId:InstrumentEventType", "' '", "dateTime")
  .listDisplay("type", "dateTime")
  .listTextSearch(description, observations)
{
  type: ref(InstrumentEventType)
    .labels("Tipo de evento", help="Tipo de evento que aplica sobre el equipo")

  dateTime: dateTime
    .labels("Fecha", help="Fecha en que se realizó el evento")

  description: maybe(string)
    .labels("Descripción", help="Descripción del tipo de intervención que se aplica a un equipo")

  procedure: string
    .labels("Procedimiento que aplica", help="Procedimiento que dirige la intervención")

  observations: string
    .labels("Observaciones", help="Observaciones pertinentes")

  documents: maybe(set(EventDocument))
    #.unique(name)
    .labels("Documentos", help="Adjunte aquí los registros del evento realizado en caso que aplique")

  doneByEmployee: maybe(ref(Employee))
    .labels("Realizó (usuario)", help="Usuario de sistema")

  doneByExternal: maybe(ref(ExternalPerson))
    .labels("Realizó (externo)", help="Personal externo")
}

UserManual: entity
  .labels("Manual de usuario", "Manuales de usuario")
  .displayId("document")
  .listTextSearch(description)
{
  document: file
    .labels("Manual", help="Manual de usuario")

  description: maybe(string)
    .labels("Descripción", help="Descripción del manual de usuario")
}

PurchaseDocument: entity
  .labels("Documento de compra", "Documentos de compra")
  .displayId("document")
  .listTextSearch(description)
{
  document: file
    .labels("Documento", help="Documento de compra")

  description: maybe(string)
    .labels("Descripción", help="Descripción del documento de compra")
}


Instrument: entity
  #.workflow(InstrumentUsage)
  #.workflow(InstrumentResponsible)
  .labels("Equipo", "Equipos")
  .displayId(ftiNumber, "'/'", "type.displayId:InstrumentType", "'/'", "brand.displayId:InstrumentBrand", "'/'", model )
  .listDisplay("ftiNumber", "type", "brand", "model")
  #.history
  .listTextSearch(ftiNumber, model, serialNumber, observations, seller, description)
{
  #
  # Main
  #
  main: group
    .labels("Datos Principales")
  {
    ftiNumber: string
      .unique
      .labels("FTI#", help="El número de FTI# es un código único de identificación que tiene cada equipo")

    type: ref(InstrumentType)
      .labels("Tipo", help="Indica q qué tipo pertenece el equipo")

    brand: ref(InstrumentBrand)
      .labels("Marca")

    model: string
      .labels("Modelo", help="Modelo del equipo")

    serialNumber: string
      .labels("Nº de serie", help="Número de serie del equipo")

    responsibleEmployees: maybe(set(ref(Employee)))
      .labels("Responsables", help="Personal asignado como responsable por el equipo")

    dependsOnInstruments: maybe(set(ref(Instrument)))
      .labels("Equipos de que depende", help="Equipo que debe encontrarse funcional para la operación de éste")

#    dependentInstruments: maybe(set(ref(Instrument)))
#      .labels("Equipos dependientes", help="Equipos que dependen de la funcionalidad de éste para poder ser utilizados")
#
#    associatedInstruments: maybe(set(ref(Instrument)))
#      .labels("Equipos asociados", help="Equipo asociado en relación de igualdad")

    site: ref(Laboratory)
      .labels("Emplazamiento", help="Laboratorio donde está ubicado el equipo")

    observations: maybe(string)
      .labels("Observaciones", help="Observaciones útiles sobre el equipo")
  }

  #
  # Detail
  #
  detail: group
    .labels("Detalle")
  {
    acquisitionDate: date
      .labels("Fecha de adquisición", help="Fecha aproximada de adquisición del equipo")

    responsibleSector: ref(Sector)
      .labels("Sector responsable", help="Sector al cual está asociado el equipo")

    isBpl: boolean
      .labels("Equipo BPL", help="Indica si el equipo se utiliza para ensayos que están dentro de la acreditación de Buenas Prácticas de Laboratorio")

    isIso17025: boolean
      .labels("Equipo ISO 17025", help="Indica si el equipo se utiliza para ensayos dentro de la acreditación de la ISO 17025")

    isCurrent: boolean #.calc('useState.id == "outOfService")
      .labels("Vigente", help="Indica si el equipo se encuentra fuera del sistema de manera permanente")

    workTemperature: string
      .labels("Temperatura de trabajo", help="Temperatura o rango de temperatura de uso de un medio isotermo")

    userManuals: maybe(set(UserManual))
      #.unique(userManuals.name)
      .labels("Manuales", help="Manual de operación y/o mantenimiento del equipo")

    operationProcedure: string
      .labels("Procedimiento de operación", help="Indica el procedimiento de operación del equipo")

    hasInsurance: boolean
      .labels("Seguro", help="Indica si el equipo se encuentra asegurado")

#    price: money # money::multiCurrency
    price: group .labels("Costo del equipo") {
#      price: money
      price: integer
        .labels("Precio", help="Valor")

      currency: ref(Currency)
        .labels("Moneda", help="Moneda")
    }

    purchaseDocuments: maybe(set(PurchaseDocument))
      #.unique(purchaseDocuments.name)
      .labels("Documentos relacionados a la compra", help="Documentación considerada relevante")

    seller: string
      .labels("Vendedor", help="Proveedor del equipo")
  }

  #
  # Interventions
  #
  interventions: group
    .labels("Intervenciones")
  {
    interventionModels: maybe(set(InstrumentInterventionModel))
      .labels("Intervenciones", help="Tipos de intervenciones a realizar en el equipo")

    description: maybe(string)
      .labels("Descripción", help="Descripción del tipo de intervención")
  }

  #
  # Audit
  #
  audit: group
    .labels("Control de cambios")
  {
#    audit: show<auditable.'InstrumentAudit>
#      .labels("Cambios en equipos", help="Control de los cambios realizados en el sistema para este equipo")
  }

  #
  # events
  #
  events: group
    .labels("Eventos")
  {
    events: maybe(set(InstrumentEvent))
      .labels("Eventos", help="Eventos realizados en el equipo")
  }
}

#################
# menu.hk
#################

MainMenu: menu
  .labels("Menú")
  {
  comercial: group
    .labels("Comercial")
    .icon("SupportAgent")
   {
    budget: item
      .labels("Presupuestos")
      .icon("PriceChange")
      .url("/contract/list")
      .permission("contract_list")

    billing: item
      .labels("Facturación")
      .icon("RequestQuote")
      .url("/contract/list")
      .permission("contract_list")

    publications: item
      .labels("Publicaciones")
      .icon("Science")
      .url("/sample/list")
      .permission("sample_list")

    observedSamples: item
      .labels("Observaciones")
      .icon("ReportProblem")
      .url("/sample/list")
      .permission("sample_list")

    contracts: item
      .labels("Contratos")
      .icon("PendingActions")
      .url("/contract/list")
      .permission("contract_list")

    analyst: item
      .labels("Analistas")
      .icon("Engineering")
      .url("/contractDeterminationItem/list")
      .permission("contractDeterminationItem_list")

    customer: item
      .labels("Clientes")
      .icon("Factory")
      .url("/customer/list")
      .permission("customer_list")

    customerGroup: item
      .labels("Grupo empresarial")
      .icon("Groups")
      .url("/customerGroup/list")
      .permission("customerGroup_list")

    businessUnit: item
      .labels("Unidad negocio")
      .icon("Storefront")
      .url("/businessUnit/list")
      .permission("businessUnit_list")

    fixedPackage: item
      .labels("Paquete fijo")
      .icon("ShoppingBag")
      .url("/fixedPackage/list")
      .permission("fixedPackage_list")

    flexiblePackage: item
      .labels("Paquete flexible")
      .icon("Percent")
      .url("/flexiblePackage/list")
      .permission("flexiblePackage_list")

    quantityPackage: item
      .labels("Paquete cantidad")
      .icon("Luggage")
      .url("/quantityPackage/list")
      .permission("quantityPackage_list")

    currencies: item
      .labels("Monedas")
      .icon("MonetizationOn")
      .url("/currency/list")
      .permission("currency_list")

   }

  sampleEntry: group
    .labels("Muestras")
    .icon("Science")
   {
    entry: item
      .labels("Ingreso")
      .icon("MeetingRoom")
      .url("/contract/list")
      .permission("contract_list")

    derivations: item
      .labels("Derivaciones")
      .icon("TurnRight")
      .url("/contract/list")
      .permission("contract_list")

    observations: item
      .labels("Observaciones")
      .icon("ReportProblem")
      .url("/contract/list")
      .permission("contract_list")

    queries: item
      .labels("Consultas")
      .icon("QueryStats")
      .url("/contract/list")
      .permission("contract_list")
   }

  analysts: group
    .labels("Analistas")
    .icon("Engineering")
   {
    dailyPanel: item
      .labels("Panel diario")
      .icon("ViewWeek")
      .url("/contract/list")
      .permission("contract_list")

    sampleDetail: item
      .labels("Detalle muestra")
      .icon("Science")
      .url("/contract/list")
      .permission("contract_list")
   }

  supervisors: group
    .labels("Supervisores")
    .icon("PsychologyAlt")
   {
    supervision: item
      .labels("Supervision")
      .icon("PsychologyAlt")
      .url("/contract/list")
      .permission("contract_list")

    queryInfo: item
      .labels("Información")
      .icon("QueryStats")
      .url("/contract/list")
      .permission("contract_list")
   }

  technicalDirection: group
    .labels("Dirección técnica")
    .icon("Psychology")
   {
    standBy: item
      .labels("Stand By")
      .icon("AccessAlarm")
      .url("/contract/list")
      .permission("contract_list")

    sign: item
      .labels("Firmar")
      .icon("Create")
      .url("/contract/list")
      .permission("contract_list")

    sampleDivision: item
      .labels("División de muetras")
      .icon("Science")
      .url("/contract/list")
      .permission("contract_list")
   }

  administration: group
    .labels("Administración")
    .icon("Approval")
   {
    billing: item
      .labels("Facturación")
      .icon("RequestQuote")
      .url("/contract/list")
      .permission("contract_list")
   }

  system0: divider
  system: divider
    .labels("sys", "Definiciones del sistema")

  organization: group
    .labels("Estructura")
    .icon("AccountTree")
   {
    areas: item
      .labels("Áreas")
      .icon("PieChartOutline")
      .url("/area/list")
      .permission("area_list")

    headquarters: item
      .labels("Sedes")
      .icon("Apartment")
      .url("/headquarter/list")
      .permission("headquarters_list")

    sectors: item
      .labels("Sectores")
      .icon("HouseSiding")
      .url("/sector/list")
      .permission("sector_list")

    laboratories: item
      .labels("Laboratorios")
      .icon("Biotech")
      .url("/laboratory/list")
      .permission("laboratory_list")

    employees: item
      .labels("Empleados")
      .icon("PersonPin")
      .url("/employee/list")
      .permission("employee_list")

    isoPositions: item
      .labels("Puestos ISO")
      .icon("#ISO")
      .url("/isoPosition/list")
      .permission("isoPosition_list")

    bplPositions: item
      .labels("Puestos BPL")
      .icon("#BPL")
      .url("/bplPosition/list")
      .permission("bplPosition_list")
  }

  sysUsers: group
    .labels("Usuarios")
    .icon("People")
   {
    users: item
      .labels("Usuarios")
      .icon("PersonOutline")
      .url("/user/list")
      .permission("user_list")

    roles: item
      .labels("Roles")
      .icon("Engineering")
      .url("/role/list")
      .permission("role_list")

    permissions: item
      .labels("Permisos")
      .icon("VpnKey")
      .url("/permission/list")
      .permission("permission_list")
  }

  sysDeterminations: group
    .labels("Determinaciones")
    .icon("Biotech")
   {
    determinationName: item
      .labels("Nombres")
      .icon("Abc")
      .url("/determinationName/list")
      .permission("determinationName_list")

    determination: item
      .labels("Determinaciones")
      .icon("Equalizer")
      .url("/determination/list")
      .permission("determination_list")

    specifications: item
      .labels("Especificaciones")
      .icon("ListAlt")
      .url("/specification/list")
      .permission("specification_list")

    specIssuer: item
      .labels("Emisores")
      .icon("ListAlt")
      .url("/specIssuer/list")
      .permission("specIssuer_list")

    analyticalMethod: item
      .labels("Método analítico")
      .icon("FormatListNumbered")
      .url("/analyticalMethod/list")
      .permission("analyticalMethod_list")

    accreditation: item
      .labels("Acreditaciones")
      .icon("Verified")
      .url("/accreditation/list")
      .permission("accreditation_list")

  }

  sysSamples: group
    .labels("Muestras")
    .icon("Science")
   {
    sampleMethod: item
      .labels("Método de muestreo")
      .icon("Colorize")
      .url("/sampleMethod/list")
      .permission("sampleMethod_list")

    samplePh: item
      .labels("pH")
      .icon("#pH")
      .url("/samplePh/list")
      .permission("samplePh_list")

    samplePreservative: item
      .labels("Preservantes")
      .icon("Co2")
      .url("/samplePreservative/list")
      .permission("samplePreservative_list")

    sampleAirChamber: item
      .labels("Cámaras de Aire")
      .icon("LocalDrink")
      .url("/airChamber/list")
      .permission("airChamber_list")

    sampleHoldingTime: item
      .labels("Holding Times")
      .icon("AccessTime")
      .url("/holdingTime/list")
      .permission("holdingTime_list")

    samplePreparation: item
      .labels("Preparación")
      .icon("FormatColorFill")
      .url("/samplePreparationMethod/list")
      .permission("samplePreparationMethod_list")

    samplePreservation: item
      .labels("Preservación")
      .icon("OilBarrel")
      .url("/samplePreservation/list")
      .permission("samplePreservation_list")

    sampleTemperature: item
      .labels("Temperatura")
      .icon("Thermostat")
      .url("/sampleTemperature/list")
      .permission("sampleTemperature_list")

    containerTypes: item
      .labels("Contenedores")
      .icon("Liquor")
      .url("/containerType/list")
      .permission("containerType_list")

    containerColors: item
      .labels("Colores")
      .icon("ColorLens")
      .url("/containerColor/list")
      .permission("containerColor_list")

    containerMaterials: item
      .labels("Materiales")
      .icon("Fullscreen")
      .url("/containerMaterial/list")
      .permission("containerMaterial_list")

  }

  sysMatrix: group
    .labels("Matrices")
    .icon("GridOn")
   {
    matrix: item
      .labels("Matriz")
      .icon("Grid4x4")
      .url("/matrix/list")
      .permission("matrix_list")

    matrixCategory: item
      .labels("Categoría")
      .icon("Category")
      .url("/matrixCategory/list")
      .permission("matrixCategory_list")

    formulationType: item
      .labels("Tipos formulación")
      .icon("PlusOne")
      .url("/formulationType/list")
      .permission("formulationType_list")

    nonAdditiveSampleGroup: item
      .labels("Grupo no aditivo")
      .icon("Exposure")
      .url("/nonAdditiveSampleGroup/list")
      .permission("nonAdditiveSampleGroup_list")
  }

  sysUnits: group
    .labels("Unidades")
    .icon("TimesOneMobiledata")
   {
    quantitativeUnit: item
      .labels("Unidades")
      .icon("##")
      .url("/quantitativeUnit/list")
      .permission("quantitativeUnit_list")

   }

  instruments: group
    .labels("Equipos")
    .icon("Construction")
   {
    instrument: item
      .labels("Equipos")
      .icon("PrecisionManufacturing")
      .url("/instrument/list")
      .permission("instrument_list")

    instrumentTypes: item
      .labels("Tipo de Equipos")
      .icon("Blender")
      .url("/instrumentType/list")
      .permission("instrumentType_list")

    instrumentBrands: item
      .labels("Marca de Equipos")
      .icon("Apple")
      .url("/instrumentBrand/list")
      .permission("instrumentBrand_list")

    interventionTypes: item
      .labels("Tipos de Intervención")
      .icon("Healing")
      .url("/instrumentInterventionType/list")
      .permission("instrumentInterventionType_list")

    eventTypes: item
      .labels("Tipos de evento")
      .icon("EventNote")
      .url("/instrumentEventType/list")
      .permission("instrumentEventType_list")

    relatedInstrument: item
      .labels("Equipos relacionados")
      .icon("CompareArrows")
      .url("/instrument/list")
      .permission("instrument_list")

    queryInstrument: item
      .labels("Consultas")
      .icon("QueryStats")
      .url("/instrument/list")
      .permission("instrument_list")
   }
}

#################
# organization.hk
#################

Area: entity
  .labels("Área", "Áreas")
  .displayId(name)
  .listTextSearch(name)
{
  name: string
    .unique
    .labels("Nombre")
}

Headquarter: entity
  .labels("Sede", "Sedes")
  .displayId(name)
  .listTextSearch(name)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre de la sede")
}

PositionType: entity
  .labels("Tipo de Puesto", "Tipos de Puesto")
  .displayId(name)
  .listTextSearch(name)
{
  name: string
    .unique
    .labels("Nombre", help="Nombre de la sede")
}

Sector: entity
  .labels("Sector", "Sectores")
  .displayId(name, "' ('", "area.displayId:Area", "')'")
  .listDisplay("name", "area")
  .listTextSearch(name)
{
  name: string
    .unique
    .labels("Nombre")

  area: ref(Area)
    .labels("Área")
}

Laboratory: entity
  .labels("Laboratorio", "Laboratorios")
  .displayId(name)
  .listDisplay("name", "headquarter", "sectorsThatUseIt")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")

  headquarter: ref(Headquarter)
    .labels("Sede", help="Locación del laboratorio")

  sectorsThatUseIt: maybe(set(ref(Sector)))
    .labels("Sectores que lo utilizan")
}

Organization: entity
  .labels("Organismo/Empresa", "Organismos/Empresas")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

BusinessUnit: entity
  .labels("Unidad de negocio", "Unidades de negocio")
  .displayId(code, "' '", name)
  .listTextSearch(code, name, description)
{
  code: string
    .unique
    #.max(4)
    .labels("Siglas", help="Siglas de la unidad de negocio (3 o 4 letras)")

  name: string
    .unique
    .labels("Nombre", help="Nombre de la unidad de negocio")

  description: maybe(string)
    .labels("Descripción", help="Característica principal de la unidad de negocio")
}

IsoPosition: entity
  .labels("Puesto ISO", "Puestos ISO")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

BplPosition: entity
  .labels("Puesto BPL", "Puestos BPL")
  .listTextSearch(name, description)
{
  name: string
    .unique
    .labels("Nombre")

  description: maybe(string)
    .labels("Descripción")
}

IsoFunction: entity
  .labels("Función ISO", "Funciones ISO")
  .displayId("position.displayId:IsoPosition")
  .unique(__parent, position, sector)
  .listDisplay(position, sector, headquarters, holderOrSubstitute)
{
  position: ref(IsoPosition)
    .labels("Puesto ISO")

  headquarters: set(ref(Headquarter))
    .labels("Sedes", help="Sedes donde aplica la función")

  sector: ref(Sector)
    .labels("Sector", help="Sector donde ejerce la función (* si es director de Área)")

  holderOrSubstitute: ref(PositionType)
    .labels("Tipo de puesto", help="Indica si es titular o suplente de la función ISO")
}

BplFunction: entity
  .labels("Función BPL", "Funciones BPL")
  .displayId("position.displayId:BplPosition")
  .unique(__parent, position)
  .listDisplay(position, headquarters)
{
  position: ref(BplPosition)
    .labels("Puesto BPL")

  headquarters: set(ref(Headquarter))
    .labels("Sedes", help="Sedes donde aplica la función")
}

Employee: entity
  .labels("Empleado", "Empleados")
#  .history
  .displayId(lastName, "', '", firstName)
  .listTextSearch(firstName, lastName)
{
  main: group
    .labels("Datos principales")
  {
    firstName: string
      .labels("Nombres", help="Nombres del empleado")

    lastName: string
      .labels("Apellidos", help="Apellidos del empleado")

    photo: maybe(file)
      .labels("Foto", help="Foto del empleado")

    initials: string
      .labels("Iniciales", help="Iniciales del usuario en el sistema")
  }

  #
  # Contact
  #
  contact: group
    .labels("Datos de contacto")
  {
    phones: string
      .labels("Teléfonos", help="Teléfonos")

    emails: set(string)
      .labels("Correo electrónico", help="Direcciones de correo electrónico")
      .validations("__EMAIL__")
  }

  #
  # System
  #
  system: group
    .labels("Sistema")
  {
    admissionDate: date
      .labels("Fecha de ingreso", help="Fecha de ingreso a la empresa")

    terminationDate: maybe(date)
      .labels("Fecha de desvinculación", help="Fecha en que el empleado se desvincula de la empresa")

    user: maybe(ref(User))
      .unique
      .labels("Usuario", help="Usuario frente al sistema")
  }

  #
  # Functions
  #
  iso: group
    .labels("Funciones")
  {
    isoFunctions: maybe(set(IsoFunction))
      .labels("Funciones ISO")
    bplFunctions: maybe(set(BplFunction))
      .labels("Funciones BPL")
  }
}

###################
# packages.hk
###################

FixedSubPackage: entity
  .labels("Sub paquete precio fijo", "Sub paquetes precio fijo")
  # @unique(super package)
  .listTextSearch(name)
{
    name: string
      .labels("Nombre")

    excluded: maybe(set(ref(Determination)))
      .labels ("Excluídas por dafault")
}

FixedPackage: entity
  .labels("Paquete precio fijo", "Paquetes precio fijo")
  #.history
  .listTextSearch(name)
{
    name: string
      .unique
      .labels("Nombre")

    determinations: maybe(set(ref(Determination)))
      .labels("Determinaciones")

    subPackages: maybe(set(FixedSubPackage))
      .labels("Paquetes")

    price: integer # decimal(18, 2)
       .labels("Precio")
}

FlexibleSubPackage: entity
  .labels("Sub paquete precio flexible", "Sub paquetes precio flexible")
  # @unique(super package)
  .listTextSearch(name)
{
    name: string
      .labels("Nombre")

    excluded: maybe(set(ref(Determination)))
      .labels ("Excluídas por dafault")
}

FlexiblePackage: entity
  .labels("Paquete precio flexible", "Paquetes precio flexibles")
  #.history
  .listTextSearch(name)
{
    name: string
      .unique
      .labels("Nombre")

    determinations: maybe(set(ref(Determination)))
      .labels("Determinaciones")

    subPackages: maybe(set(FlexibleSubPackage))
     .labels("Paquetes")

    discount: integer # decimal(10, 4)
      .labels("Descuento")

    weightedPriceCut: integer # decimal(10, 4)
      .labels("% Corte precio ponderado")

    noCostDeterminations: maybe(set(ref(Determination)))
      .labels("Determinaciones sin costo")
}

QuantitySubPackage: entity
  .labels("Sub paquete por cantidad", "Sub paquetes por cantidad")
  # @unique(super package)
  .listTextSearch(name)
{
    name: string
      .labels("Nombre")

    excluded: maybe(set(ref(Determination)))
      .labels ("Excluídas por dafault")
}

QuantityPackage: entity
  .labels("Paquete por cantidades", "Paquetes por cantidades")
  .listTextSearch(name)
{
    name: string
      .unique
      .labels("Nombre")

    determinations: maybe(set(ref(Determination)))
      .labels("Determinaciones")

    subPackages: maybe(set(ref(QuantitySubPackage)))
     .labels("Paquetes")

    quantityDiscounts: maybe(set(QuantityDiscount))
      .labels("Descuentos por cantidad")
}

QuantityDiscount: entity
  .labels("Descuento por cantidad", "Descuentos por cantidad")
  #@unique(super quantity)
  .displayId(id)
{
    quantity: integer
      .labels("Cantidad")

    discount: integer # decimal(10, 4)
      .labels("Descuento")
}

#################
# users.hk
#################

User: entity
  .userEntity
  .labels("Usuario", "Usuarios")
  .listDisplay("email", "name", "active")
  .listAvoid("profile")
  .createAvoid("profile")
  .listTextSearch(email, name)
{
  main: group.labels("Datos principales", "El usuario podrá ingresar al sistema con su email mientras esté activo") {
    email: userEmail
      .unique
      .labels("Email")

    password: userPassword

    name: string
      .labels("Nombre")

    active: userActive
      .labels("¿Activo?")
  }

  details: group.labels("Detalle") {
    profile: maybe(json)
      .labels("Perfil")

    roles: maybe(set(ref(Role)))
      .labels("Roles")
  }
}

Role: entity
  .roleEntity
  .labels("Role", "Roles")
  .listDisplay("name")
  .displayId(name)
  .listTextSearch(name)
{
  name: string
    .unique
    .labels("Nombre")

  permissions: maybe(set(ref(Permission)))
    .labels("Permisos")
}

Permission: entity
  .labels("Permiso", "Permisos")
  .listTextSearch(name)
  .displayId(name)
{
  name: string
    .unique
    .labels("Nombre")
}


name: Deploy

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de despliegue'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      projects:
        description: 'Proyectos específicos a desplegar (separados por comas, dejar en blanco para detectar automáticamente)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

jobs:
  detect-affected:
    name: Detect Affected Projects
    runs-on: ubuntu-latest
    outputs:
      affected_projects: ${{ steps.set-affected.outputs.affected_projects }}
      deploy_env: ${{ steps.set-env.outputs.deploy_env }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy_env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "deploy_env=production" >> $GITHUB_OUTPUT
          else
            echo "deploy_env=staging" >> $GITHUB_OUTPUT
          fi

      - name: Determine affected projects
        id: set-affected
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.projects }}" != "" ]]; then
            echo "affected_projects=${{ github.event.inputs.projects }}" >> $GITHUB_OUTPUT
          else
            # Detectar automáticamente los proyectos afectados
            AFFECTED=$(npx nx affected:apps --plain)
            if [[ -z "$AFFECTED" ]]; then
              echo "No hay proyectos afectados"
              echo "affected_projects=" >> $GITHUB_OUTPUT
            else
              echo "Proyectos afectados: $AFFECTED"
              echo "affected_projects=$AFFECTED" >> $GITHUB_OUTPUT
            fi
          fi

  build-and-push:
    name: Build and Push Docker Images
    needs: detect-affected
    if: needs.detect-affected.outputs.affected_projects != ''
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(format('[{0}]', needs.detect-affected.outputs.affected_projects)) }}
    env:
      DOCKER_BUILDKIT: 1
      DEPLOY_ENV: ${{ needs.detect-affected.outputs.deploy_env }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract project and app name
        id: extract-names
        run: |
          PROJECT_PATH=${{ matrix.project }}
          PROJECT_NAME=$(echo $PROJECT_PATH | cut -d'/' -f1)
          APP_NAME=$(echo $PROJECT_PATH | cut -d'/' -f2)
          echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Extrayendo nombres: Proyecto=$PROJECT_NAME, App=$APP_NAME"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ steps.extract-names.outputs.project_name }}-${{ steps.extract-names.outputs.app_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/${{ steps.extract-names.outputs.project_name }}/${{ steps.extract-names.outputs.app_name }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=${{ env.DEPLOY_ENV }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Environment
    needs: [detect-affected, build-and-push]
    if: needs.detect-affected.outputs.affected_projects != ''
    runs-on: ubuntu-latest
    environment: ${{ needs.detect-affected.outputs.deploy_env }}
    env:
      DEPLOY_ENV: ${{ needs.detect-affected.outputs.deploy_env }}
    steps:
      - uses: actions/checkout@v3

      # Desplegamos mediante SSH a los servidores
      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install SSH key and Add Host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env file
        run: |
          echo "Creando archivo .env para ${{ env.DEPLOY_ENV }}"

          # Variables comunes
          echo "NODE_ENV=${{ env.DEPLOY_ENV }}" > .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env

          # Base de datos
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

          # RabbitMQ
          echo "RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}" >> .env
          echo "RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}" >> .env
          echo "RABBITMQ_HOST=${{ secrets.RABBITMQ_HOST }}" >> .env
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}" >> .env

          # Otras variables específicas
          echo "API_URL=${{ secrets.API_URL }}" >> .env

      - name: Copy docker-compose and .env to server
        run: |
          # Creamos un archivo de config para cada proyecto afectado
          for project in $(echo "${{ needs.detect-affected.outputs.affected_projects }}" | tr ',' '\n'); do
            PROJECT_NAME=$(echo $project | cut -d'/' -f1)

            # Copiamos los archivos al servidor
            scp -r apps/$PROJECT_NAME/docker-compose.${{ env.DEPLOY_ENV }}.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/docker-compose.yml
            scp .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/.env
          done

      - name: Pull and deploy on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            # Cambiamos al directorio del proyecto
            cd ~/

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull y despliegue de las imágenes
            docker-compose pull
            docker-compose up -d --remove-orphans

            # Limpieza de imágenes antiguas
            docker image prune -af
          "

      - name: Deployment summary
        if: always()
        run: |
          echo "### Resumen de Despliegue 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Detalle | Valor |" >> $GITHUB_STEP_SUMMARY
          echo "| ------- | ----- |" >> $GITHUB_STEP_SUMMARY
          echo "| Ambiente | ${{ env.DEPLOY_ENV }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Proyectos desplegados | ${{ needs.detect-affected.outputs.affected_projects }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Servidor | ${{ secrets.SSH_HOST }} |" >> $GITHUB_STEP_SUMMARY

name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      NX_SKIP_NX_CACHE: "true"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps

      # Fix Jest configurations by modifying them directly
      - name: Fix Jest configurations for SWC compatibility
        run: |
          for config in $(find . -name "jest.config.ts"); do
            echo "Fixing $config"
            # Create a simpler jest.config.js alongside each jest.config.ts
            cat > $(dirname $config)/jest.config.js << 'EOL'
            module.exports = {
              preset: 'ts-jest',
              testEnvironment: 'node',
              transform: {
                '^.+\\.[tj]s$': 'ts-jest'
              },
              moduleFileExtensions: ['ts', 'js', 'html'],
              coverageDirectory: '../../coverage/$(dirname $config)'
            };
            EOL
          done

      # ELIMINACIÃ“N COMPLETA de los plugins locales para CI
      - name: Remove local plugins for CI
        run: |
          node -e "const fs = require('fs'); const config = JSON.parse(fs.readFileSync('nx.json', 'utf8')); config.plugins = config.plugins.filter(p => !p.plugin || (p.plugin !== './dist/tools/create-worker' && p.plugin !== './dist/tools/haijin')); fs.writeFileSync('nx.json', JSON.stringify(config, null, 2));"
          cat nx.json

      - uses: nrwl/nx-set-shas@v4

      # Run nx affected with --skip-nx-cache to avoid any caching issues
      - name: Run affected tasks
        run: |
          # Use the JS config files instead of TS
          export NX_JEST_TESTFILE_PATTERN="**/*.spec.{js,ts}"
          npx nx affected -t lint build --verbose
          npx nx affected -t test --configuration=ci --verbose

      # Compilar y probar los plugins por separado
      - name: Build and test create-worker plugin
        run: |
          cd tools/create-worker
          npx tsc -p tsconfig.json
          npx jest --config=jest.config.js

      - name: Build and test haijin plugin
        if: ${{ always() }}  # Ejecutar incluso si create-worker falla
        run: |
          cd tools/haijin
          npx tsc -p tsconfig.json
          npx jest --config=jest.config.js

name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      NX_SKIP_NX_CACHE: "true"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps

      # Create Jest preset file to ensure ts-jest is used
      - name: Setup Jest with ts-jest
        run: |
          echo 'module.exports = {
            testMatch: ["**/+(*.)+(spec|test).+(ts|js)?(x)"],
            transform: {
              "^.+\\.(ts|js|html)$": "ts-jest"
            },
            resolver: "@nx/jest/plugins/resolver",
            moduleFileExtensions: ["ts", "js", "html"],
            coverageReporters: ["html"]
          };' > jest.preset.js

      # ELIMINACIÃ“N COMPLETA de los plugins locales para CI
      - name: Remove local plugins for CI
        run: |
          node -e "const fs = require('fs'); const config = JSON.parse(fs.readFileSync('nx.json', 'utf8')); config.plugins = config.plugins.filter(p => !p.plugin || (p.plugin !== './dist/tools/create-worker' && p.plugin !== './dist/tools/haijin')); fs.writeFileSync('nx.json', JSON.stringify(config, null, 2));"
          cat nx.json

      - uses: nrwl/nx-set-shas@v4

      # Run lint and build first
      - run: npx nx affected -t lint build --verbose

      # Run tests separately with ts-jest
      - run: npx nx affected -t test --verbose

      # Compile and test plugins separately
      - name: Build and test create-worker plugin
        run: |
          cd tools/create-worker
          npx tsc -p tsconfig.json
          npx jest

      - name: Build and test haijin plugin
        if: ${{ always() }}
        run: |
          cd tools/haijin
          npx tsc -p tsconfig.json
          npx jest

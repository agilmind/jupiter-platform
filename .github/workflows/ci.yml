name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    env:
      NX_SKIP_NX_CACHE: "true"  # Agregamos esta variable de entorno
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - run: npm ci --legacy-peer-deps

      # Fix SWC/Jest compatibility issues
      - name: Fix SWC/Jest compatibility issues
        run: |
          # Create a Jest transformer that uses Babel instead of SWC for CI
          cat > jest-transformer.js << 'EOL'
          const babelJest = require('babel-jest').default;

          module.exports = babelJest.createTransformer({
            presets: [
              ['@babel/preset-env', { targets: { node: 'current' } }],
              '@babel/preset-typescript',
            ],
          });
          EOL

          # Install necessary Babel dependencies
          npm install --save-dev babel-jest @babel/core @babel/preset-env @babel/preset-typescript

          # Update Jest configs to use Babel transformer in CI
          for config in $(find . -name "jest.config.ts"); do
            echo "Fixing $config"
            # Create a CI-specific Jest config that uses Babel instead of SWC
            cat > $(dirname $config)/jest.ci-config.js << 'EOL'
            module.exports = {
              transform: {
                '^.+\\.[tj]sx?$': '<rootDir>/../../jest-transformer.js'
              },
            };
            EOL
          done

      # ELIMINACIÃ“N COMPLETA de los plugins locales para CI
      - name: Remove local plugins for CI
        run: |
          node -e "const fs = require('fs'); const config = JSON.parse(fs.readFileSync('nx.json', 'utf8')); config.plugins = config.plugins.filter(p => !p.plugin || (p.plugin !== './dist/tools/create-worker' && p.plugin !== './dist/tools/haijin')); fs.writeFileSync('nx.json', JSON.stringify(config, null, 2));"
          cat nx.json

      - uses: nrwl/nx-set-shas@v4

      # Run with NX_JEST_EXTRA_CONFIG for all Jest operations
      - name: Run affected tasks with Babel transformer for Jest
        run: |
          NX_JEST_EXTRA_CONFIG=jest.ci-config.js npx nx affected -t lint test build --verbose

      # Compilar y probar los plugins por separado
      - name: Build and test create-worker plugin
        run: |
          cd tools/create-worker
          npx tsc -p tsconfig.json
          NX_JEST_EXTRA_CONFIG=jest.ci-config.js npx jest

      - name: Build and test haijin plugin
        if: ${{ always() }}  # Ejecutar incluso si create-worker falla
        run: |
          cd tools/haijin
          npx tsc -p tsconfig.json
          NX_JEST_EXTRA_CONFIG=jest.ci-config.js npx jest

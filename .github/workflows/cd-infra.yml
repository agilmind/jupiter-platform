name: Deploy VPS Infrastructure Stack (Manual)

on:
  # Permite la ejecución manual desde la pestaña Actions
  workflow_dispatch:
    inputs:
      infra_config_path:
        description: 'Workspace path to infra config'
        required: true
        default: 'infra/main' # Directorio por defecto donde genera vps:create
      target_host_secret:
        description: 'Name of GitHub secret containing VPS HOST/IP'
        required: true
        default: 'VPS_INFRA_HOST'
      target_user_secret:
        description: 'Name of GitHub secret containing VPS SSH USER'
        required: true
        default: 'VPS_INFRA_USER'
      target_key_secret:
        description: 'Name of GitHub secret containing VPS SSH PRIVATE KEY'
        required: true
        default: 'VPS_INFRA_KEY'
      target_deploy_path:
         description: 'Absolute path on VPS to deploy infra files'
         required: true
         default: '/home/deploy/infra' # Asume /home/deploy/infra

jobs:
  deploy-infra:
    name: Deploy Infrastructure to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          # Usar nombre del secret pasado como input
          ssh-private-key: ${{ secrets[github.event.inputs.target_key_secret] }}

      - name: Add VPS Host to Known Hosts
        run: |
          VPS_HOST="${{ secrets[github.event.inputs.target_host_secret] }}"
          if [ -z "$VPS_HOST" ]; then echo "Error: Host secret missing." >&2; exit 1; fi
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "Added $VPS_HOST to known_hosts"

      - name: Install rsync (on runner)
        run: sudo apt-get update && sudo apt-get install -y rsync

      - name: Sync Infrastructure Files via Rsync
        run: |
          VPS_HOST="${{ secrets[github.event.inputs.target_host_secret] }}"
          VPS_USER="${{ secrets[github.event.inputs.target_user_secret] || 'deploy' }}"
          # --- USAR INPUT PARA ORIGEN, DESTINO FIJO ---
          SOURCE_DIR="./${{ github.event.inputs.infra_config_path }}/" # Ej: ./infra/hostinger/
          TARGET_DIR="/home/${VPS_USER}/infra/" # <-- DESTINO FIJO

          if [ ! -d "$SOURCE_DIR" ]; then echo "Error: Source directory ${SOURCE_DIR} not found in repo." >&2; exit 1; fi

          echo "Syncing ${SOURCE_DIR} to ${VPS_USER}@${VPS_HOST}:${TARGET_DIR}"
          # Excluir .env y .gitignore
          rsync -avz --delete --exclude='.env' --exclude='.gitignore' \
            "${SOURCE_DIR}" \
            "${VPS_USER}@${VPS_HOST}:${TARGET_DIR}" \
            || { echo "Rsync failed!"; exit 1; }
          echo "Infrastructure files synced successfully to ${TARGET_DIR}"

      - name: Deploy Infrastructure Stack via Docker Compose on VPS
        run: |
          VPS_HOST="${{ secrets[github.event.inputs.target_host_secret] }}"
          VPS_USER="${{ secrets[github.event.inputs.target_user_secret] || 'deploy' }}"
          # --- USAR DESTINO FIJO ---
          INFRA_DIR="/home/${VPS_USER}/infra/" # <-- DESTINO FIJO

          echo "Executing docker compose up on ${VPS_USER}@${VPS_HOST} in ${INFRA_DIR}"
          ssh "${VPS_USER}@${VPS_HOST}" << EOF
            set -e
            echo "[Remote] Changing directory to ${INFRA_DIR}"
            cd "${INFRA_DIR}" || { echo "[Remote] Failed cd to ${INFRA_DIR}"; exit 1; }
            # ... (Verificación .env como antes) ...
            if [ ! -f ".env" ] && [ -f ".env.template" ]; then echo "[Remote] ERROR: .env missing!" >&2; exit 1; fi
            echo "[Remote] Running docker compose pull..."
            docker compose -f docker-compose-infra.yml pull
            echo "[Remote] Running docker compose up..."
            docker compose -f docker-compose-infra.yml up -d --remove-orphans
            COMPOSE_EXIT_CODE=$?
            echo "[Remote] Docker Compose finished with exit code $COMPOSE_EXIT_CODE."
            exit $COMPOSE_EXIT_CODE
          EOF
          SSH_EXIT_CODE=$?
          if [ $SSH_EXIT_CODE -ne 0 ]; then echo "Remote compose execution failed!"; exit $SSH_EXIT_CODE; fi
          echo "Infrastructure stack deployed/updated successfully."

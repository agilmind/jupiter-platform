name: CI - Build & Test Jupiter Platform Images

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allows manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository }}/ # Formato owner/repo/

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        app: [app-server, web-app, worker-sample]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22' # Or your project's required version
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      # Preparar etiquetas Docker dinámicamente
      - name: Prepare tags
        id: docker_meta
        # Genera las etiquetas basadas en el evento que disparó el workflow
        run: |
          IMAGE_BASE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}${{ matrix.app }}"
          # 1. Siempre añade la etiqueta con el SHA corto
          TAGS="${IMAGE_BASE_NAME}:sha-${{ steps.vars.outputs.sha_short }}"
          # 2. Si es un push de tag Git, añade el nombre del tag Git
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            GIT_TAG=${{ github.ref#refs/tags/ }}
            TAGS="${TAGS}\n${IMAGE_BASE_NAME}:${GIT_TAG}"
          # 3. Si es un push a la rama main, añade 'latest'
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            TAGS="${TAGS}\n${IMAGE_BASE_NAME}:latest"
          fi
          # Multiline string output para el siguiente paso
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags:\n${TAGS}" # Log para verificar

      - name: Build and push ${{ matrix.app }}
        uses: docker/build-push-action@v6
        with:
          context: .
          # La ruta del Dockerfile sigue usando el nombre corto del directorio
          file: apps/jupiter/${{ matrix.app }}/Dockerfile
          push: true
          # Usa la salida del paso anterior que contiene todas las etiquetas generadas
          tags: ${{ steps.docker_meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

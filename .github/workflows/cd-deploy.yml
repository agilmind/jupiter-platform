name: CD Deploy VPS
'on':
  push:
    branches:
      - main
jobs:
  determine-affected:
    name: Determine Affected VPS Projects
    runs-on: ubuntu-latest
    outputs:
      affected_matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_affected: ${{ steps.set-matrix.outputs.has_affected }}
    steps:
      - name: Checkout Repository (Fetch Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Clear Nx Cache
        run: rm -rf node_modules/.cache/nx
      - name: Derive Appropriate SHAs for Nx Affected
        uses: nrwl/nx-set-shas@v4
        with: {}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Install Dependencies
        run: npm ci
      - name: Install jq (for JSON processing)
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Calculate Affected VPS Projects
        id: set-matrix
        run: |
          #!/bin/bash
          # ==============================================================================
          # Script para GitHub Actions: Calcula Proyectos Afectados y Genera Matriz (v4 - Usa affected --plain)
          # ==============================================================================
          set -euo pipefail

          echo "[calculate-affected.sh] Calculating affected projects with target 'deploy'..."
          echo "[calculate-affected.sh] Base SHA: $NX_BASE | Head SHA: $NX_HEAD"

          # --- Usar nx affected --plain ---
          echo "[calculate-affected.sh] Running nx affected --plain command..."
          AFFECTED_OUTPUT=""
          NX_EXIT_CODE=0
          # --- AÑADIR --verbose PARA MÁS DETALLES ---
          AFFECTED_OUTPUT=$(npx nx affected --target=deploy --base=$NX_BASE --head=$NX_HEAD --plain --exclude=tag:type:other-app --verbose || true)
          NX_EXIT_CODE=$?
          # --- FIN CAMBIO ---

          echo "[calculate-affected.sh] nx affected command finished. Exit Code: $NX_EXIT_CODE" # Informative
          echo "[calculate-affected.sh] Plain output from nx affected (Verbose):"
          echo "--------------------- BEGIN PLAIN OUTPUT ---------------------"
          echo "$AFFECTED_OUTPUT"
          echo "---------------------- END PLAIN OUTPUT ----------------------"

          # --- Procesar salida de texto a JSON Array ---
          AFFECTED_JSON="[]" # Default
          if [ -n "$AFFECTED_OUTPUT" ] && \
             ! echo "$AFFECTED_OUTPUT" | grep -q "NX   No projects" && \
             ! echo "$AFFECTED_OUTPUT" | grep -q "NX   No tasks"; then
              echo "[calculate-affected.sh] Processing affected project list from plain output..."
              AFFECTED_JSON=$(echo "$AFFECTED_OUTPUT" | sed 's/ *$//' | jq -R . | jq -sc .)
               if ! echo "$AFFECTED_JSON" | jq -e 'type=="array"' > /dev/null 2>&1; then
                  echo "[calculate-affected.sh] WARNING: Failed to create valid JSON array from plain output using jq. Output was logged above."
                  AFFECTED_JSON="[]"
              else
                   echo "[calculate-affected.sh] Generated JSON Array: $AFFECTED_JSON"
               fi
          else
              echo "[calculate-affected.sh] No projects found in output or output indicates none affected. Setting empty list."
              AFFECTED_JSON="[]"
          fi
          export AFFECTED_JSON

          # --- Node script para generar matriz (sin cambios) ---
          MATRIX_OBJECT=$(node -e " /* ... Mismo código Node ... */ " || echo '{"include":[]}')
          HAS_AFFECTED=$(node -e " /* ... Mismo código Node ... */ " || echo 'false')

          echo "[calculate-affected.sh] Generated Matrix Object: $MATRIX_OBJECT"
          echo "[calculate-affected.sh] Has Affected Projects: $HAS_AFFECTED"
          echo "matrix=$(echo $MATRIX_OBJECT | jq -c .)" >> $GITHUB_OUTPUT
          echo "has_affected=$HAS_AFFECTED" >> $GITHUB_OUTPUT
          echo "[calculate-affected.sh] Outputs set for GitHub Actions."
        env:
          NX_BASE: ${{ env.NX_BASE }}
          NX_HEAD: ${{ env.NX_HEAD }}
          AFFECTED_JSON: ''
  deploy:
    name: Deploy Affected VPS Configurations
    needs: determine-affected
    if: ${{ needs.determine-affected.outputs.has_affected == 'true' }}
    environment:
      name: vps-production
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-affected.outputs.affected_matrix) }}
    env:
      SECRET_NAME_HOST: VPS_${{ matrix.vps_name_upper }}_HOST
      SECRET_NAME_USER: VPS_${{ matrix.vps_name_upper }}_USER
      SECRET_NAME_KEY: VPS_${{ matrix.vps_name_upper }}_KEY
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Log Deployment Target
        run: echo "Deploying project ${{ matrix.vps_name }} to host ${{ secrets[env.SECRET_NAME_HOST] }}..."
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets[env.SECRET_NAME_KEY] }}
      - name: Add VPS Host to Known Hosts
        run: |-
          |
                    VPS_HOST="${{ secrets[env.SECRET_NAME_HOST] }}"
                    if [ -z "$VPS_HOST" ]; then echo "Error: VPS host secret missing." >&2; exit 1; fi
                    mkdir -p ~/.ssh
                    chmod 700 ~/.ssh
                    ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
                    chmod 600 ~/.ssh/known_hosts
                    echo "Added $VPS_HOST to known_hosts"

      - name: Sync Files via Rsync
        run: |-
          |
                    VPS_HOST="${{ secrets[env.SECRET_NAME_HOST] }}"
                    SECRET_USER_VALUE="${{ secrets[env.SECRET_NAME_USER] }}"
                    VPS_USER="${SECRET_USER_VALUE:-deploy}" # Default a 'deploy'
                    PROJECT_NAME="${{ matrix.vps_name }}"
                    TARGET_DIR="/home/${VPS_USER}/apps/${PROJECT_NAME}"
                    SOURCE_DIR="./apps/${PROJECT_NAME}/" # Directorio fuente

                    if [ ! -d "$SOURCE_DIR" ]; then echo "Error: Source directory ${SOURCE_DIR} not found." >&2; exit 1; fi

                    echo "Syncing ${SOURCE_DIR} to ${VPS_USER}@${VPS_HOST}:${TARGET_DIR}/"
                    # Usar -L para copiar contenido de links simbólicos si los hubiera
                    # Excluir .git si estuviera accidentalmente dentro
                    rsync -avzL --delete --exclude='.git'             "${SOURCE_DIR}"             "${VPS_USER}@${VPS_HOST}:${TARGET_DIR}/"             || { echo "Rsync failed!"; exit 1; }
                    echo "Rsync finished."

      - name: Execute Remote Deployment Script
        run: |-
          |
                    VPS_HOST="${{ secrets[env.SECRET_NAME_HOST] }}"
                    SECRET_USER_VALUE="${{ secrets[env.SECRET_NAME_USER] }}"
                    VPS_USER="${SECRET_USER_VALUE:-deploy}"
                    PROJECT_NAME="${{ matrix.vps_name }}"
                    REMOTE_APP_DIR="/home/${VPS_USER}/apps/${PROJECT_NAME}"

                    echo "Executing deploy.sh on ${VPS_USER}@${VPS_HOST} in ${REMOTE_APP_DIR}"
                    # Usar comillas dobles en Here Doc para expansión local de $PROJECT_NAME y $REMOTE_APP_DIR
                    ssh "${VPS_USER}@${VPS_HOST}" << EOF
                      echo "[Remote] Changing directory to ${REMOTE_APP_DIR}"
                      cd "${REMOTE_APP_DIR}" || { echo "[Remote] Failed to cd to ${REMOTE_APP_DIR}"; exit 1; }
                      echo "[Remote] Executing bash deploy.sh..."
                      bash deploy.sh # Ejecutar el script de despliegue que subimos
                      SCRIPT_EXIT_CODE=$? # Capturar código de salida
                      echo "[Remote] deploy.sh finished with exit code $SCRIPT_EXIT_CODE."
                      exit $SCRIPT_EXIT_CODE # Salir con el mismo código que deploy.sh
                    EOF
                    SSH_EXIT_CODE=$? # Capturar código de salida de SSH
                    if [ $SSH_EXIT_CODE -ne 0 ]; then echo "Remote script execution failed with exit code $SSH_EXIT_CODE!"; exit $SSH_EXIT_CODE; fi
                    echo "Remote script executed successfully."

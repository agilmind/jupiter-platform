name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      - name: Start Deployment
        run: echo "Workflow de despliegue iniciado manualmente..."

      # Paso 1: Checkout del código del repositorio en el runner
      # Necesario para acceder al docker-compose.prod.yml
      - name: Checkout Code
        uses: actions/checkout@v4

      # Paso 2: Configurar Agente SSH con la clave privada del secret
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Paso 3: Crear directorio de configuración en el servidor (si no existe)
      # Usa -p para evitar errores si ya existe
      - name: Create Config Directory on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config"

      # Paso 4: Copiar archivo Docker Compose al servidor via SCP
      # Origen: ruta relativa al checkout en el runner
      # Destino: ruta absoluta en el servidor remoto
      - name: Copy Docker Compose File to Server
        run: |
          scp -o StrictHostKeyChecking=no \
            ./apps/jupiter/docker-compose.prod.yml \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/deploy/jupiter_config/docker-compose.prod.yml

      # Paso 5: Ejecutar el script de despliegue en el servidor remoto
      # El script ahora buscará el compose file en /home/deploy/jupiter_config
      - name: Execute Deployment Script on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "/home/deploy/deploy.sh latest ${{ secrets.GHCR_TOKEN }}"

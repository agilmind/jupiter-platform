name: CD Deploy VPS
'on':
  push:
    branches:
      - main
jobs:
  determine-affected:
    name: Determine Affected VPS Projects
    runs-on: ubuntu-latest
    outputs:
      affected_matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_affected: ${{ steps.set-matrix.outputs.has_affected }}
    steps:
      - name: Checkout Repository (Fetch Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Install Dependencies
        run: npm ci
      - name: Install jq (for JSON processing)
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Calculate Affected VPS Projects
        id: set-matrix
        run: |
          #!/bin/bash
          # ==============================================================================
          # Script para GitHub Actions: Calcula Proyectos Afectados y Genera Matriz
          # ==============================================================================
          set -euo pipefail

          echo "[calculate-affected.sh] Calculating affected projects with target 'deploy'..."
          echo "[calculate-affected.sh] Base SHA: $NX_BASE | Head SHA: $NX_HEAD"

          # Obtener proyectos afectados como JSON array de strings.
          # Usamos jq para parsear y || echo '[]' para manejar el caso de error o ningún afectado.
          # Excluir otros tipos de apps si se desea con --exclude=tag:type:other-app
          AFFECTED_JSON=$(npx nx affected --target=deploy --base=$NX_BASE --head=$NX_HEAD --json --exclude=tag:type:other-app | jq -c '.projects' || echo '[]')
          echo "[calculate-affected.sh] Affected Projects JSON: $AFFECTED_JSON"

          # Exportar para que Node.js lo pueda leer desde el entorno
          export AFFECTED_JSON

          # Usar node para construir el objeto de matriz 'include' de forma segura
          # Esto evita problemas con caracteres especiales en nombres de proyecto
          MATRIX_OBJECT=$(node -e "
            try {
              const projects = JSON.parse(process.env.AFFECTED_JSON || '[]');
              // Filtrar por si acaso viene algo inesperado (null, etc.)
              const validProjects = projects.filter(p => typeof p === 'string' && p.length > 0);
              const includeList = validProjects.map(p => ({
                vps_name: p,
                // Generar nombre para secrets/variables (uppercase, guiones bajos)
                vps_name_upper: p.toUpperCase().replace(/-/g, '_')
              }));
              // Salida como JSON compacto en una sola línea
              console.log(JSON.stringify({ include: includeList }));
            } catch (e) {
              console.error('[NodeScript] Error processing affected projects:', e);
              // Salida segura en caso de error
              console.log(JSON.stringify({ include: [] }));
            }
          " || echo '{"include":[]}') # Fallback si Node falla

          # Determinar si hay afectados
          HAS_AFFECTED=$(node -e "try { console.log(JSON.parse(process.env.AFFECTED_JSON || '[]').length > 0 ? 'true' : 'false'); } catch { console.log('false'); }" || echo 'false')

          echo "[calculate-affected.sh] Generated Matrix Object: $MATRIX_OBJECT"
          echo "[calculate-affected.sh] Has Affected Projects: $HAS_AFFECTED"

          # Pasar al output de GitHub Actions
          # Usar jq -c para asegurar formato JSON compacto y válido
          echo "matrix=$(echo $MATRIX_OBJECT | jq -c .)" >> $GITHUB_OUTPUT
          echo "has_affected=$HAS_AFFECTED" >> $GITHUB_OUTPUT

          echo "[calculate-affected.sh] Outputs set for GitHub Actions."
        env:
          NX_BASE: ${{ env.NX_BASE }}
          NX_HEAD: ${{ env.NX_HEAD }}
          AFFECTED_JSON: ''
  deploy:
    name: Deploy Affected VPS Configurations
    needs: determine-affected
    if: ${{ needs.determine-affected.outputs.has_affected == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-affected.outputs.affected_matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Log Deployment Target
        run: 'echo "Attempting deployment for VPS: ${{ matrix.vps_name }}..."'
      - name: Simulate Deployment Steps
        run: |
          #!/bin/bash
          # ==============================================================================
          # Script para GitHub Actions: Simula Pasos de Despliegue (Fase 1)
          # ==============================================================================
          set -euo pipefail

          # Acceder a las variables de la matriz definidas en el job 'strategy'
          # GitHub Actions las expone como variables de entorno
          VPS_NAME="${{ matrix.vps_name }}"
          VPS_NAME_UPPER="${{ matrix.vps_name_upper }}"

          # Acceder a secrets (estos solo tendrán valor dentro de GitHub Actions)
          # Usamos format() para construir el nombre del secret dinámicamente
          TARGET_HOST="\${{ secrets[format('VPS_{0}_HOST', matrix.vps_name_upper)] }}"
          TARGET_USER="\${{ secrets[format('VPS_{0}_USER', matrix.vps_name_upper)] }}" # Asumimos 'deploy' pero podría ser un secret

          echo "[simulate-deploy.sh] Phase 1: Simulation Only for ${VPS_NAME}"
          echo "--------------------------------------------------"
          echo "[simulate-deploy.sh] Target Host (from secrets): ${TARGET_HOST:-<secret VPS_${VPS_NAME_UPPER}_HOST not available>}"
          echo "[simulate-deploy.sh] Target User (from secrets): ${TARGET_USER:-<secret VPS_${VPS_NAME_UPPER}_USER not available, using default 'deploy'>}"
          USER_TO_CONNECT=${TARGET_USER:-deploy} # Usar default si el secret no está

          echo ""
          echo "[simulate-deploy.sh] Would normally perform these steps:"
          echo "1. Setup SSH using secret VPS_${VPS_NAME_UPPER}_KEY"
          echo "2. Add remote host ${TARGET_HOST} to known_hosts"
          echo "3. Sync files from ./apps/${VPS_NAME}/ to ${USER_TO_CONNECT}@${TARGET_HOST}:/home/deploy/apps/${VPS_NAME}/ via rsync"
          echo "4. Execute remote 'bash deploy.sh' in /home/deploy/apps/${VPS_NAME} via ssh ${USER_TO_CONNECT}@${TARGET_HOST}"
          echo "--------------------------------------------------"

          echo "[simulate-deploy.sh] Simulating work..."
          sleep 2

          echo "[simulate-deploy.sh] Simulation finished successfully."

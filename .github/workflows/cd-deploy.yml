name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      # ... (inputs sin cambios) ...
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure
          - applications
          - all
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      # ... (Pasos 1 a 6 sin cambios respecto a Versión 10/11) ...
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Create Base Config Directory on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf"
      - name: Copy App Docker Compose File to Server
        # ... (Paso 4a sin cambios) ...
        if: github.event.inputs.deployment_target == 'applications' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/docker-compose.prod.yml"
          target: "/home/deploy/jupiter_config/"
      - name: Copy VPS Docker Compose File to Server
        # ... (Paso 4b.1 sin cambios) ...
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml"
          target: "/home/deploy/jupiter_config/"
          overwrite: true
      - name: Copy Nginx Config Files to Server
        # ... (Paso 4b.2 sin cambios) ...
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/nginx-conf/*"
          target: "/home/deploy/jupiter_config/nginx-conf/"
          overwrite: true
      - name: Copy Deploy Script to Server
        # ... (Paso 5 sin cambios) ...
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/deploy.sh"
          target: "/home/deploy/"
          overwrite: true
      - name: Make Deploy Script Executable
        # ... (Paso 6 sin cambios) ...
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            chmod +x /home/deploy/deploy.sh
            chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/deploy/deploy.sh

      # Paso 7: Ejecutar el script de despliegue en el servidor remoto
      - name: Execute Deployment Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # <--- CAMBIO: Pasamos parámetros como variables de entorno
          env:
            DEPLOY_TARGET: ${{ github.event.inputs.deployment_target }}
            IMAGE_TAG: ${{ github.event.inputs.image_tag }}
            GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          # <--- CAMBIO: Ejecutamos sudo SÓLO con el path del script
          script: |
            echo ">>> Entering Step 7: Execute Deployment Script"
            echo " Deployment Target (from env): $DEPLOY_TARGET"
            echo " Image Tag (from env)        : $IMAGE_TAG"
            echo "Running: sudo /home/deploy/deploy.sh"
            # El script ahora leerá las variables de entorno DEPLOY_TARGET, IMAGE_TAG, GHCR_TOKEN
            sudo /home/deploy/deploy.sh
            echo "<<< Exiting Step 7"

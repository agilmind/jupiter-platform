# .github/workflows/cd-deploy.yml
name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure
          - applications
          - all
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      # Pasos 1-4 sin cambios
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Create Base Config Directory on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf"
      - name: Copy App Docker Compose File to Server
        if: github.event.inputs.deployment_target == 'applications' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        # ... (with block sin cambios) ...
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/docker-compose.prod.yml"
          target: "/home/deploy/jupiter_config/"
          overwrite: true
      - name: Copy VPS Docker Compose File to Server
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        # ... (with block sin cambios) ...
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml"
          target: "/home/deploy/jupiter_config/"
          overwrite: true
      - name: Copy Nginx Config Files to Server
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        # ... (with block sin cambios) ...
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/nginx-conf/*"
          target: "/home/deploy/jupiter_config/nginx-conf/"
          overwrite: true

      # --- PASO 5 CORREGIDO ---
      - name: Copy Deploy Script using direct scp
        run: |
          echo "Intentando copiar deploy.sh usando scp directo..."
          # Corrección: Usar operador ternario para el puerto default
          scp -o StrictHostKeyChecking=no \
              -P ${{ secrets.SSH_PORT != '' ? secrets.SSH_PORT : '22' }} \
              apps/jupiter/vps-infrastructure/hybrid/deploy.sh \
              ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/deploy/deploy.sh
          echo "Comando scp ejecutado."

      # --- FIN PASO 5 CORREGIDO ---

      # Paso 6: Asegurar que deploy.sh sea ejecutable (sin cambios)
      - name: Make Deploy Script Executable
        uses: appleboy/ssh-action@master
        # ... (with block sin cambios) ...
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            chmod +x /home/deploy/deploy.sh
            # chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/deploy/deploy.sh # Comentado

      # Paso 7: Ejecutar el script (sin cambios)
      - name: Execute Deployment Script on Server
        uses: appleboy/ssh-action@master
        # ... (with block sin cambios) ...
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # ... (exportación de variables y llamada a sudo deploy.sh) ...
            echo ">>> Entering Step 7: Execute Deployment Script"
            export DEPLOY_TARGET="${{ github.event.inputs.deployment_target }}"
            export IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            export GHCR_TOKEN="${{ secrets.GHCR_TOKEN }}"
            echo " Deployment Target (exported): $DEPLOY_TARGET"
            echo " Image Tag (exported)        : $IMAGE_TAG"
            echo "Running: sudo /home/deploy/deploy.sh"
            sudo /home/deploy/deploy.sh
            echo "<<< Exiting Step 7"

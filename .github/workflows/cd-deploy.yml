# .github/workflows/cd-deploy.yml
name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure
          - applications
          - all
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      # ... (Pasos 1 a 3 sin cambios) ...
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create Base Config Directory on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf" # Asegura que nginx-conf exista

      # --- PASO 4 AHORA ES 4a, 4b.1, 4b.2 ---

      # Paso 4a: Copiar Archivos de Aplicación (Condicional)
      - name: Copy App Docker Compose File to Server
        if: github.event.inputs.deployment_target == 'applications' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/docker-compose.prod.yml" # Asumiendo ruta estándar
          target: "/home/deploy/jupiter_config/"

      # Paso 4b.1: Copiar docker-compose.vps.yml (Condicional)
      - name: Copy VPS Docker Compose File to Server
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml"
          target: "/home/deploy/jupiter_config/"

      # Paso 4b.2: Copiar Archivos de Configuración Nginx (Condicional)
      - name: Copy Nginx Config Files to Server
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # Intentemos copiar el directorio entero o usar wildcard aquí
          # source: "apps/jupiter/vps-infrastructure/hybrid/nginx-conf/" # Opción 1: Copiar directorio
          source: "apps/jupiter/vps-infrastructure/hybrid/nginx-conf/*" # Opción 2: Usar wildcard
          target: "/home/deploy/jupiter_config/nginx-conf/" # Directorio destino en servidor

      # Paso 5: Copiar el deploy.sh al servidor
      - name: Copy Deploy Script to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/deploy.sh" # Ruta corregida
          target: "/home/deploy/"
          overwrite: true

      # Paso 6: Asegurar que deploy.sh sea ejecutable
      - name: Make Deploy Script Executable
        # ... (sin cambios) ...
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            sudo chmod +x /home/deploy/deploy.sh
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/deploy/deploy.sh

      # Paso 7: Ejecutar el script de despliegue en el servidor remoto
      - name: Execute Deployment Script on Server
        # ... (sin cambios) ...
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            DEPLOY_ARGS=""
            if [ "${{ github.event.inputs.deployment_target }}" == "infrastructure" ]; then
              DEPLOY_ARGS="--infra"
            elif [ "${{ github.event.inputs.deployment_target }}" == "applications" ]; then
              DEPLOY_ARGS="--apps"
            elif [ "${{ github.event.inputs.deployment_target }}" == "all" ]; then
              DEPLOY_ARGS="--all"
            else
              echo "Target inválido: ${{ github.event.inputs.deployment_target }}"
              exit 1
            fi
            sudo /home/deploy/deploy.sh $DEPLOY_ARGS --tag ${{ github.event.inputs.image_tag }} --token ${{ secrets.GHCR_TOKEN }}

name: CD Deploy VPS
'on':
  push:
    branches:
      - main
jobs:
  determine-affected:
    name: Determine Affected VPS Projects
    runs-on: ubuntu-latest
    outputs:
      affected_matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_affected: ${{ steps.set-matrix.outputs.has_affected }}
    steps:
      - name: Checkout Repository (Fetch Full History)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - name: Install Dependencies
        run: npm ci
      - name: Install jq (for JSON processing)
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Calculate Affected VPS Projects
        id: set-matrix
        run: |
          #!/bin/bash
          # ==============================================================================
          # Script para GitHub Actions: Calcula Proyectos Afectados y Genera Matriz
          # ==============================================================================
          set -euo pipefail

          echo "[calculate-affected.sh] Calculating affected projects with target 'deploy'..."
          echo "[calculate-affected.sh] Base SHA: $NX_BASE | Head SHA: $NX_HEAD"

          # Obtener proyectos afectados como JSON array de strings.
          # Usamos jq para parsear y || echo '[]' para manejar el caso de error o ningún afectado.
          # Excluir otros tipos de apps si se desea con --exclude=tag:type:other-app
          AFFECTED_JSON=$(npx nx affected --target=deploy --base=$NX_BASE --head=$NX_HEAD --json --exclude=tag:type:other-app | jq -c '.projects' || echo '[]')
          echo "[calculate-affected.sh] Affected Projects JSON: $AFFECTED_JSON"

          # Exportar para que Node.js lo pueda leer desde el entorno
          export AFFECTED_JSON

          # Usar node para construir el objeto de matriz 'include' de forma segura
          # Esto evita problemas con caracteres especiales en nombres de proyecto
          MATRIX_OBJECT=$(node -e "
            try {
              const projects = JSON.parse(process.env.AFFECTED_JSON || '[]');
              // Filtrar por si acaso viene algo inesperado (null, etc.)
              const validProjects = projects.filter(p => typeof p === 'string' && p.length > 0);
              const includeList = validProjects.map(p => ({
                vps_name: p,
                // Generar nombre para secrets/variables (uppercase, guiones bajos)
                vps_name_upper: p.toUpperCase().replace(/-/g, '_')
              }));
              // Salida como JSON compacto en una sola línea
              console.log(JSON.stringify({ include: includeList }));
            } catch (e) {
              console.error('[NodeScript] Error processing affected projects:', e);
              // Salida segura en caso de error
              console.log(JSON.stringify({ include: [] }));
            }
          " || echo '{"include":[]}') # Fallback si Node falla

          # Determinar si hay afectados
          HAS_AFFECTED=$(node -e "try { console.log(JSON.parse(process.env.AFFECTED_JSON || '[]').length > 0 ? 'true' : 'false'); } catch { console.log('false'); }" || echo 'false')

          echo "[calculate-affected.sh] Generated Matrix Object: $MATRIX_OBJECT"
          echo "[calculate-affected.sh] Has Affected Projects: $HAS_AFFECTED"

          # Pasar al output de GitHub Actions
          # Usar jq -c para asegurar formato JSON compacto y válido
          echo "matrix=$(echo $MATRIX_OBJECT | jq -c .)" >> $GITHUB_OUTPUT
          echo "has_affected=$HAS_AFFECTED" >> $GITHUB_OUTPUT

          echo "[calculate-affected.sh] Outputs set for GitHub Actions."
        env:
          NX_BASE: ${{ env.NX_BASE }}
          NX_HEAD: ${{ env.NX_HEAD }}
          AFFECTED_JSON: ''
  deploy:
    name: Deploy Affected VPS Configurations
    needs: determine-affected
    if: ${{ needs.determine-affected.outputs.has_affected == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.determine-affected.outputs.affected_matrix) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Log Deployment Target
        run: echo "Deploying project ${{ matrix.vps_name }} to host ${{ secrets[format("VPS_{0}_HOST", matrix.vps_name_upper)] }}..."
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets[format('VPS_{0}_KEY', matrix.vps_name_upper)] }}
      - name: Add VPS Host to Known Hosts
        run: |2-

                    VPS_HOST="${{ secrets[format('VPS_{0}_HOST', matrix.vps_name_upper)] }}"
                    if [ -z "$VPS_HOST" ]; then
                      echo "Error: VPS host secret is not set."
                      exit 1
                    fi
                    mkdir -p ~/.ssh
                    ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
                    echo "Added $VPS_HOST to known_hosts"

      - name: Sync Files via Rsync
        run: |2-

                    VPS_HOST="${{ secrets[format('VPS_{0}_HOST', matrix.vps_name_upper)] }}"
                    VPS_USER="${{ secrets[format('VPS_{0}_USER', matrix.vps_name_upper)]:-deploy}}" # Default a 'deploy' si USER no está
                    PROJECT_NAME="${{ matrix.vps_name }}"
                    TARGET_DIR="/home/${VPS_USER}/apps/${PROJECT_NAME}" # Asume estructura creada por script setup

                    echo "Syncing ./apps/${PROJECT_NAME}/ to ${VPS_USER}@${VPS_HOST}:${TARGET_DIR}/"
                    # -a: archive mode (recursive, links, perms, times, group, owner, devices)
                    # -v: verbose
                    # -z: compress
                    # --delete: delete files on destination that don't exist on source
                    rsync -avz --delete             ./apps/${PROJECT_NAME}/             "${VPS_USER}@${VPS_HOST}:${TARGET_DIR}/"             || { echo "Rsync failed!"; exit 1; }

      - name: Execute Remote Deployment Script
        run: |2-

                    VPS_HOST="${{ secrets[format('VPS_{0}_HOST', matrix.vps_name_upper)] }}"
                    VPS_USER="${{ secrets[format('VPS_{0}_USER', matrix.vps_name_upper)]:-deploy}}"
                    PROJECT_NAME="${{ matrix.vps_name }}"
                    REMOTE_SCRIPT_PATH="/home/${VPS_USER}/apps/${PROJECT_NAME}/deploy.sh"

                    echo "Executing ${REMOTE_SCRIPT_PATH} on ${VPS_USER}@${VPS_HOST}..."
                    # Usar Here Document para pasar comandos a ssh
                    ssh "${VPS_USER}@${VPS_HOST}" << EOF
                      echo "[Remote] Executing deploy script for ${PROJECT_NAME}..."
                      cd "$(dirname "${REMOTE_SCRIPT_PATH}")" || exit 1 # Cambiar al directorio del script
                      bash "$(basename "${REMOTE_SCRIPT_PATH}")" # Ejecutar el script
                      echo "[Remote] deploy.sh finished."
                    EOF
                    # Comprobar el código de salida de SSH (aunque el 'exit 1' dentro del heredoc debería funcionar)
                    if [ $? -ne 0 ]; then echo "Remote script execution failed!"; exit 1; fi

    environment:
      name: vps-production
      url: http://${{ secrets[format("VPS_{0}_HOST", matrix.vps_name_upper)] }}

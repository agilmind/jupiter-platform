name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure
          - applications
          - all
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      # Pasos 1-3 sin cambios
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Create Deploy Directories on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf && mkdir -p /home/deploy/jupiter_config/nginx-ssl"

      # --- PASO 4/5 Reemplazado por scp directo con DEBUG ---
      - name: Copy Files to Server via scp
        run: |
          echo "Determinando archivos a copiar para target: ${{ github.event.inputs.deployment_target }}"
          # Usamos lógica shell para determinar el argumento del puerto
          SCP_PORT_ARG=""
          if [[ -n "${{ secrets.SSH_PORT }}" ]]; then SCP_PORT_ARG="-P ${{ secrets.SSH_PORT }}"; fi
          TARGET_HOST="${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          TARGET_CONFIG_DIR="/home/deploy/jupiter_config"
          TARGET_SCRIPT="/home/deploy/deploy.sh"
          TARGET_VPS_COMPOSE="${TARGET_CONFIG_DIR}/docker-compose.vps.yml"

          # --- DEBUGGING ADICIONAL ---
          echo "Verificando permisos del directorio destino en servidor..."
          ssh -o StrictHostKeyChecking=no $SCP_PORT_ARG $TARGET_HOST "ls -ld ${TARGET_CONFIG_DIR}" || echo "Fallo al verificar permisos de ${TARGET_CONFIG_DIR}"
          echo "Verificando permisos del archivo vps.yml existente en servidor..."
          ssh -o StrictHostKeyChecking=no $SCP_PORT_ARG $TARGET_HOST "ls -l ${TARGET_VPS_COMPOSE}" || echo "Archivo ${TARGET_VPS_COMPOSE} no existe o fallo al verificar."
          echo "Intentando eliminar archivo vps.yml existente en servidor (como usuario deploy)..."
          ssh -o StrictHostKeyChecking=no $SCP_PORT_ARG $TARGET_HOST "rm -f ${TARGET_VPS_COMPOSE}"
          RM_EXIT_CODE=$?
          if [ $RM_EXIT_CODE -ne 0 ]; then
            echo "ADVERTENCIA: Falló el comando 'rm -f ${TARGET_VPS_COMPOSE}' con código $RM_EXIT_CODE (puede ser normal si el archivo no existía)."
          else
            echo "'rm -f ${TARGET_VPS_COMPOSE}' ejecutado con éxito."
          fi
          # --- FIN DEBUGGING ADICIONAL ---

          # Copiar script de despliegue SIEMPRE con verbose (-v)
          echo "Copiando deploy.sh..."
          scp -v -o StrictHostKeyChecking=no $SCP_PORT_ARG apps/jupiter/vps-infrastructure/hybrid/deploy.sh ${TARGET_HOST}:${TARGET_SCRIPT}
          SCP_SCRIPT_EXIT_CODE=$?
          if [ $SCP_SCRIPT_EXIT_CODE -ne 0 ]; then echo "ERROR: Falló scp para deploy.sh"; exit $SCP_SCRIPT_EXIT_CODE; fi

          # Copiar archivos de Apps (Condicional)
          if [[ "${{ github.event.inputs.deployment_target }}" == "applications" || "${{ github.event.inputs.deployment_target }}" == "all" ]]; then
            echo "Copiando docker-compose.prod.yml..."
            scp -v -o StrictHostKeyChecking=no $SCP_PORT_ARG apps/jupiter/docker-compose.prod.yml ${TARGET_HOST}:${TARGET_CONFIG_DIR}/docker-compose.prod.yml
            SCP_PROD_EXIT_CODE=$?
            if [ $SCP_PROD_EXIT_CODE -ne 0 ]; then echo "ERROR: Falló scp para prod.yml"; exit $SCP_PROD_EXIT_CODE; fi
          fi

          # Copiar archivos de Infra (Condicional)
          if [[ "${{ github.event.inputs.deployment_target }}" == "infrastructure" || "${{ github.event.inputs.deployment_target }}" == "all" ]]; then
            # vps.yml
            echo "Copiando docker-compose.vps.yml..."
            scp -v -o StrictHostKeyChecking=no $SCP_PORT_ARG apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml ${TARGET_HOST}:${TARGET_VPS_COMPOSE}
            SCP_VPS_EXIT_CODE=$?
            if [ $SCP_VPS_EXIT_CODE -ne 0 ]; then echo "ERROR: Falló scp para vps.yml"; exit $SCP_VPS_EXIT_CODE; fi
            # nginx-conf
            echo "Copiando nginx-conf/*..."
            if [ -d "apps/jupiter/vps-infrastructure/hybrid/nginx-conf" ]; then
                scp -v -o StrictHostKeyChecking=no -r $SCP_PORT_ARG apps/jupiter/vps-infrastructure/hybrid/nginx-conf/* ${TARGET_HOST}:${TARGET_CONFIG_DIR}/nginx-conf/
                SCP_NGINXC_EXIT_CODE=$?
                if [ $SCP_NGINXC_EXIT_CODE -ne 0 ]; then echo "ERROR: Falló scp para nginx-conf"; exit $SCP_NGINXC_EXIT_CODE; fi
            else echo "Advertencia: Directorio nginx-conf no encontrado."; fi
            # dhparam.pem
            echo "Copiando nginx-ssl/dhparam.pem..."
            if [ -f "apps/jupiter/vps-infrastructure/hybrid/nginx-ssl/dhparam.pem" ]; then
                scp -v -o StrictHostKeyChecking=no $SCP_PORT_ARG apps/jupiter/vps-infrastructure/hybrid/nginx-ssl/dhparam.pem ${TARGET_HOST}:${TARGET_CONFIG_DIR}/nginx-ssl/dhparam.pem
                SCP_DHPARAM_EXIT_CODE=$?
                if [ $SCP_DHPARAM_EXIT_CODE -ne 0 ]; then echo "ERROR: Falló scp para dhparam.pem"; exit $SCP_DHPARAM_EXIT_CODE; fi
            else echo "Advertencia: dhparam.pem no encontrado."; fi
          fi
          echo "Copia de archivos completada."
      # --- FIN PASO 4/5 ---

      # Paso 6: Make Deploy Script Executable (SIN SUDO)
      - name: Make Deploy Script Executable
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Estableciendo permiso de ejecución en /home/deploy/deploy.sh..."
            chmod +x /home/deploy/deploy.sh
            echo "Verificando:"
            ls -l /home/deploy/deploy.sh

      # Paso 7: Execute Deployment Script on Server (SIN SUDO)
      - name: Execute Deployment Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          command_timeout: 15m # 15 minuto
          script: |
            # ... (script interno con export y llamada a deploy.sh SIN sudo) ...
            echo ">>> Entering Step 7: Execute Deployment Script as User ${{ secrets.SSH_USER }}"
            export DEPLOY_TARGET="${{ github.event.inputs.deployment_target }}"
            export IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            export GHCR_TOKEN="${{ secrets.GHCR_TOKEN }}"
            export LETSENCRYPT_EMAIL="garciafido@gmail.com"
            export DOMAIN_NAME="webapp.jupiter.ar"
            echo " Deployment Target (exported): $DEPLOY_TARGET"
            echo " Image Tag (exported)        : $IMAGE_TAG"
            echo " Email (exported)          : $LETSENCRYPT_EMAIL"
            echo " Dominio (exported)        : $DOMAIN_NAME"
            echo "Running: /home/deploy/deploy.sh"
            /home/deploy/deploy.sh # Sin sudo
            EXIT_CODE=$?
            echo "<<< Exiting Step 7 (Script Exit Code: $EXIT_CODE)"
            exit $EXIT_CODE

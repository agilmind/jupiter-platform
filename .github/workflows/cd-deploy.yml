name: Deploy Affected Applications

on:
  push:
    branches: [ main ] # O la rama que uses para desplegar
    paths:
      - 'apps/**'     # Solo se activa si hay cambios dentro de apps/

env:
  REGISTRY: ghcr.io # Usaremos GitHub Container Registry
  # El namespace suele ser el usuario u organización dueña del repo
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  # Asumimos un único VPS destino por ahora, usando los secretos de 'hostinger'
  VPS_HOST_SECRET: VPS_HOSTINGER_HOST # Nombre del secreto para el Host
  VPS_USER_SECRET: VPS_HOSTINGER_USER # Nombre del secreto para el User (deploy)
  VPS_KEY_SECRET: VPS_HOSTINGER_KEY   # Nombre del secreto para la Clave SSH Privada

jobs:
  # ----- Job 1: Determinar qué aplicaciones fueron afectadas -----
  check_affected:
    name: Check Affected Apps
    runs-on: ubuntu-latest
    outputs:
      affected_projects: ${{ steps.get_affected.outputs.affected_projects }}
      has_affected: ${{ steps.get_affected.outputs.has_affected }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # MUY Importante para que affected funcione bien

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Paso Nuevo: Limpiar caché de Nx explícitamente
      - name: Clear Nx Cache
        run: rm -rf node_modules/.cache/nx || true # Ignora error si el dir no existe

      - name: Install Dependencies
        run: npm ci

      - name: Derive SHAs for Nx Affected
        uses: nrwl/nx-set-shas@v3 # o nx/nx-set-shas@v4
        with:
           main-branch-name: 'main'

      # Paso Nuevo: Listar archivos cambiados según Git
      - name: List Changed Files
        run: |
          echo "Listing files changed between BASE (${{ env.NX_BASE }}) and HEAD (${{ env.NX_HEAD }}):"
          git diff --name-only ${{ env.NX_BASE }} ${{ env.NX_HEAD }} || echo "git diff command failed (maybe first commit?)"
          echo "--- End of changed files list ---"

      - name: Get Affected Projects
        id: get_affected
        run: |
          set -x # Mantener para depuración

          echo "NX_BASE SHA: ${{ env.NX_BASE }}"
          echo "NX_HEAD SHA: ${{ env.NX_HEAD }}"

          # --- Intento 1: CON target ---
          echo "Attempting: nx show projects --affected --with-target=deploy-info"
          AFFECTED_PROJECTS_JSON=$(npx nx show projects --affected --with-target=deploy-info --json --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} 2>&1)
          NX_EXIT_CODE=$?
          echo "Raw Output (with target): [$AFFECTED_PROJECTS_JSON]"
          echo "Exit Code (with target): $NX_EXIT_CODE"

          # --- Intento 2 (Solo para Debug): SIN target ---
          # Ejecutar solo si el intento anterior falló o dio array vacío, para comparar
          AFFECTED_NO_TARGET="N/A" # Valor por defecto
          NX_EXIT_CODE_NO_TARGET="N/A"
          if [ $NX_EXIT_CODE -ne 0 ] || echo "$AFFECTED_PROJECTS_JSON" | jq -e 'type=="array" and length == 0' > /dev/null; then
              echo "Attempting: nx show projects --affected (NO target) for comparison..."
              AFFECTED_NO_TARGET=$(npx nx show projects --affected --json --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} 2>&1)
              NX_EXIT_CODE_NO_TARGET=$?
              echo "Raw Output (NO target): [$AFFECTED_NO_TARGET]"
              echo "Exit Code (NO target): $NX_EXIT_CODE_NO_TARGET"
          fi
          # --- Fin Intento 2 ---

          # --- Validación (usa el resultado del Intento 1 CON target) ---
          if [ $NX_EXIT_CODE -ne 0 ]; then
            echo "::error::nx show projects --affected (with target) command failed with exit code $NX_EXIT_CODE. Output/Error was: $AFFECTED_PROJECTS_JSON"
            exit $NX_EXIT_CODE
          fi

          AFFECTED_PROJECTS="[]"
          HAS_AFFECTED="false"

          if echo "$AFFECTED_PROJECTS_JSON" | jq -e 'type=="array" and length > 0' > /dev/null; then
              AFFECTED_PROJECTS=$(echo "$AFFECTED_PROJECTS_JSON" | jq -c .)
              HAS_AFFECTED="true"
              echo "Successfully found affected projects (with target)."
          elif echo "$AFFECTED_PROJECTS_JSON" | jq -e 'type=="array" and length == 0' > /dev/null; then
              echo "nx show projects --affected (with target) returned an empty array '[]'. No projects affected for target 'deploy-info'."
          else
              echo "::warning::nx show projects --affected (with target) output was not a valid JSON array. Assuming no projects affected. Output: $AFFECTED_PROJECTS_JSON"
          fi
          # --- Fin Validación ---

          echo "Final Affected Projects JSON (for matrix): $AFFECTED_PROJECTS"
          echo "Final Has Affected (for matrix): $HAS_AFFECTED"
          echo "affected_projects=${AFFECTED_PROJECTS}" >> $GITHUB_OUTPUT
          echo "has_affected=${HAS_AFFECTED}" >> $GITHUB_OUTPUT
          echo "Finished setting outputs."
          set +x

  # ----- Job 2: Construir y Desplegar Aplicaciones Afectadas -----
  # (Esta parte parecía correcta en tu versión anterior)
  deploy_affected:
    name: Build and Deploy ${{ matrix.project }}
    needs: check_affected
    if: needs.check_affected.outputs.has_affected == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJson(needs.check_affected.outputs.affected_projects) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Dependencies
        run: npm ci

      - name: Get Project Root Path
        id: get_root
        run: |
          # Usamos npx para ejecutar nx show
          PROJECT_ROOT=$(npx nx show project ${{ matrix.project }} --json | jq -r .root)
          echo "Project Root: $PROJECT_ROOT"
          echo "root=$PROJECT_ROOT" >> $GITHUB_OUTPUT

      # --- Build y Push a GHCR ---
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }} # Asegúrate que este sea el nombre de tu secreto

      - name: Generate Image Tags
        id: image_tags
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ matrix.project }}"
          IMAGE_NAME=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]') # Convertir a minúsculas
          TAG_LATEST="${IMAGE_NAME}:latest"
          TAG_SHA="${IMAGE_NAME}:${{ github.sha }}"
          echo "tags=${TAG_LATEST},${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "image_name_sha=${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "Generated Tags: ${TAG_LATEST}, ${TAG_SHA}"

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.get_root.outputs.root }}
          file: ${{ steps.get_root.outputs.root }}/Dockerfile
          push: true
          tags: ${{ steps.image_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Despliegue en VPS ---
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets[env.VPS_KEY_SECRET] }}

      - name: Add VPS Host to Known Hosts
        run: |
          VPS_HOST="${{ secrets[env.VPS_HOST_SECRET] }}"
          if [ -z "$VPS_HOST" ]; then echo "Error: Host secret missing." >&2; exit 1; fi
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts && chmod 600 ~/.ssh/known_hosts
          echo "Added $VPS_HOST to known_hosts"

      - name: Prepare Remote Environment & Deploy
        env:
          VPS_HOST: ${{ secrets[env.VPS_HOST_SECRET] }}
          VPS_USER: ${{ secrets[env.VPS_USER_SECRET] }}
          PROJECT_NAME: ${{ matrix.project }} # ej: jupiter-www
          # Usamos la salida del step anterior directamente
          APP_IMAGE_NAME_SHA: ${{ steps.image_tags.outputs.image_name_sha }}
        run: |
          # Variables (simplificado)
          REMOTE_USER_HOST="${VPS_USER}@${VPS_HOST}"
          REMOTE_APP_DIR="/home/${VPS_USER}/apps/${PROJECT_NAME}"
          # Obtenemos la ruta local del compose file desde el step anterior
          LOCAL_COMPOSE_FILE="${{ steps.get_root.outputs.root }}/docker-compose-app.yml"
          REMOTE_COMPOSE_FILE="${REMOTE_APP_DIR}/docker-compose-app.yml"
          REMOTE_ENV_FILE="${REMOTE_APP_DIR}/.env"
          ENV_VAR_NAME="APP_IMAGE_NAME"

          echo "Deploying project ${PROJECT_NAME} to ${REMOTE_USER_HOST}:${REMOTE_APP_DIR}"
          echo "Using Image: ${APP_IMAGE_NAME_SHA}"

          # 1. Crear directorio remoto
          ssh "$REMOTE_USER_HOST" "mkdir -p ${REMOTE_APP_DIR}" || true

          # 2. Sincronizar docker-compose-app.yml
          echo "Syncing ${LOCAL_COMPOSE_FILE} to ${REMOTE_USER_HOST}:${REMOTE_COMPOSE_FILE}"
          rsync -avz "${LOCAL_COMPOSE_FILE}" "${REMOTE_USER_HOST}:${REMOTE_COMPOSE_FILE}" \
            || { echo "Rsync failed!"; exit 1; }

          # 3. Actualizar variable APP_IMAGE_NAME en .env remoto
          echo "Updating ${ENV_VAR_NAME} in ${REMOTE_USER_HOST}:${REMOTE_ENV_FILE}"
          ssh "$REMOTE_USER_HOST" bash -s << EOF
            set -e
            ENV_FILE="${REMOTE_ENV_FILE}"
            VAR_NAME="${ENV_VAR_NAME}"
            VAR_VALUE="${APP_IMAGE_NAME_SHA}" # Ya tenemos el valor exacto

            touch "\$ENV_FILE"
            sed -i "/^\${VAR_NAME}=/d" "\$ENV_FILE" || true
            echo "\${VAR_NAME}=\${VAR_VALUE}" >> "\$ENV_FILE"
            echo "Updated ${ENV_VAR_NAME} in \${ENV_FILE}"
          EOF

          # 4. Ejecutar Docker Compose Remoto
          echo "Running docker compose pull & up on remote host..."
          ssh "$REMOTE_USER_HOST" bash -s << EOF
            set -e
            cd "${REMOTE_APP_DIR}"
            echo "[Remote] Pulling image: ${APP_IMAGE_NAME_SHA}" # Usamos la variable para claridad
            # Asegurarse que docker compose use el .env
            docker compose --env-file .env pull
            echo "[Remote] Starting application via Docker Compose..."
            docker compose --env-file .env -f docker-compose-app.yml up -d --remove-orphans
            echo "[Remote] Deployment complete for ${PROJECT_NAME}."
          EOF

# .github/workflows/cd-deploy.yml
# Workflow para desplegar aplicaciones afectadas en el directorio apps/

name: Deploy Affected Applications

# Triggers: Push a main si cambian archivos en apps/
on:
  push:
    branches: [ main ]
    paths:
      - 'apps/**'

# Variables de entorno globales para el workflow
env:
  REGISTRY: ghcr.io # Registro de contenedores (GitHub Container Registry)
  IMAGE_NAMESPACE: ${{ github.repository_owner }} # Namespace (usuario u org de GitHub)
  # Nombres de los secretos de GitHub Actions para la conexión SSH al VPS
  VPS_HOST_SECRET: VPS_HOSTINGER_HOST # Ajustar si usas otro nombre de infra/secreto
  VPS_USER_SECRET: VPS_HOSTINGER_USER # Ajustar si usas otro nombre de infra/secreto
  VPS_KEY_SECRET: VPS_HOSTINGER_KEY   # Ajustar si usas otro nombre de infra/secreto

jobs:
  # --------------------------------------------------------------------------
  # Job 1: Determinar qué aplicaciones (proyectos Nx) fueron afectadas
  # --------------------------------------------------------------------------
  check_affected:
    name: Check Affected Apps
    runs-on: ubuntu-latest
    outputs:
      affected_projects: ${{ steps.get_affected.outputs.affected_projects }} # Output: JSON array de proyectos afectados como string
      has_affected: ${{ steps.get_affected.outputs.has_affected }}       # Output: "true" o "false" como string

    steps:
      # Paso 1: Checkout del código completo para análisis de Nx
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para comparar SHAs correctamente

      # Paso 2: Configurar Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # O la versión requerida por tu workspace Nx

      # Paso 3: Instalar dependencias
      - name: Install Dependencies
        run: npm ci # O el comando de instalación que uses (yarn, pnpm)

      # Paso 4: Derivar SHAs base y head para Nx Affected
      - name: Derive SHAs for Nx Affected
        # Asegúrate que esta acción (o nx/nx-set-shas@v4) sea compatible con tu setup
        uses: nrwl/nx-set-shas@v4
        with:
           main-branch-name: 'main' # Rama contra la que comparar

      # Paso 5: Obtener la lista de proyectos afectados
      - name: Get Affected Projects
        id: get_affected
        run: |
          echo "NX_BASE SHA: ${{ env.NX_BASE }}"
          echo "NX_HEAD SHA: ${{ env.NX_HEAD }}"

          # Usar 'nx show projects --affected' que devuelve un array JSON
          AFFECTED_PROJECTS_JSON=$(npx nx show projects --affected --with-target=deploy-info --json --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }} 2>&1)
          NX_EXIT_CODE=$?

          echo "Raw Affected Projects JSON (incl. stderr): [$AFFECTED_PROJECTS_JSON]"
          echo "NX Exit Code: $NX_EXIT_CODE"

          # Validar salida del comando Nx
          if [ $NX_EXIT_CODE -ne 0 ]; then
            echo "::error::nx show projects --affected command failed with exit code $NX_EXIT_CODE. Output/Error was: $AFFECTED_PROJECTS_JSON"
            exit $NX_EXIT_CODE
          fi

          # Procesar la salida JSON
          AFFECTED_PROJECTS="[]"
          HAS_AFFECTED="false"

          if echo "$AFFECTED_PROJECTS_JSON" | jq -e 'type=="array" and length > 0' > /dev/null; then
              AFFECTED_PROJECTS=$(echo "$AFFECTED_PROJECTS_JSON" | jq -c .)
              HAS_AFFECTED="true"
              echo "Successfully found affected projects (with target)."
          elif echo "$AFFECTED_PROJECTS_JSON" | jq -e 'type=="array" and length == 0' > /dev/null; then
              echo "nx show projects --affected (with target) returned an empty array '[]'. No projects affected for target 'deploy-info'."
          else
              echo "::warning::nx show projects --affected (with target) output was not a valid JSON array. Assuming no projects affected. Output: $AFFECTED_PROJECTS_JSON"
          fi

          # Establecer outputs para el job
          echo "Final Affected Projects JSON (for matrix): $AFFECTED_PROJECTS"
          echo "Final Has Affected (for matrix): $HAS_AFFECTED"
          echo "affected_projects=${AFFECTED_PROJECTS}" >> $GITHUB_OUTPUT
          echo "has_affected=${HAS_AFFECTED}" >> $GITHUB_OUTPUT
          echo "Finished setting outputs."

  # --------------------------------------------------------------------------
  # Job 2: Construir y Desplegar las Aplicaciones Afectadas
  # --------------------------------------------------------------------------
  deploy_affected:
    name: Build and Deploy ${{ matrix.project }} # Nombre dinámico del job
    needs: check_affected     # Depende del job anterior
    # Condición: Solo se ejecuta si el job anterior encontró proyectos afectados
    if: needs.check_affected.outputs.has_affected == 'true' # Comparando con string 'true'
    # permissions: # <--- ELIMINADO: No necesario cuando se usa PAT
    runs-on: ubuntu-latest  # Runner
    strategy:                 # Estrategia para paralelizar/iterar
      fail-fast: false        # No cancelar otros jobs si uno falla
      matrix:                 # Define la matriz de ejecución
        # Crea una instancia de este job por cada proyecto en el array JSON del output
        project: ${{ fromJson(needs.check_affected.outputs.affected_projects) }}

    steps:                    # Pasos para CADA instancia de la matriz
      # Paso 1: Checkout del código
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Paso 2: Configurar Node.js (necesario para nx show project)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Paso 3: Instalar dependencias
      - name: Install Dependencies
        run: npm ci

      # Paso 4: Obtener la ruta raíz del proyecto actual de la matriz
      - name: Get Project Root Path
        id: get_root
        run: |
          PROJECT_ROOT=$(npx nx show project ${{ matrix.project }} --json | jq -r .root)
          if [ -z "$PROJECT_ROOT" ] || [ "$PROJECT_ROOT" == "null" ]; then
            echo "::error::Could not determine project root for ${{ matrix.project }}"
            exit 1
          fi
          echo "Project Root for ${{ matrix.project }}: $PROJECT_ROOT"
          echo "root=$PROJECT_ROOT" >> $GITHUB_OUTPUT

      # --- Pasos para Build y Push a GHCR ---
      # Paso 5: Configurar QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Paso 6: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 7: Login a GitHub Container Registry (Usando PAT)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # O el usuario dueño del PAT si es diferente
          # --- Usar GHCR_TOKEN (PAT) ---
          password: ${{ secrets.GHCR_TOKEN }}

      # Paso 8: Generar los tags para la imagen Docker
      - name: Generate Image Tags
        id: image_tags
        run: |
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ matrix.project }}" | tr '[:upper:]' '[:lower:]')
          TAG_LATEST="${IMAGE_NAME}:latest"
          TAG_SHA="${IMAGE_NAME}:${{ github.sha }}"
          echo "tags=${TAG_LATEST},${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "image_name_sha=${TAG_SHA}" >> $GITHUB_OUTPUT
          echo "Generated Tags: ${TAG_LATEST}, ${TAG_SHA}"

      # Paso 9: Construir y Publicar la imagen Docker
      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.get_root.outputs.root }}
          file: ${{ steps.get_root.outputs.root }}/Dockerfile
          push: true
          tags: ${{ steps.image_tags.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # --- Pasos para Despliegue en VPS ---
      # Paso 10: Configurar el agente SSH
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets[env.VPS_KEY_SECRET] }}

      # Paso 11: Añadir el host del VPS a los hosts conocidos
      - name: Add VPS Host to Known Hosts
        run: |
          VPS_HOST="${{ secrets[env.VPS_HOST_SECRET] }}"
          if [ -z "$VPS_HOST" ]; then echo "Error: Host secret '${{ env.VPS_HOST_SECRET }}' missing." >&2; exit 1; fi
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts && chmod 600 ~/.ssh/known_hosts
          echo "Added $VPS_HOST to known_hosts"

      # Paso 12: Preparar entorno remoto y desplegar
      - name: Prepare Remote Environment & Deploy
        env:
          VPS_HOST: ${{ secrets[env.VPS_HOST_SECRET] }}
          VPS_USER: ${{ secrets[env.VPS_USER_SECRET] }}
          PROJECT_NAME: ${{ matrix.project }}
          APP_IMAGE_NAME_SHA: ${{ steps.image_tags.outputs.image_name_sha }}
          GHCR_USER: ${{ github.actor }}
          GHCR_PAT: ${{ secrets.GHCR_TOKEN }}
          # Variable para nombre de la variable en .env
          ENV_VAR_NAME_TO_UPDATE: "APP_IMAGE_NAME"
        run: |
          set -e
          REMOTE_USER_HOST="${VPS_USER}@${VPS_HOST}"
          REMOTE_APP_DIR="/home/${VPS_USER}/apps/${PROJECT_NAME}"
          LOCAL_COMPOSE_FILE="${{ steps.get_root.outputs.root }}/docker-compose-app.yml"
          REMOTE_COMPOSE_FILE="${REMOTE_APP_DIR}/docker-compose-app.yml" # Ruta Absoluta remota
          REMOTE_ENV_FILE="${REMOTE_APP_DIR}/.env" # Ruta Absoluta remota

          echo "Deploying project ${PROJECT_NAME} to ${REMOTE_USER_HOST}:${REMOTE_APP_DIR}"
          echo "Using Image: ${APP_IMAGE_NAME_SHA}"

          # 1. Crear directorio remoto
          ssh "$REMOTE_USER_HOST" "mkdir -p ${REMOTE_APP_DIR}" || true

          # 2. Sincronizar docker-compose-app.yml
          echo "Syncing ${LOCAL_COMPOSE_FILE} to ${REMOTE_USER_HOST}:${REMOTE_COMPOSE_FILE}"
          rsync -avz "${LOCAL_COMPOSE_FILE}" "${REMOTE_USER_HOST}:${REMOTE_COMPOSE_FILE}" \
            || { echo "Rsync failed!"; exit 1; }

          # 3. Actualizar variable APP_IMAGE_NAME en .env remoto (Pasando línea completa)
          echo "Updating ${ENV_VAR_NAME_TO_UPDATE} in ${REMOTE_USER_HOST}:${REMOTE_ENV_FILE}"
          # Preparar argumentos para el script remoto
          printf -v remote_env_file_q "%q" "$REMOTE_ENV_FILE"
          printf -v var_name_q "%q" "$ENV_VAR_NAME_TO_UPDATE"
          LINE_TO_ADD="${ENV_VAR_NAME_TO_UPDATE}=${APP_IMAGE_NAME_SHA}"
          printf -v line_to_add_q "%q" "$LINE_TO_ADD" # Escapar la línea completa
          # Pasar argumentos: $1=ruta .env, $2=nombre var (para sed), $3=línea completa
          ssh "$REMOTE_USER_HOST" "bash -s -- ${remote_env_file_q} ${var_name_q} ${line_to_add_q}" << 'EOF'
            # Script remoto para actualizar .env, recibe argumentos $1, $2, $3
            set -e
            # Asignar argumentos a variables nombradas
            ENV_FILE="$1"
            VAR_NAME="$2" # Necesario para sed
            LINE_TO_ADD="$3" # Línea completa "VAR=VAL"

            echo "[Remote] Updating ${VAR_NAME} in ${ENV_FILE}..."
            # Crear .env si no existe
            touch "$ENV_FILE"
            # Eliminar línea antigua si existe (usar delimitador # en sed)
            sed -i "#^ *${VAR_NAME}=#d" "$ENV_FILE" || true
            # Añadir la línea completa pasada como argumento $LINE_TO_ADD (que es $3)
            echo "$LINE_TO_ADD" >> "$ENV_FILE"
            echo "[Remote] Updated/Set ${VAR_NAME} in ${ENV_FILE}"
          EOF

          # 4. Ejecutar Docker Login Remoto (Separado)
          echo "Logging into GHCR on remote host..."
          echo "${GHCR_PAT}" | ssh "$REMOTE_USER_HOST" "docker login ghcr.io -u ${GHCR_USER} --password-stdin"
          echo "Remote GHCR login command executed."

          # 5. Ejecutar Docker Compose Pull & Up Remoto (Separado)
          echo "Running docker compose pull & up on remote host..."
          # Pasar las variables necesarias como argumentos a bash -s
          printf -v remote_app_dir_q "%q" "$REMOTE_APP_DIR"
          printf -v project_name_q "%q" "$PROJECT_NAME"
          printf -v remote_compose_file_q "%q" "$REMOTE_COMPOSE_FILE"
          ssh "$REMOTE_USER_HOST" "bash -s -- ${remote_app_dir_q} ${project_name_q} ${remote_compose_file_q}" << 'EOF'
            set -e
            # Asignar argumentos posicionales
            REMOTE_APP_DIR_SCRIPT="$1"
            PROJECT_NAME_SCRIPT="$2"
            REMOTE_COMPOSE_FILE_SCRIPT="$3"

            cd "$REMOTE_APP_DIR_SCRIPT"
            echo "[Remote] Pulling image specified in .env..."
            # Usar -p para aislar y -f con ruta absoluta. No usar --env-file ni --no-dotenv.
            docker compose -p "$PROJECT_NAME_SCRIPT" -f "$REMOTE_COMPOSE_FILE_SCRIPT" pull

            echo "[Remote] Starting application via Docker Compose..."
            # Usar -p para aislar y -f con ruta absoluta. No usar --env-file ni --no-dotenv.
            docker compose -p "$PROJECT_NAME_SCRIPT" -f "$REMOTE_COMPOSE_FILE_SCRIPT" up -d --remove-orphans

            echo "[Remote] Deployment complete for $PROJECT_NAME_SCRIPT."
          EOF

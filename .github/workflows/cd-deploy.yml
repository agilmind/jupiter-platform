# .github/workflows/cd-deploy.yml
name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure
          - applications
          - all
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      # Pasos 1-3 sin cambios
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Create Deploy Directories on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf"

      # --- PASOS 4 y 5 REEMPLAZADOS por scp directo ---
      - name: Copy Files to Server via scp
        run: |
          echo "Determinando archivos a copiar para target: ${{ github.event.inputs.deployment_target }}"
          SCP_PORT_ARG=""
          if [[ -n "${{ secrets.SSH_PORT }}" ]]; then
            SCP_PORT_ARG="-P ${{ secrets.SSH_PORT }}"
          fi

          TARGET_HOST="${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}"
          TARGET_CONFIG_DIR="/home/deploy/jupiter_config"
          TARGET_SCRIPT="/home/deploy/deploy.sh"

          # Copiar script de despliegue SIEMPRE
          echo "Copiando deploy.sh..."
          scp -o StrictHostKeyChecking=no $SCP_PORT_ARG \
              apps/jupiter/vps-infrastructure/hybrid/deploy.sh \
              ${TARGET_HOST}:${TARGET_SCRIPT}

          # Copiar archivos de Apps (Condicional)
          if [[ "${{ github.event.inputs.deployment_target }}" == "applications" || "${{ github.event.inputs.deployment_target }}" == "all" ]]; then
            echo "Copiando docker-compose.prod.yml..."
            scp -o StrictHostKeyChecking=no $SCP_PORT_ARG \
                apps/jupiter/docker-compose.prod.yml \
                ${TARGET_HOST}:${TARGET_CONFIG_DIR}/docker-compose.prod.yml
          fi

          # Copiar archivos de Infra (Condicional)
          if [[ "${{ github.event.inputs.deployment_target }}" == "infrastructure" || "${{ github.event.inputs.deployment_target }}" == "all" ]]; then
            echo "Copiando docker-compose.vps.yml..."
            scp -o StrictHostKeyChecking=no $SCP_PORT_ARG \
                apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml \
                ${TARGET_HOST}:${TARGET_CONFIG_DIR}/docker-compose.vps.yml

            echo "Copiando nginx-conf/*..."
            # Asegurarse que el directorio nginx-conf existe en el runner
            if [ -d "apps/jupiter/vps-infrastructure/hybrid/nginx-conf" ]; then
                scp -o StrictHostKeyChecking=no $SCP_PORT_ARG \
                    apps/jupiter/vps-infrastructure/hybrid/nginx-conf/* \
                    ${TARGET_HOST}:${TARGET_CONFIG_DIR}/nginx-conf/
            else
                echo "Advertencia: Directorio nginx-conf no encontrado en el runner."
            fi
          fi
          echo "Copia de archivos completada."
      # --- FIN REEMPLAZO PASOS 4/5 ---

      # Paso 6: Asegurar que deploy.sh sea ejecutable (SIN SUDO)
      - name: Make Deploy Script Executable
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Estableciendo permiso de ejecución en /home/deploy/deploy.sh..."
            chmod +x /home/deploy/deploy.sh
            echo "Verificando:"
            ls -l /home/deploy/deploy.sh

      # Paso 7: Ejecutar el script (SIN SUDO)
      - name: Execute Deployment Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo ">>> Entering Step 7: Execute Deployment Script as User ${{ secrets.SSH_USER }}"
            # Exportar variables para el script
            export DEPLOY_TARGET="${{ github.event.inputs.deployment_target }}"
            export IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            export GHCR_TOKEN="${{ secrets.GHCR_TOKEN }}"
            # export DOMAIN_NAME="tu.dominio.real" # <-- Exporta si es necesario

            echo " Deployment Target (exported): $DEPLOY_TARGET"
            echo " Image Tag (exported)        : $IMAGE_TAG"
            # --- CAMBIO: Ejecutar SIN sudo ---
            echo "Running: /home/deploy/deploy.sh"
            /home/deploy/deploy.sh # Ejecutar como el usuario SSH (deploy)
            EXIT_CODE=$? # Capturar código de salida del script
            echo "<<< Exiting Step 7 (Script Exit Code: $EXIT_CODE)"
            exit $EXIT_CODE # Salir del paso con el código del script

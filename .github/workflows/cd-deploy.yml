# .github/workflows/cd-deploy.yml
name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure # <-- Despliega solo docker-compose.vps.yml
          - applications   # <-- Despliega solo docker-compose.prod.yml
          - all            # <-- Despliega ambos (comportamiento anterior)
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  # --- Job Definition ---
  deploy: # <-- Nivel de Job (Indentación correcta)
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest # <-- 'runs-on' es VÁLIDO aquí

    # --- Steps within the Job ---
    steps: # <-- Nivel de Steps
      - name: Start Deployment
        run: echo "Workflow de despliegue iniciado manually para [${{ github.event.inputs.deployment_target }}] con tag [${{ github.event.inputs.image_tag }}]..."

      # Paso 1: Checkout del código
      - name: Checkout Code
        uses: actions/checkout@v4 # <-- 'uses' es VÁLIDO aquí

      # Paso 2: Configurar Agente SSH
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Paso 3: Crear Directorio de Configuración Base en Servidor
      - name: Create Base Config Directory on Server
        # <--- CORRECCIÓN de sintaxis multi-línea para 'run'
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf"

      # Paso 4: Copiar Archivos de Configuración según el target
      - name: Copy Configuration Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT != '' ? secrets.SSH_PORT : '22' }}
          # <--- CORRECCIÓN de sintaxis multi-línea para 'source'
          source: |
            ${{ (github.event.inputs.deployment_target == 'applications' || github.event.inputs.deployment_target == 'all') && 'apps/jupiter/docker-compose.prod.yml' || '' }}
            ${{ (github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all') && 'apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml' || '' }}
            ${{ (github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all') && 'apps/jupiter/vps-infrastructure/hybrid/nginx-conf/*' || '' }}
          target: "/home/deploy/jupiter_config/"
          strip_components: 3 # Ajusta si la estructura generada es diferente

      # Paso 5: Copiar el NUEVO deploy.sh al servidor
      - name: Copy Deploy Script to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT != '' ? secrets.SSH_PORT : '22' }}
          # Asume que el script generado está en esta ruta relativa al checkout
          source: "tools/project/src/blueprints/infraestructure/vps-infraestructure/hybrid/deploy.sh"
          target: "/home/deploy/"

      # Paso 6: Asegurar que deploy.sh sea ejecutable
      - name: Make Deploy Script Executable
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT != '' ? secrets.SSH_PORT : '22' }}
          # <--- CORRECCIÓN de sintaxis multi-línea para 'script'
          script: |
            sudo chmod +x /home/deploy/deploy.sh
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/deploy/deploy.sh # O el grupo apropiado

      # Paso 7: Ejecutar el script de despliegue en el servidor remoto
      - name: Execute Deployment Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT != '' ? secrets.SSH_PORT : '22' }}
          # <--- CORRECCIÓN de sintaxis multi-línea para 'script'
          script: |
            # Construir argumentos para deploy.sh
            DEPLOY_ARGS=""
            if [ "${{ github.event.inputs.deployment_target }}" == "infrastructure" ]; then
              DEPLOY_ARGS="--infra"
            elif [ "${{ github.event.inputs.deployment_target }}" == "applications" ]; then
              DEPLOY_ARGS="--apps"
            elif [ "${{ github.event.inputs.deployment_target }}" == "all" ]; then
              DEPLOY_ARGS="--all"
            else
              echo "Target inválido: ${{ github.event.inputs.deployment_target }}"
              exit 1
            fi

            # Ejecutar el script actualizado desde /home/deploy/
            sudo /home/deploy/deploy.sh $DEPLOY_ARGS --tag ${{ github.event.inputs.image_tag }} --token ${{ secrets.GHCR_TOKEN }}

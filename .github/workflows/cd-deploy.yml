# .github/workflows/cd-deploy.yml
name: CD - Deploy to Jupiter Server

on:
  workflow_dispatch:
    inputs:
      deployment_target:
        description: 'Target to deploy (infra=VPS; apps=Prod; all=Both)'
        required: true
        type: choice
        options:
          - infrastructure
          - applications
          - all
        default: 'all'
      image_tag:
        description: 'Image tag for applications (default: latest)'
        required: false
        default: 'latest'

jobs:
  deploy:
    name: Deploy ${{ github.event.inputs.deployment_target }} to Production (jupiter.ar)
    runs-on: ubuntu-latest

    steps:
      # Pasos 1-4 sin cambios (usando scp separado para infra)
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Create Base Config Directory on Server
        run: |
          ssh -o StrictHostKeyChecking=no -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "mkdir -p /home/deploy/jupiter_config/nginx-conf"
      - name: Copy App Docker Compose File to Server
        if: github.event.inputs.deployment_target == 'applications' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/docker-compose.prod.yml"
          target: "/home/deploy/jupiter_config/"
          overwrite: true
      - name: Copy VPS Docker Compose File to Server
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/docker-compose.vps.yml"
          target: "/home/deploy/jupiter_config/"
          overwrite: true
      - name: Copy Nginx Config Files to Server
        if: github.event.inputs.deployment_target == 'infrastructure' || github.event.inputs.deployment_target == 'all'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "apps/jupiter/vps-infrastructure/hybrid/nginx-conf/*"
          target: "/home/deploy/jupiter_config/nginx-conf/"
          overwrite: true

      # Pasos 5 y 6 NUEVOS para actualizar deploy.sh usando tee
      - name: Read Deploy Script Content
        id: deploy_script_content
        run: echo "script_content=$(cat apps/jupiter/vps-infrastructure/hybrid/deploy.sh | base64 -w 0)" >> $GITHUB_OUTPUT
      - name: Update Deploy Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Forzando actualización de /home/deploy/deploy.sh..."
            echo '${{ steps.deploy_script_content.outputs.script_content }}' | base64 -d | sudo tee /home/deploy/deploy.sh > /dev/null
            echo "Estableciendo permisos y propietario para /home/deploy/deploy.sh..."
            sudo chmod +x /home/deploy/deploy.sh
            sudo chown ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /home/deploy/deploy.sh
            echo "Verificando permisos de /home/deploy/deploy.sh:"
            ls -l /home/deploy/deploy.sh

      # Paso 7: Ejecutar el script - CORREGIDO para usar EXPORT en lugar de ENV
      - name: Execute Deployment Script on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          # <--- CORRECCIÓN: QUITAMOS 'env:'
          # <--- CORRECCIÓN: Añadimos 'export' dentro de 'script:'
          script: |
            echo ">>> Entering Step 7: Execute Deployment Script"

            # Exportar variables para que el script /home/deploy/deploy.sh las lea del entorno
            export DEPLOY_TARGET="${{ github.event.inputs.deployment_target }}"
            export IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            export GHCR_TOKEN="${{ secrets.GHCR_TOKEN }}"
            # export DOMAIN_NAME="tu.dominio.real" # <-- Exporta si es necesario

            echo " Deployment Target (exported): $DEPLOY_TARGET"
            echo " Image Tag (exported)        : $IMAGE_TAG"
            echo "Running: sudo /home/deploy/deploy.sh"
            # El script ejecutado por sudo debería heredar estas variables exportadas
            sudo /home/deploy/deploy.sh
            echo "<<< Exiting Step 7"

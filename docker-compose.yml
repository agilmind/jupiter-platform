services:
  # Servicios existentes
  nginx:
    image: fholzer/nginx-brotli:latest
    container_name: app_nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./services/nginx/conf:/etc/nginx/conf.d
      - ./services/nginx/ssl:/etc/nginx/ssl
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./services/nginx/www:/var/www/html
      - ./services/api/frontend:/var/www/frontend
      - api-uploads:/var/www/uploads
    depends_on:
      - api
      - wordpress
      - email-service
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  # Certificados https
  certbot:
    image: certbot/certbot
    container_name: app_certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - ./services/nginx/www:/var/www/html
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/html --email ${ADMIN_EMAIL} --agree-tos --no-eff-email --force-renewal -d jupiter.ar -d www.jupiter.ar -d webapp.jupiter.ar -d grafana.jupiter.ar
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: app_api
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
      # GraphQL endpoint para workers
      GRAPHQL_ENDPOINT: http://api:4000/graphql
      GRAPHQL_API_KEY: ${INTERNAL_API_KEY:-default-api-key}
    volumes:
      - api-uploads:/services/uploads
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  # Nuevos servicios worker
  email-service:
    build:
      context: .
      dockerfile: services/email-service/Dockerfile
    container_name: app_email_service
    restart: always
    environment:
      # Conexión RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      EMAIL_QUEUE: emails_jupiter
      EMAIL_RETRY_QUEUE: emails_retry_jupiter
      EMAIL_DEAD_LETTER_QUEUE: emails_dlq_jupiter

      # Conexión GraphQL con API principal
      GRAPHQL_ENDPOINT: http://api:4000/graphql
      GRAPHQL_API_KEY: ${INTERNAL_API_KEY:-default-api-key}

      # Configuración del proveedor de email
      EMAIL_HOST: smtp.gmail.com
      EMAIL_PORT: 587
      EMAIL_SECURE: 'false'
      EMAIL_USER: ${GMAIL_USER:-agilmind.app@gmail.com}
      EMAIL_PASSWORD: ${GMAIL_APP_PASSWORD:-tu-clave-de-aplicacion}
      EMAIL_FROM: ${GMAIL_USER:-agilmind.app@gmail.com}
    depends_on:
      - rabbitmq
      - api
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  # Infraestructura compartida
  rabbitmq:
    image: rabbitmq:3-management
    container_name: app_rabbitmq
    restart: always
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  postgres:
    image: postgres:14
    container_name: app_postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

  # Base de datos MySQL para WordPress
  mysql:
    image: mysql:8.0
    container_name: app_mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${WP_DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${WP_DB_NAME}
      MYSQL_USER: ${WP_DB_USER}
      MYSQL_PASSWORD: ${WP_DB_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network
    healthcheck:
      test:
        [
          'CMD',
          'mysqladmin',
          'ping',
          '-h',
          'localhost',
          '-u',
          'root',
          '-p${WP_DB_ROOT_PASSWORD}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  # WordPress CMS
  wordpress:
    build:
      context: ./services/wordpress
      dockerfile: Dockerfile
    container_name: app_wordpress
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_USER: ${WP_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WP_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WP_DB_NAME}
      WORDPRESS_TABLE_PREFIX: wp_
    volumes:
      - wordpress-data:/var/www/html
      - ./cms-wordpress/wp-content:/var/www/html/wp-content/
      - ./cms-wordpress/uploads:/var/www/html/wp-content/uploads
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  certbot-etc:
  certbot-var:
  api-uploads:
  postgres-data:
  rabbitmq-data:
  mysql-data:
  wordpress-data:
  rabbitmq-logs:
